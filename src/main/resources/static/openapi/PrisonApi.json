{
  "openapi": "3.0.1",
  "info": {
    "title": "HMPPS Prison API Documentation",
    "description": "<div>\n  <h2 id=\"overview\">Overview</h2>\n  <p>A RESTful API service for accessing NOMIS data sets.</p>\n  <p>\n    All times sent to the API should be sent in local time without the timezone e.g. YYYY-MM-DDTHH:MM:SS.\n    All times returned in responses will be in Europe / London local time unless otherwise stated.\n  </p>\n  <p>\n    Some endpoints are described as using the Replica database, a read-only copy of the live database which at\n    time of writing lags by < 1 second up to approximately 2 seconds. These endpoints are not suitable for use\n    by services reacting to events or refreshing web pages where a change has just been made.\n  </p>\n  <p>\n    This service does provide searching capabilities, but can sometimes be slow to return results. A faster search\n    is available in the\n    <a href=\"https://prisoner-search-dev.prison.service.justice.gov.uk/swagger-ui/index.html\">HMPPS Prisoner Search</a>\n    service. This also augments the results from the incentives and restricted patients service. That service should\n    be used in preference, with this service only then being used if the data is not available there. Furthermore, the\n    Prisoner Search service also provides key prisoner view that could be suitable.\n  </p>\n  <h2 id=\"role-restrictions\">Access restrictions</h2>\n  <p>\n    All the API endpoints in Prison API require an access token. Clients can either use the access token from sign into\n    <a href=\"https://github.com/ministryofjustice/hmpps-auth\">HMPPS Auth</a>, or obtain a token\n    by making a client credentials request to HMPPS Auth (with or without an optional username associated with the token).\n  </p>\n  <p>Access to endpoints are then restricted in two ways:</p>\n  <ul>\n    <li>\n      Relationship based access. The username (if present) in the token is used to determine what prisons (caseloads) the user is associated with. If there is\n      no username in the token or if it doesn't correspond to a valid account in NOMIS then it will be ignored and only role based access will be used. Each\n      prisoner has a current prison location, or is determined to be out of prison or on temporary transfer. If the user also has the 'INACTIVE_BOOKINGS' role\n      then they can view prisoner details of prisoners that are out or on temporary transfer. Endpoints or services that restrict in this way will be\n      annotated with <code>@VerifyOffenderAccess</code>, <code>@VerifyBookingAccess</code>, depending on whether an offender or booking is passed into\n      the method. The <code>@VerifyAgencyAccess</code> is also used to restrict to allowing to see details in a particular prison e.g. for seeing all alerts.\n      Sometimes the annotation can be hidden deep into multiple different levels of service so is sometimes difficult to locate. The annotation can also specify\n      override roles, so even if the user doesn't have a relationship with the prisoner via a prison then they could still be allowed access via their roles.\n    </li>\n    <li>\n      Role based access. The token will include a number of roles. An endpoint or service can have a <code>@PreAuthorize</code> annotation that restricts access\n      to a list of roles.\n    </li>\n  </ul>\n  <p>New endpoints do try to document what access restrictions are in place, but for old endpoints it is often necessary to look at the source code for\n    <a href=\"https://github.com/ministryofjustice/prison-api\">Prison API</a> in github to find that out.</p>\n\n  <p>\n    Note also that the endpoints that write data back to NOMIS also often require a write scope in the token. User access tokens will automatically have a\n    write scope, but client credentials tokens will often be read scope only unless write has been specifically requested. Write scope endpoints / services\n    will either be annotated with <code>@HasWriteScope</code> or the <code>@PreAuthorize</code> will have an extra <code>hasAuthority('SCOPE_write')</code>\n    condition.\n  </p>\n\n  <p>\n    For an example suppose that information about alerts for a list of prisoners is required. The endpoint is '/booking/offenderNo/{agencyId}/alerts'.\n    Searching the codebase for that endpoint reveals that it is in <code>BookingResource</code>. The resource endpoint doesn't have any annotations\n    restricting access. However it then calls <code>InmateAlertService.getInmateAlertsByOffenderNosAtAgency</code>. This has the following annotation and\n    method signature:\n  <pre>\n      @VerifyAgencyAccess(overrideRoles = {\"SYSTEM_USER\", \"GLOBAL_SEARCH\", \"VIEW_PRISONER_DATA\"})\n      public List<Alert> getInmateAlertsByOffenderNosAtAgency(final String agencyId, final List<String> offenderNos) {\n    </pre>\n  which means that either the token has one of those three roles, or the user associated with the token has <code>agencyId</code> as one of their caseloads.\n  </p>\n</div>\n",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "2024-01-18.23217.98cbbbd"
  },
  "servers": [
    {
      "url": "https://prison-api-dev.prison.service.justice.gov.uk",
      "description": "Development"
    },
    {
      "url": "https://api-preprod.prison.service.justice.gov.uk",
      "description": "PreProd"
    },
    {
      "url": "https://prison-api.prison.service.justice.gov.uk",
      "description": "Prod"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/api/users/me/activeCaseLoad": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update working caseload for current user.",
        "description": "Update working caseload for current user.",
        "operationId": "updateMyActiveCaseLoad",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseLoad"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "the user does not have permission to view the caseload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/add/default/{caseload}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Add the NWEB caseload to specified caseload.",
        "description": "Add the NWEB caseload to specified caseload.",
        "operationId": "addApiAccessForCaseload",
        "parameters": [
          {
            "name": "caseload",
            "in": "path",
            "description": "The caseload (equates to prison) id to add all active users to default API caseload (NWEB)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No New Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseloadUpdate"
                }
              }
            }
          },
          "201": {
            "description": "New Users Enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseloadUpdate"
                }
              }
            }
          }
        }
      }
    },
    "/api/smoketest/offenders/{offenderNo}/release": {
      "put": {
        "tags": [
          "smoketest"
        ],
        "summary": "Releases this offender, with smoke test data",
        "operationId": "releasePrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "403": {
            "description": "Requires role ROLE_SMOKE_TEST",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/smoketest/offenders/{offenderNo}/recall": {
      "put": {
        "tags": [
          "smoketest"
        ],
        "summary": "Recalls this offender, with smoke test data",
        "operationId": "recallPrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "403": {
            "description": "Requires role ROLE_SMOKE_TEST",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/domains/{domain}/codes/{code}": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "Reference code detail for reference domain and code (with sub-codes).",
        "description": "Reference code detail for reference domain and code (with sub-codes).<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getReferenceCodeByDomainAndCode",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain identifier/name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The reference code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubCodes",
            "in": "query",
            "description": "Specify whether or not to return the reference code with its associated sub-codes.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "reference-domains"
        ],
        "summary": "Updates a reference code",
        "operationId": "updateReferenceCode",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain identifier/name.",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The reference code.",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceCodeInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "reference-domains"
        ],
        "summary": "Creates a reference code",
        "operationId": "createReferenceCode",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain identifier/name.",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The reference code.",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceCodeInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/transfer-out": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "*** BETA *** Marks a prisoner as in transit from their current prison location to a new prison. Must be an active prisoner in currently inside a prison, requires the TRANSFER_PRISONER role",
        "operationId": "transferOutPrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToTransferOut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/transfer-in": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "*** BETA *** Transfer a prisoner into a prison. Must be an out prisoner in currently in transfer status, requires the TRANSFER_PRISONER role",
        "operationId": "transferInPrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToTransferIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to transfer a prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/temporary-absence-out": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "*** ALPHA *** transfer a prisoner to a temporary absence with the option to release the prisoners bed, requires the TRANSFER_PRISONER_ALPHA role. Only support scenarios are unscheduled to city and scheduled to address",
        "operationId": "transferOutPrisonerToTemporaryAbsence",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToTransferOutToTemporaryAbsence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/temporary-absence-arrival": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "Transfer a prisoner into a prison from temporary absence. Must be an out prisoner in currently in TAP status, requires the TRANSFER_PRISONER role",
        "operationId": "temporaryAbsenceArrival",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForTemporaryAbsenceArrival"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to transfer a prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/release": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "*** BETA *** Releases a prisoner from their current prison location. Must be an active prisoner in currently inside a prison, requires the RELEASE_PRISONER role",
        "operationId": "releasePrisoner_1",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToReleasePrisoner"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to release a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/recall": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "Recalls a prisoner into prison. TRANSFER_PRISONER role",
        "operationId": "recallPrisoner_1",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToRecall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to recall a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/living-unit/{internalLocationDescription}": {
      "put": {
        "tags": [
          "unilink",
          "offenders"
        ],
        "summary": "Move the prisoner to the specified cell.",
        "description": "Unilink specific version of /api/bookings/{bookingId}/living-unit/{internalLocationDescription}.<br/>\n      Requires either a valid user token or a token with UNILINK role.",
        "operationId": "moveToCellOrReception",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "internalLocationDescription",
            "in": "path",
            "description": "The cell location the offender has been moved to",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MDI-1-1"
          },
          {
            "name": "reasonCode",
            "in": "query",
            "description": "The reason code for the move (from reason code domain CHG_HOUS_RSN)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ADM"
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The date / time of the move (defaults to current)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-03-24T12:13:40"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CellMoveResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/discharge-to-hospital": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "Discharges a prisoner to hospital, requires the RELEASE_PRISONER role",
        "operationId": "dischargePrisonerToHospital",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToDischargePrisoner"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to release a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/court-transfer-out": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "*** ALPHA *** transfer a prisoner to a court with the option to release the prisoners bed, requires the TRANSFER_PRISONER_ALPHA role",
        "operationId": "transferOutPrisonerToCourt",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToTransferOutToCourt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/court-transfer-in": {
      "put": {
        "tags": [
          "offenders"
        ],
        "summary": "Transfer a prisoner into a prison from court. Must be an out prisoner in currently in transfer status, requires the TRANSFER_PRISONER role",
        "operationId": "courtTransferIn",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForCourtTransferIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to transfer a prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest/checks-passed": {
      "put": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Set the HDC checks passed flag",
        "operationId": "setCurfewChecks",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HdcChecks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "The checks passed flag was set"
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "423": {
            "description": "Curfew or HDC status in use for this booking id (possibly in P-Nomis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Clear the HDC checks passed flag",
        "operationId": "clearCurfewChecks",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The checks passed flag was cleared"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "423": {
            "description": "Curfew or HDC status in use for this booking id (possibly in P-Nomis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest/approval-status": {
      "put": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Set the HDC approval status",
        "operationId": "setApprovalStatus",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The new approval status was set"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "423": {
            "description": "Curfew or HDC status in use for this booking id (possibly in P-Nomis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Clear the HDC approval status",
        "operationId": "clearApprovalStatus",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The new approval status was cleared"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "423": {
            "description": "Curfew or HDC status in use for this booking id (possibly in P-Nomis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/category/{bookingId}/nextReviewDate/{nextReviewDate}": {
      "put": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Update the next review date on the latest active categorisation",
        "description": "Update categorisation record with new next review date. Requires client role MAINTAIN_ASSESSMENTS.",
        "operationId": "updateCategorisationNextReviewDate",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "nextReviewDate",
            "in": "path",
            "description": "The new next review date (in YYYY-MM-DD format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden - user not authorised to update the categorisation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Active categorisation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/category/{bookingId}/inactive": {
      "put": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Set all active or pending (status A or P) categorisations inactive",
        "description": "This endpoint should only be used with edge case categorisations. Requires client role MAINTAIN_ASSESSMENTS.",
        "operationId": "setCategorisationInactive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Indicates which categorisation statuses to set.<li>ACTIVE (default): set all active (i.e. approved) categorisations inactive,</li><li>PENDING: set all pending (i.e. awaiting approval) categorisations inactive,</li>",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden - user not authorised to update categorisations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request - e.g. invalid status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/category/reject": {
      "put": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Reject a pending offender categorisation.",
        "description": "Update categorisation record with rejection. Requires client role MAINTAIN_ASSESSMENTS or user role APPROVE_CATEGORISATION.",
        "operationId": "rejectCategorisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryRejectionDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Validation error - e.g. comment too long or committee code does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/offender-assessments/category/categorise": {
      "put": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Update a pending offender categorisation.",
        "description": "This is intended for use by the categoriser to correct any problems with a pending (in-progress) categorisation. Fields left as null will be left unchanged. Requires client role MAINTAIN_ASSESSMENTS or user role ROLE_CREATE_CATEGORISATION or ROLE_CREATE_RECATEGORISATION.",
        "operationId": "updateCategorisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorisationUpdateDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request - e.g. category does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Record new offender categorisation.",
        "description": "Create new categorisation record. The booking id and new sequence number is returned. Requires client role MAINTAIN_ASSESSMENTS or user role ROLE_CREATE_CATEGORISATION or ROLE_CREATE_RECATEGORISATION.",
        "operationId": "createCategorisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorisationDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request - e.g. category does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/category/approve": {
      "put": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Approve a pending offender categorisation.",
        "description": "Update categorisation record with approval. Requires client role MAINTAIN_ASSESSMENTS or user role APPROVE_CATEGORISATION.",
        "operationId": "approveCategorisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryApprovalDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Validation error - e.g. category does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offences/update-active-flag": {
      "put": {
        "tags": [
          "offences"
        ],
        "summary": "Update the active flag of an offence",
        "description": "Requires NOMIS_OFFENCE_ACTIVATOR role",
        "operationId": "updateOffenceActiveFlag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OffenceActivationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The active flag has been updated successfully"
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request."
          }
        }
      }
    },
    "/api/offences/offence": {
      "put": {
        "tags": [
          "offences"
        ],
        "summary": "Update offences",
        "description": "Requires OFFENCE_MAINTAINER role",
        "operationId": "updateOffences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OffenceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Offence updated successfully"
          },
          "404": {
            "description": "A dependent resource is missing (either the offence or the home office code doesnt exist)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "offences"
        ],
        "summary": "Create offences",
        "description": "Requires OFFENCE_MAINTAINER role",
        "operationId": "createOffences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OffenceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "A record already exists for a passed in offence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Offences created successfully"
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "A dependent resource is missing (either the statute or the home office code doesnt exist)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/prison-to-prison/{eventId}/cancel": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Cancels a scheduled prison to prison move for an offender.",
        "description": "Cancels a scheduled prison to prison move for an offender. Requires role PRISON_MOVE_MAINTAINER and scope write",
        "operationId": "cancelPrisonToPrisonMove",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking linked to the scheduled event.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The identifier of the scheduled event to be cancelled.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonMoveCancellation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/move-to-cell-swap": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Move the prisoner from current cell to cell swap",
        "description": "Using role MAINTAIN_CELL_MOVEMENTS will no longer check for user access to prisoner booking, this endpoint will be removed in future releases",
        "operationId": "moveToCellSwap",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1200866
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestMoveToCellSwap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderBooking"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/bookings/{bookingId}/living-unit/{internalLocationDescription}": {
      "put": {
        "tags": [
          "bookings"
        ],
        "operationId": "moveToCell",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1200866
          },
          {
            "name": "internalLocationDescription",
            "in": "path",
            "description": "The cell location the offender has been moved to",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MDI-1-1"
          },
          {
            "name": "reasonCode",
            "in": "query",
            "description": "The reason code for the move (from reason code domain CHG_HOUS_RSN)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ADM"
          },
          {
            "name": "dateTime",
            "in": "query",
            "description": "The date / time of the move (defaults to current)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-03-24T12:13:40"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CellMoveResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/court-hearings/{hearingId}/hearing-date": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Amends the scheduled court hearing date and/or time for an offender.",
        "description": "Amends the scheduled court hearing date and/or time for an offender. Requires role COURT_HEARING_MAINTAINER and scope write",
        "operationId": "courtHearingDateAmendment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking to associate the update with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hearingId",
            "in": "path",
            "description": "The  court hearing to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourtHearingDateAmendment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtHearing"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/alert/{alertSeq}": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Update an alert",
        "operationId": "updateAlert",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "bookingId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "alertSeq",
            "in": "path",
            "description": "alertSeq",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "lockTimeout",
            "in": "query",
            "description": "Whether to timeout if locked",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertChanges"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "423": {
            "description": "Record in use for this booking id (possibly in P-Nomis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/activities/{activityId}/attendance": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Update offender attendance and pay.",
        "description": "Update offender attendance and pay.",
        "operationId": "updateAttendance",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking Id of the prisoner",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 213531
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "The activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1212131
          },
          {
            "name": "lockTimeout",
            "in": "query",
            "description": "Whether to timeout if locked",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttendance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request - e.g. validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to attend activity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Attendance data has been updated"
          },
          "423": {
            "description": "Record in use for this booking id (possibly in P-Nomis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found - booking or event does not exist or is not accessible to user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/{offenderNo}/activities/{activityId}/attendance": {
      "put": {
        "tags": [
          "bookings"
        ],
        "operationId": "updateAttendance_1",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of the prisoner",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "The activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1212131
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttendance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request - e.g. validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to attend activity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Attendance data has been updated"
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found - booking or event does not exist or is not accessible to user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/activities/attendance": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Update attendance and pay for multiple bookings.",
        "description": "Update offender attendance and pay.",
        "operationId": "updateAttendanceForMultipleBookingIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttendanceBatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request - e.g. validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to attend activity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Attendance data has been updated"
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found - booking or event does not exist or is not accessible to user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{appointmentId}/comment": {
      "put": {
        "tags": [
          "appointments"
        ],
        "summary": "Change an appointment's comment.",
        "operationId": "updateAppointmentComment",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "The appointment's unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The text of the comment. May be empty or null"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The appointment's comment has been set."
          },
          "404": {
            "description": "The appointment was not found."
          },
          "403": {
            "description": "The client is not authorised for this operation"
          }
        }
      }
    },
    "/api/agencies/{agencyId}": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "Agency detail.",
        "description": "Agency detail.",
        "operationId": "getAgency",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Only return active agencies",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "agencyType",
            "in": "query",
            "description": "Agency Type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withAddresses",
            "in": "query",
            "description": "Returns Address Information",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skipFormatLocation",
            "in": "query",
            "description": "Don't format the location",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agency"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "agencies"
        ],
        "summary": "Update an existing agency",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "updateAgency",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToUpdateAgency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agency"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to update a agency location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/addresses/{addressId}": {
      "put": {
        "tags": [
          "agencies"
        ],
        "summary": "Update an existing address",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "updateAgencyAddress",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The ID of the address",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToUpdateAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to update a agency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agencies"
        ],
        "summary": "Delete an existing address",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "deleteAgencyAddress",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The ID of the address",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden - user not authorised to delete a agency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/addresses/{addressId}/phones/{phoneId}": {
      "put": {
        "tags": [
          "agencies"
        ],
        "summary": "Update an existing contact on an address",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "updateAgencyAddressPhoneContact",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The ID of the address",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "The ID of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToUpdatePhone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Telephone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to update a agency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agencies"
        ],
        "summary": "Delete an existing address contact",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "deleteAgencyAddressPhoneContact",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The ID of the address",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "The ID of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden - user not authorised to delete a agency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/transactions": {
      "post": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Post a financial transaction to NOMIS.",
        "description": "The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>\nThis will be setup by script intially as part of the deployment process as shown below<br/><br/>\n<table>\n  <tr><th>Transaction Type</th><th>Description</th><th>Digital Prison</th><th>Non Digital Prison</th></tr>\n  <tr><td>CANT</td><td>Canteen Spend</td><td>Yes</td><td>No</td></tr>\n  <tr><td>REFND</td><td>Canteen Refund</td><td>Yes</td><td>No</td></tr>\n  <tr><td>PHONE</td><td>Phone Credit</td><td>Yes</td><td>No</td></tr>\n  <tr><td>MRPR</td><td>Misc Receipt - Private Cash</td><td>Yes</td><td>Yes</td></tr>\n  <tr><td>MTDS</td><td>Money through digital service</td><td>Yes</td><td>Yes</td></tr>\n  <tr><td>DTDS</td><td>Disbursement through Digital service</td><td>Yes</td><td>Yes</td></tr>\n  <tr><td>CASHD</td><td>Cash Disbursement</td><td>Yes</td><td>Yes</td></tr>\n  <tr><td>RELA</td><td>Money to Relatives</td><td>Yes</td><td>Yes</td></tr>\n  <tr><td>RELS</td><td>Money to Relatives- Spends</td><td>Yes</td><td>Yes</td></tr>\n</table>Notes:<br/>\n<ul>\n  <li>The sub_account the amount is debited or credited from will be determined by the transaction_type definition in NOMIS.</li>\n  <li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.</li>\n  <li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li>\n</ul>\nRequires NOMIS_API_V1 or UNILINK role.\n",
        "operationId": "createTransaction",
        "parameters": [
          {
            "name": "X-Client-Name",
            "in": "header",
            "description": "If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "One of: <ul><li>Insufficient Funds - The prisoner has insufficient funds in the required account to cover the cost of the debit transaction</li><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Invalid transaction type - The transaction type has not been set up for the API for {prison_id}</li><li>Finance Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate post - The unique_client_ref has been used before",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/payment": {
      "post": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Store a payment for an offender account.",
        "description": "Pay events will be stored in a table on receipt by Nomis to be processed by a batch job scheduled to run after the last Nomis payroll batch job but before the advances and scheduled payments batch jobs.\n<br/>Possible payment types are:<br/><table><tr><td>A_EARN</td><td>Credit, Offender Payroll</td></tr><tr><td>ADJ</td><td>Debit, Adjudication Award</td></tr></table><br/>Example request:<br/>\n<pre>\n{\n  \"type\": \"A_EARN\",\n  \"description\": \"May earnings\",\n  \"amount\": 1,\n  \"client_transaction_id\": \"PAY-05-19\"\n}\n</pre>\n<br/>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu.\nOnly those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>This will be setup by script intially as part of the deployment process as shown below<br/><br/>\nRequires NOMIS_API_V1 or UNILINK role.\n",
        "operationId": "storePayment",
        "parameters": [
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "One of: <ul><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Invalid payment type</li><li>Client reference more than 12 characters</li><li>Missing data in request</li><li>Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate post - after an error with a post this response will be given for subsequent duplicate attempts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested prison or offender could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{previous_prison_id}/offenders/{noms_id}/transfer_transactions": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Record transaction at previous Prison.",
        "description": "<p>Post a financial transaction to Nomis to a prison that the offender is no longer at.</p><p>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid. Only Transaction types with a usage of R (Receipt) are valid.Transaction Types are maintained via the Maintain Transaction Types screen (OCMTRANS).</p><p>Transaction is posted to the specified prison.  if the account has been closed at this prison then it is re-opened first.</p><p>If the offender has been transferred to another prison then the funds are transferred to this prison.</p><p>If the account was previously closed then it will be closed again.</p><p>If the offender has been released then the funds are transferred to NACRO. Based on the Nomis Clear Inactive accounts screen (OTDCLINA).</p>",
        "operationId": "transferTransaction",
        "parameters": [
          {
            "name": "X-Client-Name",
            "in": "header",
            "description": "If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "previous_prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Duplicate Post - A transaction already exists with the client_unique_ref provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "One of: <ul><li>Offender Not Found - No offender matching the specified offender_id has been found on nomis.</li><li>Offender never at prison - The offender has never been at the specified prison</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "One of: <ul><li>Invalid transaction type - The transaction type has not been set up for the API for {prison_id}</li><li>Finance Exception - This indicates an unexpected financial problem, check the nomis_api_log table for details.</li><li>Only receipt transaction types allowed - Only transaction types with a transaction usage of Receipt are allowed.</li><li>Sum of sub account balances not equal to current balance - The sum of all the sub account balances does equal the current balance held for the trust account</li><li>Offender being transferred - The offender is currently in transit</li><li>Offender still in specified prison - The offender is still at the specified prison. Use Record Transaction instead.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/list": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Returns the user details for supplied usernames - POST version to allow large user lists.",
        "description": "user details for supplied usernames",
        "operationId": "getUserDetailsList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The required usernames (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The list of user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/smoketest/offenders/{offenderNo}/imprisonment-status": {
      "post": {
        "tags": [
          "smoketest"
        ],
        "summary": "Sets imprisonment status smoke test data for this offender",
        "operationId": "imprisonmentDataSetup",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "403": {
            "description": "Requires role ROLE_SMOKE_TEST",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/smoketest/offenders/{offenderNo}/details": {
      "post": {
        "tags": [
          "smoketest"
        ],
        "summary": "Updates the offender details for this offender, with smoke test data",
        "operationId": "updatePrisonerDetails",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrisonerDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Requires role ROLE_SMOKE_TEST",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service-prisons/{serviceCode}/prison/{prisonId}": {
      "post": {
        "tags": [
          "service-prisons"
        ],
        "summary": "Activates a prison for the given service",
        "operationId": "addServicePrison",
        "parameters": [
          {
            "name": "serviceCode",
            "in": "path",
            "description": "The code of the service from the EXTERNAL_SERVICES table",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prisonId",
            "in": "path",
            "description": "The id of the prison from the AGENCY_LOCATIONS table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "The prison is already active for the service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "A valid auth token was not presented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The service code or prison does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonDetails"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The auth token does not have the necessary role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "service-prisons"
        ],
        "summary": "Deactivates a prison for the given service",
        "operationId": "removeServicePrison",
        "parameters": [
          {
            "name": "serviceCode",
            "in": "path",
            "description": "The code of the service from the EXTERNAL_SERVICES table",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prisonId",
            "in": "path",
            "description": "The id of the prison from the AGENCY_LOCATIONS table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "A valid auth token was not presented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The service code or prison does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "The auth token does not have the necessary role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/visits": {
      "post": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getVisits",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/externalTransfers": {
      "post": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getExternalTransfers",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of scheduled transfer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/events-by-location-ids": {
      "post": {
        "tags": [
          "schedules"
        ],
        "summary": "Get all events for given date for prisoners in listed cells. Note secondary sort is by start time",
        "description": "Get all events for given date for prisoners in listed cells. Note secondary sort is by start time<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getEventsByLocationId",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required location ids",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/courtEvents": {
      "post": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCourtEvents",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/count-activities": {
      "post": {
        "tags": [
          "schedules"
        ],
        "summary": "Get all Prisoner activities for given date.",
        "description": "Get count of suspended prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCountActivitiesByDateRange",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MDI"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From date of whereabouts list",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "To Date of whereabouts list",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlots",
            "in": "query",
            "description": "Set of one or more of AM, PM or ED",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AM",
                  "PM",
                  "ED"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64"
                },
                "description": "Map of booking IDs to their occurrence counts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerActivitiesCount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/appointments": {
      "get": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAppointments",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date the appointments are scheduled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledAppointmentDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAppointmentsForOffenders",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/activities": {
      "get": {
        "tags": [
          "schedules"
        ],
        "summary": "Get all Prisoner activities for given date.",
        "description": "Get all Prisoner activities for given date<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getActivitiesAtAllLocations",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "includeSuspended",
            "in": "query",
            "description": "Include suspended scheduled activity - defaults to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getActivitiesForBookings",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "includeExcluded",
            "in": "query",
            "description": "Whether to include 'excluded' activities in the results",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/activities-by-event-ids": {
      "post": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getActivitiesByEventIds",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Event ids(mandatory)",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prisoners": {
      "get": {
        "tags": [
          "prisoners"
        ],
        "summary": "List of offenders matching specified criteria.",
        "description": "List of offenders matching specified criteria. Requires GLOBAL_SEARCH role.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getPrisoners_1",
        "parameters": [
          {
            "name": "includeAliases",
            "in": "query",
            "description": "If true the result set should include a row for every matched alias.  If the request includes some combination of firstName, lastName and dateOfBirth then this will be a subset of the OFFENDERS records for one or more offenders. Otherwise it will be every OFFENDERS record for each match on the other search criteria. Default is false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "offenderNo",
            "in": "query",
            "description": "List of offender NOMS numbers. NOMS numbers have the format:<b>ANNNNAA</b>",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pncNumber",
            "in": "query",
            "description": "The offender's PNC (Police National Computer) number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "croNumber",
            "in": "query",
            "description": "The offender's CRO (Criminal Records Office) number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "The first name of the offender.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "middleNames",
            "in": "query",
            "description": "The middle name(s) of the offender.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "The last name of the offender.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dob",
            "in": "query",
            "description": "The offender's date of birth. Cannot be used in conjunction with <i>dobFrom</i> or <i>dobTo</i>. Must be specified using YYYY-MM-DD format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dobFrom",
            "in": "query",
            "description": "Start date for offender date of birth search. If <i>dobTo</i> is not specified, an implicit <i>dobTo</i> value of <i>dobFrom</i> + 10 years will be applied. If <i>dobTo</i> is specified, it will be adjusted, if necessary, to ensure it is not more than 10 years after <i>dobFrom</i>. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dobTo",
            "in": "query",
            "description": "End date for offender date of birth search. If <i>dobFrom</i> is not specified, an implicit <i>dobFrom</i> value of <i>dobTo</i> - 10 years will be applied. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Offender's location filter (IN, OUT or ALL) - defaults to ALL.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gender",
            "in": "query",
            "description": "Offender's gender code (F - Female, M - Male, NK - Not Known or NS - Not Specified).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partialNameMatch",
            "in": "query",
            "description": "If <i>true</i>, the search will use partial, start-of-name matching of offender names (where provided). For example, if <i>lastName</i> criteria of 'AD' is specified, this will match an offender whose last name is 'ADAMS' but not an offender whose last name is 'HADAD'. This will typically increase the number of matching offenders found. This parameter can be used with any other search processing parameter (e.g. <i>prioritisedMatch</i> or <i>anyMatch</i>).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "prioritisedMatch",
            "in": "query",
            "description": "If <i>true</i>, search criteria prioritisation is used and searching/matching will stop as soon as one or more matching offenders are found. The criteria priority is:<br/><br/>1. <i>offenderNo</i><br/> 2. <i>pncNumber</i><br/>3. <i>croNumber</i><br/>4. <i>firstName</i>, <i>lastName</i>, <i>dob</i> <br/>5. <i>dobFrom</i>, <i>dobTo</i><br/><br/>As an example of how this works, if this parameter is set <i>true</i> and an <i>offenderNo</i> is specified and an offender having this offender number is found, searching will stop and that offender will be returned immediately. If no offender matching the specified <i>offenderNo</i> is found, the search will be repeated using the next priority criteria (<i>pncNumber</i>) and so on. Note that offender name and date of birth criteria have the same priority and will be used together to search for matching offenders (In this case the location filter will be ignored).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "anyMatch",
            "in": "query",
            "description": "If <i>true</i>, offenders that match any of the specified criteria will be returned. The default search behaviour is to only return offenders that match <i>all</i> of the specified criteria. If the <i>prioritisedMatch</i> parameter is also set <i>true</i>, this parameter will only impact the behaviour of searching using offender name and date of birth criteria.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of prisoner records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of prisoner records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>offenderNo, pncNumber, croNumber, firstName, lastName, dob</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "prisoners"
        ],
        "summary": "List of offenders matching specified criteria. (POST version)",
        "description": "List of offenders matching specified criteria. Requires GLOBAL_SEARCH role.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getPrisoners",
        "parameters": [
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of prisoner records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of prisoner records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>offenderNo, pncNumber, croNumber, firstName, lastName, dob</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonerDetailSearchCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders": {
      "post": {
        "tags": [
          "offenders"
        ],
        "summary": "Creates a prisoner and optional receives them into a prison by creating a new booking. BOOKING_CREATE role",
        "operationId": "createPrisoner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to create a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/booking": {
      "post": {
        "tags": [
          "offenders"
        ],
        "summary": "Receives a prisoner on a new booking. BOOKING_CREATE role",
        "operationId": "newBooking",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of prisoner",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForNewBooking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to receive prisoner on new bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/adjudication-hearings": {
      "post": {
        "tags": [
          "offenders"
        ],
        "summary": "Gets a list of offender adjudication hearings",
        "description": "<p>This endpoint returns a list of offender adjudication hearings for 1 or more offenders for a given date range and optional time slot.</p>\n<p>If the date range goes beyond 31 days then an exception will be thrown.</p>\n<p>At least one offender number must be supplied if not then an exception will be thrown.</p>\n<p>If the time slot is provided then the results will be further restricted to the hearings that fall in that time slot.</p>\n",
        "operationId": "getOffenderAdjudicationHearings",
        "parameters": [
          {
            "name": "agencyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The offender numbers. Offender numbers have the format:<b>G0364GX</b>",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderAdjudicationHearing"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences": {
      "get": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "List of offenders (with associated sentence detail)",
        "description": "<h3>Algorithm</h3>\n<ul>\n  <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>\n  <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>\n  <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>\n</ul>\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderSentences",
        "parameters": [
          {
            "name": "agencyId",
            "in": "query",
            "description": "agency/prison to restrict results, if none provided current active caseload will be used, unless offenderNo list is specified",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offenderNo",
            "in": "query",
            "description": "a list of offender numbers to search.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderSentenceDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Retrieves list of offenders (with associated sentence detail) - POST version to allow large offender lists.",
        "description": "Retrieves list of offenders (with associated sentence detail) - POST version to allow large offender lists.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "postOffenderSentences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The list of offenders is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderSentenceDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/home-detention-curfews/latest": {
      "post": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Retrieve the latest Home Detention Curfew status for a list of offender booking identifiers",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBatchLatestHomeDetentionCurfew",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "A list of booking ids",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of HDC status information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HomeDetentionCurfew"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/bookings": {
      "post": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Retrieves list of offenders (with associated sentence detail) - POST version using booking id lists.",
        "description": "Retrieves list of offenders (with associated sentence detail) - POST version using booking id lists.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "postOffenderSentencesBookings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required booking ids (mandatory)",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The list of offenders is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderSentenceDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-dates/{bookingId}": {
      "get": {
        "tags": [
          "offender-dates"
        ],
        "summary": "Get the key dates for an offender.",
        "description": "Requires RELEASE_DATES_CALCULATOR",
        "operationId": "getOffenderKeyDates",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to update an offender's dates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Offender key dates found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceCalcDates"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "offender-dates"
        ],
        "summary": "Update the key dates for an offender.",
        "description": "Requires RELEASE_DATES_CALCULATOR",
        "operationId": "updateOffenderKeyDates",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToUpdateOffenderDates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to update an offender's dates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Offender key dates calculation created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceCalcDates"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/{assessmentCode}": {
      "get": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Offender assessment detail for multiple offenders.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderAssessmentsAssessmentCode",
        "parameters": [
          {
            "name": "assessmentCode",
            "in": "path",
            "description": "Assessment Type Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offenderNo",
            "in": "query",
            "description": "The required offender numbers",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Returns only active assessments if true, otherwise inactive and pending assessments are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "mostRecentOnly",
            "in": "query",
            "description": "Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assessment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Retrieves Offender assessment details for multiple offenders - POST version to allow large offender lists.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "postOffenderAssessmentsAssessmentCode",
        "parameters": [
          {
            "name": "assessmentCode",
            "in": "path",
            "description": "Assessment Type Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Returns only active assessments if true, otherwise inactive and pending assessments are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "mostRecentOnly",
            "in": "query",
            "description": "Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The assessment list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assessment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/csra/list": {
      "post": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Retrieves Offender CSRAs for multiple offenders - POST version to allow large offender lists.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "postOffenderAssessmentsCsraList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The CSRA assessment list is returned, 1 per offender.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assessment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/category": {
      "post": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Returns Categorisation details for supplied Offenders - POST version to allow large offender lists.",
        "description": "Requires VIEW_PRISONER_DATA role<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderCategorisationsSystem",
        "parameters": [
          {
            "name": "latestOnly",
            "in": "query",
            "description": "Only get the latest category for each booking",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The required booking Ids (mandatory)",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The list of offenders with categorisation details is returned if categorisation record exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderCategorise"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offences/unlink-from-schedule": {
      "post": {
        "tags": [
          "offences"
        ],
        "summary": "Unlink offence from schedule",
        "description": "Requires UPDATE_OFFENCE_SCHEDULES role",
        "operationId": "unlinkOffencesFromSchedules",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OffenceToScheduleMappingDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request."
          },
          "200": {
            "description": "Offences unlinked from schedules successfully"
          }
        }
      }
    },
    "/api/offences/statute": {
      "post": {
        "tags": [
          "offences"
        ],
        "summary": "Create statutes if they dont already exist",
        "description": "Requires OFFENCE_MAINTAINER role",
        "operationId": "createStatute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatuteDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Statutes created successfully"
          }
        }
      }
    },
    "/api/offences/link-to-schedule": {
      "post": {
        "tags": [
          "offences"
        ],
        "summary": "Link offence to schedule",
        "description": "Requires UPDATE_OFFENCE_SCHEDULES role",
        "operationId": "linkOffencesToSchedules",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OffenceToScheduleMappingDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request."
          },
          "201": {
            "description": "Offences linked to schedules successfully"
          }
        }
      }
    },
    "/api/offences/ho-code": {
      "post": {
        "tags": [
          "offences"
        ],
        "summary": "Create Home Office Notifiable Offence Code records if they dont already exist",
        "description": "Requires OFFENCE_MAINTAINER role",
        "operationId": "createHomeOfficeCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HOCodeDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Home Office Notifiable Offence Codes created successfully"
          }
        }
      }
    },
    "/api/movements": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Returns a list of recently released or moved offender nos and the associated timestamp.",
        "description": "Returns a list of recently released or moved offender nos and the associated timestamp.",
        "operationId": "getRecentMovementsByDate",
        "parameters": [
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "A timestamp that indicates the earliest record required",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "movementDate",
            "in": "query",
            "description": "The date for which movements are searched, defaults to today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "movementTypes",
            "in": "query",
            "description": "movement type codes to filter by, defaults to TRN, REL, ADM",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "movements"
        ],
        "summary": "Create a new external movement for inactive bookings only",
        "description": "requires the INACTIVE_BOOKINGS role",
        "operationId": "createExternalMovement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalMovement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderMovement"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderMovement"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/offenders": {
      "post": {
        "tags": [
          "movements"
        ],
        "operationId": "getMovementsByOffenders",
        "parameters": [
          {
            "name": "movementTypes",
            "in": "query",
            "description": "movement type codes to filter by",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "Returns only latest movement for the offenders specified",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allBookings",
            "in": "query",
            "description": "Returns all movements for this offender list from all bookings if true",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movement"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/key-worker/{agencyId}/current-allocations": {
      "post": {
        "tags": [
          "key-worker"
        ],
        "summary": "Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists.",
        "description": "Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "postKeyWorkerAgencyIdCurrentAllocations",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The agency (prison) identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required staff Ids (mandatory)",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The allocations list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyWorkerAllocationDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/key-worker/offenders/allocationHistory": {
      "post": {
        "tags": [
          "key-worker"
        ],
        "summary": "Retrieves Specified prisoners allocation history - POST version to allow larger allocation lists.",
        "description": "Retrieves Specified prisoners allocation history - POST version to allow larger allocation lists.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "postKeyWorkerOffendersAllocationHistory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender nos (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The allocations history list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderKeyWorker"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/images/offenders/{offenderNo}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Image details related to offender.",
        "description": "Requires role VIEW_PRISONER_DATA.",
        "operationId": "getImagesByOffender",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "images"
        ],
        "summary": "DEV USE ONLY *** Upload a new image for a prisoner.",
        "description": "Requires ROLE_IMAGE_UPLOAD, write scope and a user in the token.",
        "operationId": "putImageMultiPart",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offender number relating to this image.",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The image as a file to upload",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "The offender number could not be found or has no bookings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "IMAGE_UPLOAD role required to access endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/finance/prison/{prisonId}/offenders/{offenderNo}/transfer-to-savings": {
      "post": {
        "tags": [
          "unilink",
          "finance"
        ],
        "summary": "Post a financial transaction to NOMIS.",
        "description": "Notes:<br/>\n  <ul>\n    <li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash</li>\n    <li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li>\n  </ul>\n<p>Requires role NOMIS_API_V1 or UNILINK</p>",
        "operationId": "transferToSavings",
        "parameters": [
          {
            "name": "X-Client-Name",
            "in": "header",
            "description": "If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prisonId",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Duplicate post - The unique_client_ref has been used before",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Transaction Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferTransaction"
                }
              }
            }
          },
          "400": {
            "description": "One of: <ul><li>Insufficient Funds - The prisoner has insufficient funds in the required account to cover the cost of the debit transaction</li><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Finance Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/education/prisoners": {
      "post": {
        "tags": [
          "education"
        ],
        "summary": "A list of offender educations.",
        "description": "A list of offender educations given a list of offender identifiers",
        "operationId": "getPrisonerEducationsInBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "List of offender NOMS numbers. NOMS numbers have the format:<b>G0364GX</b>",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Education"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/case-notes/usage": {
      "get": {
        "tags": [
          "case-notes"
        ],
        "summary": "Count of case notes",
        "description": "Count of case notes. Requires role VIEW_CASE_NOTES<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCaseNoteUsageSummary",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "query",
            "description": "a list of offender numbers to search.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "staffId",
            "in": "query",
            "description": "Staff Id to filter by",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "agencyId",
            "in": "query",
            "description": "Agency Id to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numMonths",
            "in": "query",
            "description": "Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Case note type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subType",
            "in": "query",
            "description": "Case note sub-type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseNoteUsage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "case-notes"
        ],
        "summary": "Retrieves list of case notes grouped by type and offender",
        "description": "Retrieves list of case notes grouped by type and offender. Requires role VIEW_CASE_NOTES<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCaseNoteUsageSummaryByPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseNoteUsageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The case note usage list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseNoteUsage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/case-notes/usage-by-types": {
      "post": {
        "tags": [
          "case-notes"
        ],
        "summary": "Retrieves list of case notes grouped by types, bookings and from dates",
        "description": "Retrieves list of case notes grouped by type/sub and offender. Requires role VIEW_CASE_NOTES<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCaseNoteUsageSummaryByDates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseNoteTypeSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The case note usage list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseNoteTypeCount"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/case-notes/staff-usage": {
      "post": {
        "tags": [
          "case-notes"
        ],
        "summary": "Retrieves list of case notes grouped by type/sub-type and staff",
        "description": "Retrieves list of case notes grouped by type/sub-type and staff. Requires role VIEW_CASE_NOTES<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCaseNoteStaffUsageSummaryByPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseNoteStaffUsageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The case note usage list is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseNoteStaffUsage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/prison-to-prison": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Schedules a future prison to prison move for an offender.",
        "description": "Schedules a future prison to prison move for an offender. Requires role PRISON_MOVE_MAINTAINER and scope write.",
        "operationId": "prisonToPrison",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking to associate the prison to prison move with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulePrisonToPrisonMove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "The scheduled prison move.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledPrisonToPrisonMove"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/prison-to-court-hearings": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Schedules a prison to court hearing for an offender.",
        "description": "Schedules a prison to court hearing for an offender. Requires role COURT_HEARING_MAINTAINER and scope write",
        "operationId": "prisonToCourt",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking to associate the court hearing with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonToCourtHearing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Court hearing created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtHearing"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/personal-care-needs": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Personal Care Needs",
        "description": "Personal Care Need. Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.",
        "operationId": "getPersonalCareNeeds_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "a list of types and optionally subtypes (joined with +) to search.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "DISAB+RM"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalCareNeeds"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Personal Care Needs",
        "description": "Personal Care Need",
        "operationId": "addPersonalCareNeed",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonalCareNeed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "If successful the Personal Care Need is returned."
          }
        }
      }
    },
    "/api/bookings/{bookingId}/court-cases/{courtCaseId}/prison-to-court-hearings": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Schedules a prison to court hearing for an offender and given court case.",
        "description": "Schedules a prison to court hearing for an offender and given court case. Requires role COURT_HEARING_MAINTAINER and scope write",
        "operationId": "prisonToCourt_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking to associate the court hearing with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "courtCaseId",
            "in": "path",
            "description": "The court case to associate the hearing with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonToCourtHearing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Court hearing created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtHearing"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/appointments": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Create appointment for offender.",
        "description": "Create appointment for offender.",
        "operationId": "postBookingsBookingIdAppointments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAppointment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The appointment has been recorded. The updated object is returned including the status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/alert": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Create an alert",
        "operationId": "postAlert",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "bookingId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Alert id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCreated"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenders": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender detail.",
        "description": "Offender detail for offenders<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBasicInmateDetailsForOffenders",
        "parameters": [
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Returns only Offender details with an active booking if true, otherwise Offenders without an active booking are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The offenderNo of offender",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InmateBasicDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/{agencyId}/alerts": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Get alerts for a list of offenders at a prison",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAlertsByOffenderNosAtAgency",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison where the offenders are booked",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/personal-care-needs": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Personal Care Needs  - POST version to allow for large numbers of offenders",
        "description": "Personal Care Needs",
        "operationId": "getPersonalCareNeeds",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "a list of types and optionally subtypes (joined with +) to search.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "DISAB+RM"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalCareNeeds"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/personal-care-needs/count": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Personal Care Needs Counter - POST version to allow to count heath problem by type for large numbers of offenders",
        "description": "Personal Care Needs",
        "operationId": "countPersonalCareNeeds",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "problem type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "DISAB"
          },
          {
            "name": "fromStartDate",
            "in": "query",
            "description": "Personal needs care must be on or after this date (in YYYY-MM-DD format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toStartDate",
            "in": "query",
            "description": "Personal needs care must be on or before this date (in YYYY-MM-DD format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalCareCounterDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/alerts": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Get alerts for a list of offenders. Requires VIEW_PRISONER_DATA role",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAlertsByOffenderNos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required offender numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offence-history": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Offence histories.",
        "description": "Offence histories for a set of booking ids.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenceHistoryForBookings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The booking ids",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenceHistoryDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/mainOffence": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Get Offender main offence detail.",
        "description": "Post version to allow specifying a large number of bookingIds.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getMainOffence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The bookingIds to identify the offenders",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenceDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/court-event-outcomes": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Get court event outcome reason codes for active court cases for a booking",
        "operationId": "getCourtEventOutcomes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The booking ids",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourtEventOutcome"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments": {
      "post": {
        "tags": [
          "appointments"
        ],
        "summary": "Create multiple appointments",
        "description": "Create multiple appointments",
        "operationId": "createAppointments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentsToCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The appointments have been created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatedAppointmentDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/delete": {
      "post": {
        "tags": [
          "appointments"
        ],
        "summary": "Delete multiple appointments.",
        "description": "Delete multiple appointments.",
        "operationId": "deleteAppointments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The unique identifier for the appointment",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "The client is not authorised for this operation"
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/agencies": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of active agencies.",
        "description": "List of active agencies.",
        "operationId": "getAgencies",
        "parameters": [
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of agency records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of agency records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agency"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agencies"
        ],
        "summary": "Create an agency",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "createAgency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToCreateAgency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "The Agency location created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agency"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to create an agency location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/addresses": {
      "post": {
        "tags": [
          "agencies"
        ],
        "summary": "Create an address",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "createAgencyAddress",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToUpdateAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to create a agency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/addresses/{addressId}/phones": {
      "post": {
        "tags": [
          "agencies"
        ],
        "summary": "Create an contact for an address",
        "description": "Requires MAINTAIN_REF_DATA",
        "operationId": "createAgencyAddressPhoneContact",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The ID of the agency",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The ID of the address",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestToUpdatePhone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Telephone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to create a agency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Telephone"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/slots": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Fetch visit slots with capacity",
        "description": "returns list slots with capacity details<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getVisitSlotsWithCapacity",
        "parameters": [
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-04-01"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-05-01"
          }
        ],
        "responses": {
          "404": {
            "description": "Prison Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitSlots"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid start and end date range",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/transactions/{client_unique_ref}": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Retrieve a single financial transaction using client unique ref.",
        "description": "All transaction amounts are represented as pence values.<br/>\nRequires NOMIS_API_V1 or UNILINK role.\n",
        "operationId": "getTransactionByClientUniqueRef",
        "parameters": [
          {
            "name": "X-Client-Name",
            "in": "header",
            "description": "If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "WLI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1404AE"
          },
          {
            "name": "client_unique_ref",
            "in": "path",
            "description": "Client unique reference",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 0,
              "pattern": "[a-zA-Z0-9-_]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Not a digital prison.  Prison not found. Offender has no account at this prison.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison, offender or accountType not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/holds": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get holds.",
        "description": "Gets every hold on an offender’s account or just the hold identified by the client_unique_ref<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getHolds",
        "parameters": [
          {
            "name": "X-Client-Name",
            "in": "header",
            "description": "If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          },
          {
            "name": "client_unique_ref",
            "in": "query",
            "description": "Client unique reference",
            "required": false,
            "schema": {
              "maxLength": 64,
              "minLength": 0,
              "pattern": "[a-zA-Z0-9-_]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hold"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Offender Not Found - No offender matching the specified offender_id has been found on nomis.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Offender not in specified prison",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Retrieve an offender's financial account balances.",
        "description": "Returns balances for the offender’s three sub accounts (spends, savings and cash) at the specified prison.<br/>\nAll balance values are represented as pence values.<br/>\nRequires NOMIS_API_V1 or UNILINK role.\n",
        "operationId": "getAccountBalance",
        "parameters": [
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "WLI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1404AE"
          }
        ],
        "responses": {
          "400": {
            "description": "Not a digital prison.  Prison not found. Offender has no account at this prison.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalance"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison or offender was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts/{account_code}/transactions": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Retrieve an offender's financial transaction history for cash, spends or savings.",
        "description": "Transactions are returned in NOMIS order (Descending date followed by id).<br/>\nAll transaction amounts are represented as pence values.<br/>\nRequires NOMIS_API_V1 or UNILINK role.\n",
        "operationId": "getAccountTransactions",
        "parameters": [
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "WLI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1404AE"
          },
          {
            "name": "account_code",
            "in": "path",
            "description": "Account code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "spends"
          },
          {
            "name": "from_date",
            "in": "query",
            "description": "Start date for transactions (defaults to today if not supplied)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-04-01"
          },
          {
            "name": "to_date",
            "in": "query",
            "description": "To date for transactions (defaults to today if not supplied)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-05-01"
          }
        ],
        "responses": {
          "400": {
            "description": "Not a digital prison.  Prison not found. Offender has no account at this prison.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTransactions"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison, offender or accountType not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts/": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Deprecated - use the version without the trailing slash. Retrieve an offender's financial account balances.",
        "description": "Returns balances for the offender’s three sub accounts (spends, savings and cash) at the specified prison.<br/>\nAll balance values are represented as pence values.<br/>\nRequires NOMIS_API_V1 or UNILINK role.\n",
        "operationId": "getAccountBalanceTrailingSlash",
        "parameters": [
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "WLI"
          },
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1404AE"
          }
        ],
        "responses": {
          "400": {
            "description": "Not a digital prison.  Prison not found. Offender has no account at this prison.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalance"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison or offender was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/prison/{prison_id}/live_roll": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Fetching live roll.",
        "description": "Requires NOMIS_API_V1 or UNILINK role.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getLiveRoll",
        "parameters": [
          {
            "name": "prison_id",
            "in": "path",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveRoll"
                }
              }
            }
          },
          "400": {
            "description": "Not a digital prison.  Prison not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{offender_id}/visits/unavailability": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Fetch unavailability reason for dates",
        "description": "returns list of reason if unavailable date<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getVisitUnavailability",
        "parameters": [
          {
            "name": "offender_id",
            "in": "path",
            "description": "Offender Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1234567
          },
          {
            "name": "dates",
            "in": "query",
            "description": "dates",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2019-05-01,2019-05-02"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/UnavailabilityReason"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Dates requested must be in future",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{offender_id}/visits/contact_list": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Fetch contacts list for offender",
        "description": "returns list of contacts<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getVisitContactList",
        "parameters": [
          {
            "name": "offender_id",
            "in": "path",
            "description": "Offender Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid start and end date range",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{offender_id}/visits/available_dates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Fetch available_dates for offender",
        "description": "returns list of dates<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getVisitAvailableDates",
        "parameters": [
          {
            "name": "offender_id",
            "in": "path",
            "description": "Offender Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1234567
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-04-01"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "To date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-05-01"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableDates"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid start and end date range",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{noms_id}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns general offender information.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffender",
        "parameters": [
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms ID",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offender"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{noms_id}/pss_detail": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Get the PSS detail by offender",
        "description": "Returns the PSS detail information for the specified offender including personal data, warnings, sentence details and location information.<br/>\n<ul>\n  <li>The 'type' field is always OFFENDER_DETAILS_REQUEST</li>\n  <li>The field 'offender_details_request' contains a JSON block of data containing the offender data.</li>\n</ul>\nThe format of 'offender_details_request' is not specified here.<br/>\nRequires NOMIS_API_V1 or UNILINK role.\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderPssDetail",
        "parameters": [
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1404AE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Noms ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{noms_id}/location": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Current Location of the offender",
        "description": "The levels shows the type of each level of the location address as defined on the Agency Details tab in Maintain Agency Locations screen (OUMAGLOC).<br/><br/>Since the offender's location can change often and is fairly sensitive (and therefore should not automatically be exposed to all services), this information is not included in the general offender information call.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getLatestBookingLocation",
        "parameters": [
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms ID",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{noms_id}/image": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get Current Photograph of the offender",
        "description": "Returns a 480wx600h JPEG photograph of the offender. The data is base64 encoded within the image key.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderImage",
        "parameters": [
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms ID",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{noms_id}/charges": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Legal cases for each booking and charges within each legal case.",
        "description": "Returns all the bookings, the legal cases for each booking and charges within each legal case.<br/>The ordering is as follows:<ul><li><strong>bookings</strong>: Current or latest booking first, others in descending order of booking date</li><li><strong>legal_cases</strong>: Active cases followed by inactive cases, further ordered by begin_date, latest first</li><li><strong>charges</strong>: Most serious active charge first, then remaining active charges, followed by inactive charges</li></ul><p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookings",
        "parameters": [
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms ID",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1417AE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bookings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/{noms_id}/alerts": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Fetch alerts by offender",
        "description": "Returns all active alerts for the specified offender or those that meet the optional criteria. Active alerts are listed first, followed by inactive alerts, both sorted by ascending order of alert date.<br/>\n<ul>\n  <li>if alert_type is specified then only alerts of that type are returned</li>\n  <li>if modified_since is specified then only those alerts created or modified on or after the specified date time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123</li>\n  <li>If include_inactive=true is specified then inactive alerts are also returned.</li>\n</ul>\nRequires NOMIS_API_V1 or UNILINK role.\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAlerts",
        "parameters": [
          {
            "name": "noms_id",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1583AE"
          },
          {
            "name": "alert_type",
            "in": "query",
            "description": "Alert Type, if alert_type is specified then only alerts of that type are returned",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "H"
          },
          {
            "name": "modified_since",
            "in": "query",
            "description": "Modified Since - if modified_since is specified then only those alerts created or modified on or after the specified date time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2017-10-07T12:23:45.678"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include Inactive alerts, If include_inactive=true is specified then inactive alerts are also returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alerts"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Noms ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/offenders/events": {
      "get": {
        "tags": [
          "unilink",
          "v1"
        ],
        "summary": "Fetch events",
        "description": "Returns all events that required to update the prisoner self service application. Currently these are:\n<ul>\n  <li>ALERT</li>\n  <li>DISCHARGE</li>\n  <li>IEP_CHANGED</li>\n  <li>INTERNAL_LOCATION_CHANGED</li>\n  <li>NOMS_ID_CHANGED</li>\n  <li>PERSONAL_DETAILS_CHANGED</li>\n  <li>PERSONAL_OFFICER_CHANGED</li>\n  <li>RECEPTION</li>\n  <li>SENTENCE_INFORMATION_CHANGED</li>\n  <li>BALANCE_UPDATE</li>\n</ul>\nRequires NOMIS_API_V1 or UNILINK role.\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderEvents",
        "parameters": [
          {
            "name": "prison_id",
            "in": "query",
            "description": "Prison ID",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 0,
              "type": "string"
            },
            "example": "BMI"
          },
          {
            "name": "offender_id",
            "in": "query",
            "description": "Offender Noms Id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "A1417AE"
          },
          {
            "name": "event_type",
            "in": "query",
            "description": "Event Type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ALERT"
          },
          {
            "name": "from_datetime",
            "in": "query",
            "description": "From Date Time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2017-10-07T12:23:45.678"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of events to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Noms ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/lookup/active_offender": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieve active offender",
        "description": "offender id will be returned if offender is found<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getActiveOffender",
        "parameters": [
          {
            "name": "noms_id",
            "in": "query",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z][0-9]{4}[a-zA-Z]{2}",
              "type": "string"
            },
            "example": "A1404AE"
          },
          {
            "name": "date_of_birth",
            "in": "query",
            "description": "date of birth",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-05-01"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveOffender"
                }
              }
            }
          },
          "404": {
            "description": "Parameter exception (invalid date, time, format, type)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Noms ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{username}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User detail.",
        "description": "User detail.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getUserDetails",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The username of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Current user detail.",
        "description": "Current user detail.",
        "operationId": "getMyUserInformation",
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me/roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List of roles for current user.",
        "description": "List of roles for current user.",
        "operationId": "getMyRoles",
        "parameters": [
          {
            "name": "allRoles",
            "in": "query",
            "description": "If set to true then all roles are returned rather than just API roles",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me/locations": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List of locations accessible to current user.",
        "description": "List of locations accessible to current user.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getMyLocations",
        "parameters": [
          {
            "name": "include-non-residential-locations",
            "in": "query",
            "description": "Indicates non residential locations should be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me/caseLoads": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List of caseloads accessible to current user.",
        "description": "List of caseloads accessible to current user.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getMyCaseLoads",
        "parameters": [
          {
            "name": "allCaseloads",
            "in": "query",
            "description": "If set to true then all caseloads are returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseLoad"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/staff/{staffId}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Staff detail.",
        "description": "Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.",
        "operationId": "getStaffDetail",
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "The staff id of the staff member.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/staff/{staffId}/{agencyId}/roles": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "List of job roles for specified staff and agency Id",
        "description": "Security note: the agency must be in the current user's caseload.",
        "operationId": "getAllRolesForAgency",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "Agency Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "The staff id of the staff member.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/staff/{staffId}/{agencyId}/roles/{roleType}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Check if staff member has a role",
        "description": "Check if staff member has a role, either KW or POM. Security note: the agency must be in the current user's caseload.",
        "operationId": "hasStaffRole",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "Agency Id.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MDI"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "The staff id of the staff member.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1111111
          },
          {
            "name": "roleType",
            "in": "path",
            "description": "Type of role",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "KW",
                "POM"
              ]
            },
            "example": "KW"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/staff/{staffId}/emails": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Returns a list of email addresses associated with this staff user",
        "description": "Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.",
        "operationId": "getStaffEmailAddresses",
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "The staff id of the staff user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No email addresses were found for this staff member.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The staffId supplied was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/staff/{staffId}/caseloads": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Returns a list of caseloads associated with this staff user",
        "description": "Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.",
        "operationId": "getStaffCaseloads",
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "The staff id of the staff user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123123
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseLoad"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "No caseloads were found for this staff member.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseLoad"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The staffId supplied was not valid or not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/staff/roles/{agencyId}/role/{role}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Get staff members within agency who are currently assigned the specified role.",
        "description": "Get staff members within agency who are currently assigned the specified role. Security note: the agency must be in the current user's caseload.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getStaffByAgencyRole",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The agency (prison) id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "path",
            "description": "The staff role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameFilter",
            "in": "query",
            "description": "Filter results by first name and/or last name of staff member. Supplied filter term is matched to start of staff member's first and last name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "staffId",
            "in": "query",
            "description": "The staff id of a staff member.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Filters results by activeOnly staff members.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of role records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of role records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>firstName, lastName</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffLocationRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service-prisons/{serviceCode}": {
      "get": {
        "tags": [
          "service-prisons"
        ],
        "summary": "Retrieve a list of prisons switched on for the service code",
        "operationId": "getServicePrisons",
        "parameters": [
          {
            "name": "serviceCode",
            "in": "path",
            "description": "The code of the service from the EXTERNAL_SERVICES table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The service code does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "A valid auth token was not presented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The auth token does not have the necessary role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{prisonerNumber}/scheduled-transfers": {
      "get": {
        "tags": [
          "schedules"
        ],
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getScheduledTransfersForPrisoner",
        "parameters": [
          {
            "name": "prisonerNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerPrisonSchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/suspended-activities-by-date-range": {
      "get": {
        "tags": [
          "schedules"
        ],
        "summary": "Get all Prisoner activities for given date.",
        "description": "Get all Prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getSuspendedActivitiesAtAllLocationsByDateRange",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "To Date of whereabouts list, default from date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{agencyId}/locations/{locationId}/usage/{usage}": {
      "get": {
        "tags": [
          "schedules"
        ],
        "summary": "Get all Prisoner events for given date at location.",
        "description": "Get all Prisoner events for given date at location.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getLocationEvents",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "The location id where event is held.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "usage",
            "in": "path",
            "description": "The locationUsage code from the location object - one of the INTERNAL_LOCATION_USAGE reference codes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/locations/{locationId}/activities": {
      "get": {
        "tags": [
          "schedules"
        ],
        "summary": "Get all Prisoner activities for given date at location.",
        "description": "Get all Prisoner activities for given date at location.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getActivitiesAtLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The location id where activity is held.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of whereabouts list, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "includeSuspended",
            "in": "query",
            "description": "Include suspended scheduled activity - defaults to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/restore-info": {
      "get": {
        "tags": [
          "database-restore"
        ],
        "summary": "The last restore date or not found is returned if no restore data available",
        "operationId": "getLastRestoreDate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No restore information found - this endpoint is only guaranteed to return information when run on pre-prod.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/scheduleReasons": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "Get possible reason codes for created event.",
        "description": "Get possible reason codes for created event.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getScheduleReasons",
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "description": "Specify event type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/domains": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "List of all reference domains",
        "description": "A reference domain can be used to retrieve all codes related to that domain. Ordered by domain ascending<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAllReferenceDomains",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceDomain"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/domains/{domain}": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "List of reference codes for reference domain paged.",
        "description": "List of reference codes for reference domain paged. Please note this API has the incorrect name so the non-paged /domains/{domain}/codes version is preferred.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getReferenceCodesByDomain",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain identifier/name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubCodes",
            "in": "query",
            "description": "Specify whether or not to return reference codes with their associated sub-codes.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of domain records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of domain records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>code, description</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/domains/{domain}/reverse-lookup": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "Reference code matching description ",
        "description": "Wild card can be specified<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getReferenceCodeByDomainAndDescription",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain identifier/name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "decription of a reference code to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wildcard",
            "in": "query",
            "description": "Specify whether or not to wild card the results",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/domains/{domain}/codes": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "List of reference codes for reference domain.",
        "description": "List of reference codes for reference domain ordered by code ascending. The list is an un-paged flat list<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getReferenceCodesByDomain_1",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain identifier/name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reference-domains/alertTypes": {
      "get": {
        "tags": [
          "reference-domains"
        ],
        "summary": "List of alert types (with alert codes).",
        "description": "List of alert types (with alert codes).<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAlertTypes",
        "parameters": [
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of alertType records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of alertType records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>code, description</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prisoners/{offenderNo}": {
      "get": {
        "tags": [
          "prisoners"
        ],
        "summary": "List of offenders globally matching the offenderNo.",
        "description": "List of offenders globally matching the offenderNo, Requires offender agency to be in user caseload or VIEW_PRISONER_DATA role. Returns an empty array if no results are found or if does not have correct permissions",
        "operationId": "getPrisonersOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo to search for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prisoners/{offenderNo}/full-status": {
      "get": {
        "tags": [
          "prisoners"
        ],
        "summary": "Status and core offender information",
        "operationId": "getPrisonerInformationById",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No (NOMS ID)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerInformation"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prisoners/prisoner-numbers": {
      "get": {
        "tags": [
          "prisoners"
        ],
        "summary": "\n    Return a list of all unique prisoner numbers (also called NOMS ID or offenderNo). \n    Results are ordered by max(ROOT_OFFENDER_ID), therefore ensuring that new offenders are added to the end of the \n    results.\n    This is an internal endpoint used by Prisoner Search to ensure that NOMIS and OpenSearch are in sync.\n    Other services should use Prisoner Search instead to get the list of prisoners.\n    Requires PRISONER_INDEX or GLOBAL_SEARCH role.\n    ",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getPrisonerNumbers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the paged results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested limit to number of prisoner numbers returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageString"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prison/{establishmentId}/booking/latest/paged/calculable-sentence-envelope": {
      "get": {
        "tags": [
          "prison"
        ],
        "summary": "Details of the active sentence envelope, a combination of the person information, the active booking and calculable sentences at a particular establishment (paged response)",
        "operationId": "getCalculableSentenceEnvelopeByEstablishment",
        "parameters": [
          {
            "name": "establishmentId",
            "in": "path",
            "description": "The identifier of the establishment(prison) to get the active bookings for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve of the paged results (starts at zero)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested limit of the page size (i.e. the number of bookings in response)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageCalculableSentenceEnvelope"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/persons/{personId}/phones": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "The phone numbers for person",
        "description": "Requires role ROLE_VIEW_CONTACTS",
        "operationId": "getPersonPhones",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The persons NOMIS identifier (personId).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Telephone"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/persons/{personId}/identifiers": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "The most recent value of each type of person identifier",
        "description": "Requires role ROLE_VIEW_CONTACTS",
        "operationId": "getPersonIdentifiers",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The persons NOMIS identifier (personId).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonIdentifier"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/persons/{personId}/emails": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "The emails for person",
        "description": "Requires role ROLE_VIEW_CONTACTS",
        "operationId": "getPersonEmails",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The persons NOMIS identifier (personId).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Email"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/persons/{personId}/addresses": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "The addresses for person",
        "description": "Requires role ROLE_VIEW_CONTACTS",
        "operationId": "getPersonAddresses",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The persons NOMIS identifier (personId).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Full details about the current state of an offender",
        "operationId": "getOffender_1",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of offender",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "version",
            "in": "header",
            "description": "Version of Offender details, default is 1.0, Beta is version 1.1_beta and is WIP (do not use in production)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/transaction-history": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Retrieve an offender's financial transaction history for cash, spends or savings.",
        "description": "Transactions are returned in order of entryDate descending and sequence ascending).<br/>All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getTransactionsHistory",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "account_code",
            "in": "query",
            "description": "Account code",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "spends"
          },
          {
            "name": "from_date",
            "in": "query",
            "description": "Start date for transactions, format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-04-01"
          },
          {
            "name": "to_date",
            "in": "query",
            "description": "To date for transactions, format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2019-05-01"
          },
          {
            "name": "transaction_type",
            "in": "query",
            "description": "Transaction type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "A_EARN"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderTransactionHistoryDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison, offender or accountType not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Not a digital offender. Offender has no account at this prison.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/sentences": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Offender Sentence Details",
        "description": "Retrieve an single offender sentence details",
        "operationId": "getOffenderSentenceDetail",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Noms ID or Prisoner number (also called offenderNo)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderSentenceDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/scheduled-events": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "All future (scheduled) events for offender",
        "description": "All future events for offender that are in a scheduled and not cancelled state.",
        "operationId": "getScheduledEvents",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Returned events must be scheduled on or after this date (in YYYY-MM-DD format).  The from date must be on or after today.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Returned events must be scheduled on or before this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/prison-timeline": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Summary of the different periods this prisoner has been in prison.",
        "description": "This is a summary of the different periods this prisoner has been in prison grouped by booking.\n\nIt includes the dates of each period, the prison and the reason for the movement. Each booking is divided into periods of time spent in prison separated by periods when the were out either via a release or a temporary absence (periods at court are not included).\n\nThe periods are ordered by date ascending, therefore the final period will be their last time in prison. For each period the prison admitted into and optionally released from will be listed. These can be different if there has been transfers in between the dates.\n\nTransfers are also listed separately.\n\n\n**Example response:**\n#### Booking 47828A\nHas 2 periods of temporary absence. In the second absence they return to a different prison. They are eventually released.\n\n#### Booking 47829A\nThe person is still is prison but has been transferred to a 2nd prison.\n\nThere are a number of transfers during this booking.\n```\n{\n  \"prisonerNumber\": \"A7748DZ\",\n  \"prisonPeriod\": [\n    {\n      \"bookNumber\": \"47828A\",\n      \"bookingId\": 1211013,\n      \"entryDate\": \"2023-12-08T15:50:37\",\n      \"releaseDate\": \"2023-12-08T16:21:24\",\n      \"movementDates\": [\n        {\n          \"reasonInToPrison\": \"Imprisonment Without Option\",\n          \"dateInToPrison\": \"2023-12-08T15:50:37\",\n          \"inwardType\": \"ADM\",\n          \"reasonOutOfPrison\": \"Wedding/Civil Ceremony\",\n          \"dateOutOfPrison\": \"2023-12-08T15:53:37\",\n          \"outwardType\": \"TAP\",\n          \"admittedIntoPrisonId\": \"BMI\",\n          \"releaseFromPrisonId\": \"BSI\"\n        },\n        {\n          \"reasonInToPrison\": \"Wedding/Civil Ceremony\",\n          \"dateInToPrison\": \"2023-12-08T15:54:12\",\n          \"inwardType\": \"TAP\",\n          \"reasonOutOfPrison\": \"Conditional Release (CJA91) -SH Term>1YR\",\n          \"dateOutOfPrison\": \"2023-12-08T16:20:19\",\n          \"outwardType\": \"REL\",\n          \"admittedIntoPrisonId\": \"BSI\",\n          \"releaseFromPrisonId\": \"AYI\"\n        },\n        {\n          \"reasonInToPrison\": \"Recall From Intermittent Custody\",\n          \"dateInToPrison\": \"2023-12-08T16:20:45\",\n          \"inwardType\": \"ADM\",\n          \"reasonOutOfPrison\": \"Conditional Release (CJA91) -SH Term>1YR\",\n          \"dateOutOfPrison\": \"2023-12-08T16:21:24\",\n          \"outwardType\": \"REL\",\n          \"admittedIntoPrisonId\": \"AYI\",\n          \"releaseFromPrisonId\": \"AYI\"\n        }\n      ],\n      \"transfers\": [\n        {\n          \"dateOutOfPrison\": \"2023-12-08T15:51:09\",\n          \"dateInToPrison\": \"2023-12-08T15:52:32\",\n          \"transferReason\": \"Compassionate Transfer\",\n          \"fromPrisonId\": \"BMI\",\n          \"toPrisonId\": \"BSI\"\n        },\n        {\n          \"dateOutOfPrison\": \"2023-12-08T15:54:56\",\n          \"dateInToPrison\": \"2023-12-08T15:55:54\",\n          \"transferReason\": \"Transfer Via Court\",\n          \"fromPrisonId\": \"BSI\",\n          \"toPrisonId\": \"BRI\"\n        },\n        {\n          \"dateOutOfPrison\": \"2023-12-08T15:56:05\",\n          \"dateInToPrison\": \"2023-12-08T15:57:25\",\n          \"transferReason\": \"Appeals\",\n          \"fromPrisonId\": \"BRI\",\n          \"toPrisonId\": \"DAI\"\n        },\n        {\n          \"dateOutOfPrison\": \"2023-12-08T16:18:45\",\n          \"dateInToPrison\": \"2023-12-08T16:19:45\",\n          \"transferReason\": \"Medical\",\n          \"fromPrisonId\": \"DAI\",\n          \"toPrisonId\": \"AYI\"\n        }\n      ],\n      \"prisons\": [\n        \"BMI\",\n        \"BSI\",\n        \"BRI\",\n        \"DAI\",\n        \"AYI\"\n      ]\n    },\n    {\n      \"bookNumber\": \"47829A\",\n      \"bookingId\": 1211014,\n      \"entryDate\": \"2023-12-08T16:21:21\",\n      \"movementDates\": [\n        {\n          \"reasonInToPrison\": \"Imprisonment Without Option\",\n          \"dateInToPrison\": \"2023-12-08T16:21:21\",\n          \"inwardType\": \"ADM\",\n          \"admittedIntoPrisonId\": \"DGI\"\n        }\n      ],\n      \"transfers\": [\n        {\n          \"dateOutOfPrison\": \"2023-12-08T16:22:02\",\n          \"dateInToPrison\": \"2023-12-08T16:23:32\",\n          \"transferReason\": \"Overcrowding Draft\",\n          \"fromPrisonId\": \"DGI\",\n          \"toPrisonId\": \"BLI\"\n        }\n      ],\n      \"prisons\": [\n        \"DGI\",\n        \"BLI\"\n      ]\n    }\n  ]\n}\n```\n\n",
        "operationId": "getOffenderPrisonPeriods",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of offender",
            "required": true,
            "schema": {
              "pattern": "^[A-Z]\\d{4}[A-Z]{2}$",
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerInPrisonSummary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/offender-restrictions": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Gets the offender visit restrictions for a given offender using the latest booking",
        "description": "Get offender visit restrictions by offender No. <p>Requires a relationship (via caseload) with the offender or VISIT_SCHEDULER role.</p>",
        "operationId": "getVisitRestrictions",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "activeRestrictionsOnly",
            "in": "query",
            "description": "return only restriction that are active (derived from startDate and expiryDate)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderRestrictions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/military-records": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Military Records",
        "description": "Military Records",
        "operationId": "getMilitaryRecords",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilitaryRecords"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/incidents": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Return a set Incidents for a given offender No.",
        "description": "Can be filtered by participation type and incident type. Requires the VIEW_INCIDENTS role.",
        "operationId": "getIncidentsByOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "incidentType",
            "in": "query",
            "description": "incidentType",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "ASSAULT"
          },
          {
            "name": "participationRoles",
            "in": "query",
            "description": "participationRoles",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ASSIAL"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentCase"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/housing-location": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Housing location for prisoner",
        "description": "<p>Housing location split out into different levels for a prisoner, or an empty response if the prisoner is not currently in a prison.</p>\n<p>There will be either 3 or 4 levels returned depending on the layout in NOMIS.\nLevel 1 is the top level, so normally a wing or a house block and level 3 / 4 will be the individual cell.</p>\n<p>This endpoint returns the prison levels as recorded in NOMIS and may not accurately reflect the physical layout of the prison.\nFor example Bristol has wings, spurs and landings, but this endpoint will only return wings and landings as spurs are not mapped in NOMIS.\nAnother example is Moorland where 5-1-B-014 in NOMIS is Wing 5, Landing 1, Cell B and Cell 014, whereas in reality it should be Houseblock 5, Spur 1, Wing B and Cell 014 instead.\nThis endpoint will therefore also return different information from Whereabouts API as that service re-maps the NOMIS layout to include spurs etc.</p>\n<p>If the current location is temporary (reception, court, tap, cell swap or early conditional licence) then the previous permanent location is also returned, provided\nthat the location is at the same prison and they haven't moved to a different prison in the meantime.</p>\n<p>Requires a relationship (via caseload) with the prisoner or VIEW_PRISONER_DATA role.</p>\n",
        "operationId": "getHousingLocation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderLocation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/events": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "All scheduled events for offender.",
        "description": "All scheduled events for offender.",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Returned events must be scheduled on or after this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Returned events must be scheduled on or before this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/damage-obligations": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Return a list of damage obligations",
        "operationId": "getOffenderDamageObligations",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by obligation status. Leave blank to return all",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ACTIVE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderDamageObligationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender does not exists or is in a different caseload to the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/contacts": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Offender Contacts",
        "description": "Active Contacts including restrictions, using latest offender booking  and including inactive contacts by default",
        "operationId": "getOffenderContacts",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "approvedVisitorsOnly",
            "in": "query",
            "description": "return only contacts approved for visits",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "return only active contacts, nb visitors can be inactive contacts",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderContacts"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/bookings/latest/alerts": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Return a list of alerts for latest booking for a given offender No.",
        "description": "System or cat tool access only",
        "operationId": "getAlertsForLatestBookingByOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Noms ID or Prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "alertCodes",
            "in": "query",
            "description": "Comma separated list of alertCodes to filter by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "XA,RSS"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma separated list of one or more Alert fields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC"
            },
            "example": "DESC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/booking/latest/sentence-summary": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Offender Sentence Details",
        "description": "Retrieve an single offender sentence details",
        "operationId": "getLatestSentenceSummary",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Noms ID or Prisoner number (also called offenderNo)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceSummary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/alerts/v2": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Return a list of alerts for all booking for a given offender No.",
        "description": "System or cat tool access only",
        "operationId": "getAlertsForAllBookingByOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Noms ID or Prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "alertCodes",
            "in": "query",
            "description": "Comma separated list of alertCodes to filter by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "XA,RSS"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma separated list of one or more Alert fields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC"
            },
            "example": "DESC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/{offenderNo}/addresses": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Return a list of addresses for a given offender, most recent first.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAddressesByOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "offenderNo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offenders/next-sequence": {
      "get": {
        "tags": [
          "offenders"
        ],
        "summary": "Returns the next prisoner number (NOMS ID or Offender No) that can be used to create an offender",
        "operationId": "getNextPrisonerIdentifier",
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/home-detention-curfew-candidates": {
      "get": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "List of offenders eligible for HDC",
        "description": "Version 1<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderSentencesHomeDetentionCurfewCandidates",
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Sentence details for offenders who are candidates for Home Detention Curfew.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderSentenceCalcBaseSentenceCalcDates"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/booking/{bookingId}/sentences-and-offences": {
      "get": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Sentence and offence details  for a prisoner",
        "operationId": "getSentenceAndOffenceDetails",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The required booking id (mandatory)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sentence and offence details for a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderSentenceAndOffences"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/booking/{bookingId}/sentenceTerms": {
      "get": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Sentence term details for a prisoner",
        "description": "Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.",
        "operationId": "getOffenderSentenceTerms",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The required booking id (mandatory)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filterBySentenceTermCodes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Sentence term details for a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderSentenceTerms"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest": {
      "get": {
        "tags": [
          "offender-sentences"
        ],
        "summary": "Retrieve the current state of the latest Home Detention Curfew for a booking",
        "operationId": "getLatestHomeDetentionCurfew",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "HDC information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeDetentionCurfew"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-fine-payment/booking/{bookingId}": {
      "get": {
        "tags": [
          "offender-fine-payment"
        ],
        "summary": "Offender fine payments for a prisoner",
        "operationId": "getOffenderFinePayments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The required booking id (mandatory)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offender fine payment details for a prisoner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderFinePaymentDto"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-dates/calculations/{nomsId}": {
      "get": {
        "tags": [
          "offender-dates"
        ],
        "summary": "Get the key dates for an offender.",
        "description": "Requires RELEASE_DATES_CALCULATOR",
        "operationId": "getOffenderCalculations",
        "parameters": [
          {
            "name": "nomsId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user not authorised to update an offender's dates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Offender calculations found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderSentenceCalculation"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/csra/{offenderNo}": {
      "get": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Retrieves CSRAs for the given offender, ordered by the latest first.",
        "description": "Requires offender in the caseload, or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.",
        "operationId": "getOffenderCsraAssessments",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offender number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentSummary"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/csra/{bookingId}/assessment/{assessmentSeq}": {
      "get": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Retrieves details of a single CSRA assessment.",
        "description": "Requires offender in the caseload, or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.",
        "operationId": "getOffenderCsraAssessment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assessmentSeq",
            "in": "path",
            "description": "The assessment sequence number for the given offender booking",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentDetail"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/category/{agencyId}": {
      "get": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Returns category information on Offenders at a prison.",
        "description": "Requires offender in the caseload, or VIEW_ASSESSMENTS role.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenderCategorisations",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates which type of category information is required.\n    <li>UNCATEGORISED: Offenders who need to be categorised,</li>\n    <li>CATEGORISED: Offenders who have an approved categorisation,</li>\n    <li>RECATEGORISATIONS: Offenders who will soon require recategorisation</li>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "For type CATEGORISED: The past date from which categorisations are returned.<br />\nFor type RECATEGORISATIONS: the future cutoff date: list includes all prisoners who require re-categorisation on or before this date.<br />\nFor type UNCATEGORISED: Ignored; do not set this parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderCategorise"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-assessments/assessments": {
      "get": {
        "tags": [
          "offender-assessments"
        ],
        "summary": "Returns assessment information on Offenders at a prison.",
        "description": "Requires VIEW_PRISONER_DATA role.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAssessments",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "query",
            "description": "The required offender numbers Ids (mandatory)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Returns only active assessments if true, otherwise inactive and pending assessments are included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "mostRecentOnly",
            "in": "query",
            "description": "Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assessment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - e.g. no offender numbers provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-activities/{offenderNo}/attendance-history": {
      "get": {
        "tags": [
          "offender-activities"
        ],
        "summary": "The activities that this offender attended over a time period.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getHistoricalAttendances",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of the prisoner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Only include attendences on or after this date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-01-02"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Only include attendences on or before this date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-05-27"
          },
          {
            "name": "outcome",
            "in": "query",
            "description": "Only include attendences which have this outcome (default all)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offender-activities/{offenderNo}/activities-history": {
      "get": {
        "tags": [
          "offender-activities"
        ],
        "summary": "The activities that this offender has been allocated to.",
        "description": "This includes suspended activities<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getRecentStartedActivities",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of the prisoner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "earliestEndDate",
            "in": "query",
            "description": "Only include activities that have not ended or have an end date after the given date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "1970-01-02"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/offences/code/{offenceCode}": {
      "get": {
        "tags": [
          "offences"
        ],
        "summary": "Paged List of all offences where the offence code starts with the passed in offenceCode param",
        "description": "Deprecated - use https://manage-offences-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html",
        "operationId": "getOffencesThatStartWith",
        "parameters": [
          {
            "name": "offenceCode",
            "in": "path",
            "description": "The offence code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AA1256A"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "code,ASC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOffenceDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/movements/{agencyId}/out/{isoDate}": {
      "get": {
        "tags": [
          "movements"
        ],
        "operationId": "getOffendersOutToday",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isoDate",
            "in": "path",
            "description": "date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "movementType",
            "in": "query",
            "description": "The optional movement type to filter by e.g CRT, REL, TAP, TRN",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderOutTodayDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/{agencyId}/in": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Offenders who entered a prison during a time period.",
        "description": "Offenders who entered a prison during a time period.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getMovementsIn",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allMovements",
            "in": "query",
            "description": "Returns movements for inactive prisoners",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "fromDateTime",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "toDateTime",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of prisoner records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderIn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/{agencyId}/in/{isoDate}": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Information on offenders in today.",
        "description": "Information on offenders in on given date.",
        "operationId": "getMovementsIn_1",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isoDate",
            "in": "path",
            "description": "date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderIn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/{agencyId}/enroute": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Enroute prisoner movement details.",
        "description": "Enroute to reception",
        "operationId": "getEnrouteOffenderMovements",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "movementDate",
            "in": "query",
            "description": "Optional filter on date of movement",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderMovement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/upcomingCourtAppearances": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Get future court hearings for all offenders",
        "description": "Requires role VIEW_COURT_EVENTS.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getUpcomingCourtAppearances",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourtEventBasic"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/transfers": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Information on scheduled court, transfer and release events, and confirmed movements between two dates/times for a specified number of agencies.",
        "description": "Planned movements are recorded as events of type court, release or transfers/appointments. When these events are started they are actualised as external movements.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getTransfers",
        "parameters": [
          {
            "name": "agencyId",
            "in": "query",
            "description": "One or more agencyId values eg.agencyId=LEI&agencyId=MDI",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "From date and time ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "To date and time in ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "courtEvents",
            "in": "query",
            "description": "Set to true to include planned court events",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "releaseEvents",
            "in": "query",
            "description": "Set to true to include planned release events",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "transferEvents",
            "in": "query",
            "description": "Set to true to include planned transfer/appointment events",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "movements",
            "in": "query",
            "description": "Set to true to include confirmed movements",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferSummary"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid agency identifiers, or from time after the to time, or a time period greater than 24 hours specified, or parameter format not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/rollcount/{agencyId}": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Current establishment rollcount numbers.",
        "description": "Current establishment rollcount numbers.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getRollcount",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unassigned",
            "in": "query",
            "description": "If false return data for prisoners in cell locations, if true return unassigned prisoners, i.e. those in non-cell locations.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RollCount"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/rollcount/{agencyId}/movements": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Rollcount movement numbers.",
        "description": "Rollcount movement numbers.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getRollcountMovements",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "movementDate",
            "in": "query",
            "description": "The date for which movements are counted, default today.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementCount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/rollcount/{agencyId}/in-reception": {
      "get": {
        "tags": [
          "movements"
        ],
        "operationId": "getOffendersInReception",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderInReception"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/rollcount/{agencyId}/enroute": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Enroute prisoner movement count.",
        "description": "Enroute to reception count",
        "operationId": "getEnrouteOffenderMovementCount",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "movementDate",
            "in": "query",
            "description": "Optional filter on date of movement. Defaults to today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/livingUnit/{livingUnitId}/currently-out": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Information on offenders currently out.",
        "description": "Requires role ESTABLISHMENT_ROLL.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffendersCurrentlyOut",
        "parameters": [
          {
            "name": "livingUnitId",
            "in": "path",
            "description": "The identifier of a living unit, otherwise known as an internal location.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/agency/{agencyId}/temporary-absences": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Information about the set of offenders at an agency who are currently out due to temporary absence.",
        "description": "Requires role ESTABLISHMENT_ROLL.",
        "operationId": "getTemporaryAbsences",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutOnTemporaryAbsenceSummary"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movements/agency/{agencyId}/currently-out": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Information on offenders currently out.",
        "description": "Requires role ESTABLISHMENT_ROLL.",
        "operationId": "getOffendersCurrentlyOut_1",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{locationId}": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Location detail.",
        "description": "Location detail.",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The location id of location",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Match a location that is inactive?",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/{locationId}/inmates": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "List of offenders at location.",
        "description": "Requires role VIEW_PRISONER_DATA and a user in the token.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffendersAtLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The location id of location",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of inmate records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of inmate records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderBooking"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/description/{locationPrefix}/inmates": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "List of offenders at location.",
        "description": "Requires role VIEW_PRISONER_DATA and a user in the token.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffendersAtLocationDescription",
        "parameters": [
          {
            "name": "locationPrefix",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "offender name or id to match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDob",
            "in": "query",
            "description": "Offenders with a DOB >= this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "1970-01-02"
          },
          {
            "name": "toDob",
            "in": "query",
            "description": "Offenders with a DOB <= this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "1975-01-02"
          },
          {
            "name": "alerts",
            "in": "query",
            "description": "alert flags to filter by",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "returnAlerts",
            "in": "query",
            "description": "return Alert data",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "returnCategory",
            "in": "query",
            "description": "retrieve category classification from assessments",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "convictedStatus",
            "in": "query",
            "description": "retrieve inmates with a specific convicted status (Convicted, Remand, default: All)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "All"
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of inmate records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of inmate records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId</b>",
            "required": false,
            "schema": {
              "type": "string",
              "default": "lastName,firstName,bookingId"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderBooking"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/code/{code}": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Returns the location (internal) for a prison based on description",
        "operationId": "getLocationByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MDI-1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/key-worker/{agencyId}/available": {
      "get": {
        "tags": [
          "key-worker"
        ],
        "summary": "Key workers available for allocation at specified agency.",
        "description": "Key workers available for allocation at specified agency.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAvailableKeyworkers",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The agency (prison) identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Keyworker"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/key-worker/{agencyId}/allocationHistory": {
      "get": {
        "tags": [
          "key-worker"
        ],
        "summary": "All allocations in specified agency.",
        "description": "All allocations in specified agency.",
        "operationId": "getAllocationHistory",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The agency (prison) identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of allocationHistory records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of allocationHistory records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderKeyWorker"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/incidents/{incidentId}": {
      "get": {
        "tags": [
          "incidents"
        ],
        "summary": "Return an Incident for a given incident ID",
        "description": "Requires the VIEW_INCIDENTS role.",
        "operationId": "getIncident",
        "parameters": [
          {
            "name": "incidentId",
            "in": "path",
            "description": "Incident Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentCase"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/images/{imageId}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Image detail (with image data).",
        "description": "Requires role VIEW_PRISONER_DATA.",
        "operationId": "getImage",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "description": "The image id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/images/{imageId}/data": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Image data (as bytes).",
        "description": "Requires role VIEW_PRISONER_DATA.",
        "operationId": "getImageData",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "description": "The image id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fullSizeImage",
            "in": "query",
            "description": "Return full size image",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/api/gang/non-associations/{offenderNo}": {
      "get": {
        "tags": [
          "gang"
        ],
        "summary": "Returns a list of gangs for a prisoner and the gang non-associations and their members",
        "operationId": "getNonAssociationGangsForPrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Prisoner number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GangMemberSummary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/education/prisoner/{offenderNo}": {
      "get": {
        "tags": [
          "education"
        ],
        "summary": "A list of offender educations.",
        "description": "A list of offender educations.",
        "operationId": "getPrisonerEducations",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offender NOMS number. NOMS numbers have the format:<b>G0364GX</b>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the paged results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Requested limit to number of results returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEducation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/court-date-results/{offenderNo}": {
      "get": {
        "tags": [
          "court-dates"
        ],
        "summary": "Returns details of all court dates and the result of each.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCourtDateResults",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The required offender id (mandatory)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The court date results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtDateResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/digital-warrant/court-date-results/{offenderNo}": {
      "get": {
        "tags": [
          "court-dates"
        ],
        "summary": "Returns details of all court dates and the result of each.",
        "description": "<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCourtDateResults_1",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The required offender id (mandatory)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The court date results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtDateResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/cell/{locationId}/history": {
      "get": {
        "tags": [
          "cell"
        ],
        "summary": "Get occupancy history of a location.",
        "description": "Requires role MAINTAIN_CELL_MOVEMENTS.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBedAssignmentsHistory",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The location id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-03-24T10:10:10"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "To date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-12-01T11:11:11"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BedAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/cell/{locationId}/attributes": {
      "get": {
        "tags": [
          "cell"
        ],
        "summary": "Get details of a location.",
        "operationId": "getCellAttributes",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The location id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderCell"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/cell/{agencyId}/history/{assignmentDate}": {
      "get": {
        "tags": [
          "cell"
        ],
        "summary": "Get occupancy of locations in a prison on a date.",
        "description": "Requires agency to be in caseload or role MAINTAIN_CELL_MOVEMENTS.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBedAssignmentsHistoryByDateForAgency",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "Agency Id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MDI"
          },
          {
            "name": "assignmentDate",
            "in": "path",
            "description": "Assignment date (2020-03-24)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2020-03-24"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BedAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender detail.",
        "description": "Offender detail.",
        "operationId": "getOffenderBooking",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "basicInfo",
            "in": "query",
            "description": "If set to true then only basic data is returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "extraInfo",
            "in": "query",
            "description": "Only used when requesting more than basic data, returns identifiers,offences,aliases,sentence dates,convicted status",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/visits/summary": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "The summary of the visits for the offender.",
        "description": "Will return whether there are any visits and also the date of the next scheduled visit<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookingVisitsSummary",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitSummary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found or no permissions to see it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/visits/prisons": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "The list of prisons for which there are visits for the specified booking.",
        "description": "To be used for filtering visits by prison",
        "operationId": "getBookingVisitsPrisons",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/visits/next": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "The next visit for the offender.",
        "description": "The next visit for the offender. Will return 200 with no body if no next visit is scheduled<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookingVisitsNext",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "withVisitors",
            "in": "query",
            "description": "Toggle to return Visitors in response (or not).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/visits-with-visitors": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "visits with visitor list for offender.",
        "description": "visits with visitor list for offender.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookingVisitsWithVisitor",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Returned visits must be scheduled on or after this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Returned visits must be scheduled on or before this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "visitType",
            "in": "query",
            "description": "Type of visit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status of visit. code from VIS_COMPLETE domain, e.g: CANC (Cancelled) or SCH (Scheduled)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "SCH"
          },
          {
            "name": "Reason for cancellation. code from MOVE_CANC_RS domain, e.g: VISCANC (Visitor Cancelled) or NO_VO (No Visiting Order)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "NSHOW"
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "The prison id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "MDI"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Target page number, zero being the first page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of results per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageVisitWithVisitors"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/sentenceDetail": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender sentence detail (key dates and additional days awarded)",
        "description": "<h3>Algorithm</h3>\n<ul>\n  <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>\n  <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>\n  <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>\n</ul>\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookingSentenceDetail",
        "parameters": [
          {
            "name": "version",
            "in": "header",
            "description": "Version of Sentence Calc Dates, 1.0 is default",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceCalcDates"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/sentenceAdjustments": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender sentence adjustments.",
        "operationId": "getBookingSentenceAdjustments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceAdjustmentDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/secondary-languages": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Get secondary languages",
        "description": "Get secondary languages",
        "operationId": "getSecondaryLanguages",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "bookingId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecondaryLanguage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/reasonable-adjustments": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Reasonable Adjustment Information",
        "description": "Reasonable Adjustment Information. Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.",
        "operationId": "getReasonableAdjustments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "a list of treatment codes to search.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "PEEP"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonableAdjustments"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/property": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "List of active property containers",
        "description": "List of active property containers",
        "operationId": "getOffenderPropertyContainers",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyContainer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/military-records": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Military Records",
        "description": "Military Records",
        "operationId": "getMilitaryRecords_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilitaryRecords"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/mainOffence": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Get Offender main offence detail.",
        "description": "Offender main offence detail.",
        "operationId": "getMainOffence_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenceDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/image/data": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Image data (as bytes).",
        "description": "Image data (as bytes).<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getMainBookingImageData",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fullSizeImage",
            "in": "query",
            "description": "Return full size image",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/identifiers": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Identifiers for this booking",
        "description": "Identifiers for this booking",
        "operationId": "getOffenderIdentifiers",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter By Type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "PNC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderIdentifier"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/fixed-term-recall": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the Fixed Term Recall details for a booking",
        "operationId": "getFixedTermRecallDetails",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offenders bookingID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedTermRecallDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Fixed Term Recall exists for this booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/events": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "All scheduled events for offender.",
        "description": "All scheduled events for offender.",
        "operationId": "getEvents_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Returned events must be scheduled on or after this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Returned events must be scheduled on or before this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/events/today": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Today's scheduled events for offender.",
        "description": "Today's scheduled events for offender.",
        "operationId": "getEventsToday",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/events/thisWeek": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Scheduled events for offender for coming week (from current day).",
        "description": "Scheduled events for offender for coming week (from current day).",
        "operationId": "getEventsThisWeek",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/events/nextWeek": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Scheduled events for offender for following week.",
        "description": "Scheduled events for offender for following week.",
        "operationId": "getEventsNextWeek",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/court-hearings": {
      "get": {
        "tags": [
          "bookings"
        ],
        "operationId": "getCourtHearings",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking linked to the court hearings.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Return court hearings on or after this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Return court hearings on or before this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtHearings"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/court-cases": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Court Cases",
        "description": "Court Cases",
        "operationId": "getCourtCases",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Only return active court cases",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourtCase"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/contacts": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender contacts (e.g. next of kin).",
        "description": "Offender contacts (e.g. next of kin).",
        "operationId": "getContacts",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/cell-history": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets cell history for an offender booking",
        "description": "Default sort order is by assignment date descending.  Requires a relationship (via caseload) with the prisoner or VIEW_PRISONER_DATA role.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBedAssignmentsHistory_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking linked to the court hearings.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to return. Index starts at 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of results per page. Defaults to 20.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBedAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/caseNotes/{type}/{subType}/count": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Count of case notes",
        "description": "Count of case notes<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getCaseNoteCount",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Case note type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subType",
            "in": "path",
            "description": "Case note sub-type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseNoteCount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/balances": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender account balances.",
        "description": "Offender account balances.",
        "operationId": "getBalances",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/assessments": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Assessment Information",
        "description": "Assessment Information. Requires booking access (via caseload) or VIEW_ASSESSMENTS role.",
        "operationId": "getAssessments_1",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assessment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/aliases": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender aliases.",
        "description": "Offender aliases.",
        "operationId": "getOffenderAliases",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of alias records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of alias records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 5
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>firstName, lastName, age, dob, middleName, nameType, createDate</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alias"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/alerts/{alertId}": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender alert detail.",
        "description": "Offender alert detail.",
        "operationId": "getOffenderAlert",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "The Alert Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/alerts/v2": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender alerts.",
        "description": "Offender alerts.",
        "operationId": "getOffenderAlertsV2",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id for the booking",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "start alert date to search from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-02-03"
          },
          {
            "name": "to",
            "in": "query",
            "description": "end alert date to search up to (including this date)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-02-04"
          },
          {
            "name": "alertType",
            "in": "query",
            "description": "Filter by alert type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "X"
          },
          {
            "name": "alertStatus",
            "in": "query",
            "description": "Filter by alert active status",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ACTIVE"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "dateExpires,DESC",
                "dateCreated,DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAlert"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/activities": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "All scheduled activities for offender.",
        "description": "All scheduled activities for offender.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookingActivities",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Returned activities must be scheduled on or after this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Returned activities must be scheduled on or before this date (in YYYY-MM-DD format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "Page-Offset",
            "in": "header",
            "description": "Requested offset of first record in returned collection of activity records.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "Page-Limit",
            "in": "header",
            "description": "Requested limit to number of activity records returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 10
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/v2": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Prisoners Booking Summary ",
        "description": "Returns data that is available to the users caseload privileges, at least one attribute of a prisonId, bookingId or offenderNo must be specified",
        "operationId": "getPrisonerBookingsV2",
        "parameters": [
          {
            "name": "prisonId",
            "in": "query",
            "description": "Filter by prison Id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "MDI"
          },
          {
            "name": "bookingId",
            "in": "query",
            "description": "Filter by a list of booking ids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "offenderNo",
            "in": "query",
            "description": "Filter by a list of offender numbers",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "legalInfo",
            "in": "query",
            "description": "Return additional legal information (imprisonmentStatus, legalStatus, convictedStatus)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "image",
            "in": "query",
            "description": "Return facial ID for latest prisoner image",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "lastName,ASC",
                "firstName,ASC",
                "offenderNo,ASC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePrisonerBookingSummary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/{offenderNo}": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offender detail.",
        "description": "Offender detail.",
        "operationId": "getOffenderBookingByOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of offender",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fullInfo",
            "in": "query",
            "description": "If set to true then full data is returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "extraInfo",
            "in": "query",
            "description": "Only used when fullInfo=true, returns identifiers,offences,aliases,sentence dates,convicted status",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "csraSummary",
            "in": "query",
            "description": "Only used when fullInfo=true, returns the applicable CSRA classification for this offender",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InmateDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/{offenderNo}/visit/balances": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Balances visit orders and privilege visit orders for offender.",
        "description": "Balances visit orders and privilege visit orders for offender.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getBookingVisitBalances",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of offender",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowNoContent",
            "in": "query",
            "description": "Allow no content (204) response if no data rather than returning a not found (404)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitBalances"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/{offenderNo}/offenceHistory": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Offence history.",
        "description": "All Offences recorded for this offender.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getOffenceHistory",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offender number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "convictionsOnly",
            "in": "query",
            "description": "include offences with convictions only",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenceHistoryDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/offenderNo/{offenderNo}/key-worker": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Key worker details.",
        "description": "Key worker details. This should not be used - call keyworker API instead",
        "operationId": "getKeyworkerByOffenderNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offenderNo of offender",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keyworker"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/bookings/offenderNo/{offenderNo}/image/data": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Image data (as bytes).",
        "description": "Image data (as bytes).",
        "operationId": "getMainBookingImageDataByNo",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "The offender No of offender",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fullSizeImage",
            "in": "query",
            "description": "Return full size image",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/latest/calculable-sentence-envelope": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Details of the active sentence envelope, a combination of the person information, the active booking and calculable sentences for offenders",
        "operationId": "getCalculableSentenceEnvelopeByOffenderNos",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "query",
            "description": "Filter by a list of offender numbers",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalculableSentenceEnvelope"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "appointments"
        ],
        "summary": "Get an appointment by id.",
        "description": "Get appointment byId.",
        "operationId": "getAppointment",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "The unique identifier for the appointment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The appointment has been returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledEvent"
                }
              }
            }
          },
          "403": {
            "description": "The client is not authorised for this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledEvent"
                }
              }
            }
          },
          "404": {
            "description": "The appointment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledEvent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "appointments"
        ],
        "summary": "Delete an appointment.",
        "description": "Delete appointment.",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "The unique identifier for the appointment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "The client is not authorised for this operation"
          },
          "404": {
            "description": "The appointment was not found"
          },
          "204": {
            "description": "The appointment has been deleted"
          }
        }
      }
    },
    "/api/agencies/{agencyId}/receptionsWithCapacity": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of receptions with capacity for agency.",
        "description": "List of active receptions with capacity for agency.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAgencyActiveReceptionsWithCapacity",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attribute",
            "in": "query",
            "description": "Restricts list of receptions returned to those that have a specified attribute.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderCell"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/pay-profile": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "Return the payment profile data for the given Agency.",
        "description": "Each agency can configure its own pay profile and this endpoint provides its key data, such as min/max pay and bonus rates. Requires VIEW_PRISON_DATA.",
        "operationId": "getAgencyPayProfile",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgencyPrisonerPayProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/locations": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of active internal locations for agency.",
        "description": "List of active internal locations for agency.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAgencyLocations",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "Restricts list of locations returned to those that can be used for the specified event type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>description, userDescription</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/locations/type/{type}": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of active internal locations for agency by type.",
        "description": "List of active internal locations for agency by type.",
        "operationId": "getAgencyLocationsByType",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Restricts list of locations returned to those of the passed type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/locations/groups": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of all available Location Groups at agency.",
        "description": "List of all available Location Groups at agency.",
        "operationId": "getAvailableLocationGroups",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "The prison",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/eventLocations": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of locations for agency where events (appointments, visits, activities) could be held.",
        "description": "List of locations for agency where events (appointments, visits, activities) could be held.",
        "operationId": "getAgencyEventLocations",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Fields",
            "in": "header",
            "description": "Comma separated list of one or more of the following fields - <b>description, userDescription</b>",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort-Order",
            "in": "header",
            "description": "Sort order (ASC or DESC) - defaults to ASC.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/eventLocationsBooked": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of locations for agency where events (appointments, visits, activities) are being held.",
        "description": "List of locations for agency where events (appointments, visits, activities) are being held.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAgencyEventLocationsBooked",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookedOnDay",
            "in": "query",
            "description": "Filter list to only return locations which prisoners will be attending on this day",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "Only return locations which prisoners will be attending in this time slot (AM, PM or ED, and bookedOnDay must be specified)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/establishment-types": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "Return the establishment types for the given Agency.",
        "description": "An agency can have one to many establishment types. For example a prison could be both a youth and adult establishment.",
        "operationId": "getAgencyEstablishmentTypes",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgencyEstablishmentTypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/{agencyId}/cellsWithCapacity": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of active cells with capacity for agency.",
        "description": "List of active cells with capacity for agency.<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getAgencyActiveCellsWithCapacity",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attribute",
            "in": "query",
            "description": "Restricts list of cells returned to those that have a specified attribute.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OffenderCell"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/type/{type}": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of agencies by type",
        "description": "List of active agencies by type",
        "operationId": "getAgenciesByType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Agency Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Only return active agencies",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "jurisdictionCode",
            "in": "query",
            "description": "Only return agencies that match the supplied Jurisdiction Code(s), NOTE: Deprecated, please use courtType param",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "MC"
          },
          {
            "name": "courtType",
            "in": "query",
            "description": "Only return courts that match the supplied court types(s)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "MC"
          },
          {
            "name": "withAddresses",
            "in": "query",
            "description": "Returns Address Information",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skipFormatLocation",
            "in": "query",
            "description": "Don't format the location",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agency"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/prisons": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of all active prisons.",
        "description": "<p>List of active prisons.</p>\n<p>This is the same response as normally generated by calling the /agencies/type/INST endpoint with default parameters, added here for ease of use and speed.</p>\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getPrisons",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Prison"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/prison": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of prison contact details.",
        "description": "<p>List of prison contact details.</p>\n<p>DEPRECATED. This endpoint is quite slow as it currently retrieves address and telephone information for each prison separately.\nIn all the main usages of the endpoint we found that the clients didn't need or use the contact details so have deprecated the endpoint.\nUse /agencies/prisons to get the list of active prisons.</p>\n<p>This endpoint uses the REPLICA database.</p>",
        "operationId": "getPrisonContactDetailList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonContactDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/agencies/prison/{agencyId}": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "Prison contact detail.",
        "description": "Prison contact detail.",
        "operationId": "getPrisonContactDetail",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonContactDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agencies/caseload/{caseload}": {
      "get": {
        "tags": [
          "agencies"
        ],
        "summary": "List of agencies for caseload.",
        "description": "List of agencies for caseload.",
        "operationId": "getAgenciesByCaseload",
        "parameters": [
          {
            "name": "caseload",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agency"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/adjustments/{bookingId}/sentence-and-booking": {
      "get": {
        "tags": [
          "adjustments"
        ],
        "summary": "Offender sentence adjustments.",
        "operationId": "getBookingAndSentenceAdjustments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id of the offender",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingAndSentenceAdjustments"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/bookings/{bookingId}/court-hearings/{hearingId}/cancel": {
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Cancels the scheduled court hearing for an offender.",
        "description": "Cancels the scheduled court hearing for an offender. Requires role COURT_HEARING_MAINTAINER and scope write",
        "operationId": "cancelCourtHearing",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The offender booking to linked to the scheduled event.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hearingId",
            "in": "path",
            "description": "The identifier of the scheduled event to be cancelled.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unrecoverable error occurred whilst processing request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CaseLoad": {
        "required": [
          "caseLoadId",
          "currentlyActive",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "caseLoadId": {
            "type": "string",
            "description": "Case Load ID",
            "example": "MDI"
          },
          "description": {
            "type": "string",
            "description": "Full description of the case load",
            "example": "Moorland Closed (HMP & YOI)"
          },
          "type": {
            "type": "string",
            "description": "Type of case load. Note: Reference Code CSLD_TYPE",
            "example": "INST",
            "enum": [
              "COMM",
              "INST",
              "APP"
            ]
          },
          "caseloadFunction": {
            "type": "string",
            "description": "Functional Use of the case load",
            "example": "GENERAL",
            "enum": [
              "GENERAL",
              "ADMIN"
            ]
          },
          "currentlyActive": {
            "type": "boolean",
            "description": "Indicates that this caseload in the context of a staff member is the current active",
            "example": false
          }
        },
        "description": "Case Load"
      },
      "ErrorResponse": {
        "required": [
          "status",
          "userMessage"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Response status code (will typically mirror HTTP status code).",
            "format": "int32",
            "example": 404
          },
          "errorCode": {
            "type": "integer",
            "description": "An (optional) application-specific error code.",
            "format": "int32",
            "example": 20002
          },
          "userMessage": {
            "type": "string",
            "description": "Concise error reason for end-user consumption.",
            "example": "Entity Not Found"
          },
          "developerMessage": {
            "type": "string",
            "description": "Detailed description of problem with remediation hints aimed at application developer.",
            "example": "Serious error in the system"
          },
          "moreInfo": {
            "type": "string",
            "description": "Provision for further information about the problem (e.g. a link to a FAQ or knowledge base article).",
            "example": "Check out this FAQ for more information"
          }
        },
        "description": "General API Error Response"
      },
      "CaseloadUpdate": {
        "required": [
          "caseload",
          "numUsersEnabled"
        ],
        "type": "object",
        "properties": {
          "caseload": {
            "type": "string",
            "description": "Caseload",
            "example": "MDI"
          },
          "numUsersEnabled": {
            "type": "integer",
            "description": "Number of users enabled to access API",
            "format": "int32",
            "example": 5
          }
        },
        "description": "Caseload Update"
      },
      "ReferenceCodeInfo": {
        "required": [
          "activeFlag",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Reference data item description.",
            "example": "Some description"
          },
          "parentDomain": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Parent reference data item domain.",
            "example": "TASK_TYPE"
          },
          "parentCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Parent reference data item code.",
            "example": "MIGRATION"
          },
          "activeFlag": {
            "maxLength": 1,
            "minLength": 0,
            "pattern": "[N|Y]",
            "type": "string",
            "description": "Reference data item active indicator flag.",
            "example": "Y",
            "enum": [
              "Y",
              "N"
            ]
          },
          "listSeq": {
            "maximum": 999999,
            "type": "integer",
            "description": "List Sequence",
            "format": "int32",
            "example": 1
          },
          "systemDataFlag": {
            "maxLength": 1,
            "minLength": 0,
            "pattern": "[N|Y]",
            "type": "string",
            "description": "System Data Flag",
            "example": "Y",
            "enum": [
              "Y",
              "N"
            ]
          },
          "expiredDate": {
            "type": "string",
            "description": "Expired Date",
            "format": "date",
            "example": "2018-03-09"
          }
        },
        "description": "Reference Information"
      },
      "ReferenceCode": {
        "required": [
          "activeFlag",
          "code",
          "description",
          "domain"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Reference data item domain.",
            "example": "TASK_TYPE"
          },
          "code": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Reference data item code.",
            "example": "MISC"
          },
          "description": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Reference data item description.",
            "example": "Some description"
          },
          "parentDomain": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Parent reference data item domain.",
            "example": "TASK_TYPE"
          },
          "parentCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Parent reference data item code.",
            "example": "MIGRATION"
          },
          "activeFlag": {
            "maxLength": 1,
            "minLength": 0,
            "pattern": "[N|Y]",
            "type": "string",
            "description": "Reference data item active indicator flag.",
            "example": "Y",
            "enum": [
              "Y",
              "N"
            ]
          },
          "listSeq": {
            "maximum": 999999,
            "type": "integer",
            "description": "List Sequence",
            "format": "int32",
            "example": 1
          },
          "systemDataFlag": {
            "maxLength": 1,
            "minLength": 0,
            "pattern": "[N|Y]",
            "type": "string",
            "description": "System Data Flag",
            "example": "Y",
            "enum": [
              "Y",
              "N"
            ]
          },
          "expiredDate": {
            "type": "string",
            "description": "Expired Date",
            "format": "date",
            "example": "2018-03-09"
          },
          "subCodes": {
            "type": "array",
            "description": "List of subordinate reference data items associated with this reference data item. Not returned by default",
            "items": {
              "$ref": "#/components/schemas/ReferenceCode"
            }
          }
        },
        "description": "Reference Code"
      },
      "RequestToTransferOut": {
        "required": [
          "escortType",
          "movementTime",
          "toLocation",
          "transferReasonCode"
        ],
        "type": "object",
        "properties": {
          "toLocation": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The location to be moved to.",
            "example": "PVI"
          },
          "movementTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "escortType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The escort type of the move.",
            "example": "PECS"
          },
          "transferReasonCode": {
            "type": "string",
            "description": "Reason code for the transfer, reference domain is MOVE_RSN",
            "example": "NOTR"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments about the release",
            "example": "Prisoner was transferred to a new prison"
          }
        },
        "description": "Represents the data required for transferring a prisoner to a new location"
      },
      "Alert": {
        "type": "object",
        "properties": {
          "alertId": {
            "type": "integer",
            "description": "Alert Id",
            "format": "int64",
            "example": 1
          },
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id.",
            "format": "int64",
            "example": 14
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference",
            "example": "G3878UK"
          },
          "alertType": {
            "type": "string",
            "description": "Alert Type",
            "example": "X"
          },
          "alertTypeDescription": {
            "type": "string",
            "description": "Alert Type Description",
            "example": "Security"
          },
          "alertCode": {
            "type": "string",
            "description": "Alert Code",
            "example": "XER"
          },
          "alertCodeDescription": {
            "type": "string",
            "description": "Alert Code Description",
            "example": "Escape Risk"
          },
          "comment": {
            "type": "string",
            "description": "Alert comments",
            "example": "Profession lock pick."
          },
          "dateCreated": {
            "type": "string",
            "description": "Date of the alert, which might differ to the date it was created",
            "format": "date",
            "example": "2019-08-20"
          },
          "dateExpires": {
            "type": "string",
            "description": "Date the alert expires",
            "format": "date",
            "example": "2020-08-20"
          },
          "modifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the alert was last modified in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS. If this Alert hasn't been modified since its creation this field will be null",
            "example": "2021-07-05T10:35:17"
          },
          "expired": {
            "type": "boolean",
            "description": "True / False based on presence of expiry date",
            "example": true
          },
          "active": {
            "type": "boolean",
            "description": "True / False based on alert status",
            "example": false
          },
          "addedByFirstName": {
            "type": "string",
            "description": "First name of the user who added the alert",
            "example": "John"
          },
          "addedByLastName": {
            "type": "string",
            "description": "Last name of the user who added the alert",
            "example": "Smith"
          },
          "expiredByFirstName": {
            "type": "string",
            "description": "First name of the user who last modified the alert",
            "example": "John"
          },
          "expiredByLastName": {
            "type": "string",
            "description": "Last name of the user who last modified the alert",
            "example": "Smith"
          }
        },
        "description": "Alert"
      },
      "Alias": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of offender alias",
            "example": "Mike"
          },
          "middleName": {
            "type": "string",
            "description": "Middle names of offender alias",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of offender alias",
            "example": "Smith"
          },
          "age": {
            "type": "integer",
            "description": "Age of Offender",
            "format": "int32",
            "example": 32
          },
          "dob": {
            "type": "string",
            "description": "Date of Birth of Offender",
            "format": "date",
            "example": "1980-02-28"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "example": "Male"
          },
          "ethnicity": {
            "type": "string",
            "description": "Ethnicity",
            "example": "Mixed: White and Black African"
          },
          "nameType": {
            "type": "string",
            "description": "Type of Alias",
            "example": "Alias Name"
          },
          "createDate": {
            "type": "string",
            "description": "Date of creation",
            "format": "date",
            "example": "2019-02-15"
          }
        },
        "description": "Alias"
      },
      "Assessment": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking number",
            "format": "int64",
            "example": 123456
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number).",
            "example": "GV09876N"
          },
          "classificationCode": {
            "type": "string",
            "description": "Classification code",
            "example": "C"
          },
          "classification": {
            "type": "string",
            "description": "Classification description",
            "example": "Cat C"
          },
          "assessmentCode": {
            "type": "string",
            "description": "Identifies the type of assessment",
            "example": "CATEGORY"
          },
          "assessmentDescription": {
            "type": "string",
            "description": "Assessment description",
            "example": "Categorisation"
          },
          "cellSharingAlertFlag": {
            "type": "boolean",
            "description": "Indicates the presence of a cell sharing alert"
          },
          "assessmentDate": {
            "type": "string",
            "description": "Date assessment was created",
            "format": "date",
            "example": "2018-02-11"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Date of next review",
            "format": "date",
            "example": "2018-02-11"
          },
          "approvalDate": {
            "type": "string",
            "description": "Date of assessment approval",
            "format": "date",
            "example": "2018-02-11"
          },
          "assessmentAgencyId": {
            "type": "string",
            "description": "The assessment creation agency id",
            "example": "MDI"
          },
          "assessmentStatus": {
            "type": "string",
            "description": "The status of the assessment",
            "example": "A",
            "enum": [
              "P",
              "A",
              "I"
            ]
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number of assessment within booking",
            "format": "int32",
            "example": 1
          },
          "assessmentComment": {
            "type": "string",
            "description": "Comment from assessor",
            "example": "Comment details"
          },
          "assessorId": {
            "type": "integer",
            "description": "Staff member who made the assessment",
            "format": "int64",
            "example": 130000
          },
          "assessorUser": {
            "type": "string",
            "description": "Username who made the assessment",
            "example": "NGK33Y"
          }
        },
        "description": "Assessment"
      },
      "AssignedLivingUnit": {
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency Id"
          },
          "locationId": {
            "type": "integer",
            "description": "location Id",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "Living Unit Desc"
          },
          "agencyName": {
            "type": "string",
            "description": "Name of the agency where this living unit resides"
          }
        },
        "description": "Assigned Living Unit"
      },
      "InmateDetail": {
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference",
            "example": "A1234AA"
          },
          "bookingId": {
            "type": "integer",
            "description": "Offender Booking Id",
            "format": "int64",
            "example": 432132
          },
          "bookingNo": {
            "type": "string",
            "description": "Booking Number"
          },
          "offenderId": {
            "type": "integer",
            "description": "Internal Offender ID",
            "format": "int64"
          },
          "rootOffenderId": {
            "type": "integer",
            "description": "Internal Root Offender ID",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "First Name"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name(s)"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth of prisoner",
            "format": "date",
            "example": "1970-03-15"
          },
          "age": {
            "type": "integer",
            "description": "Age of prisoner. Note: Full Details Only",
            "format": "int32"
          },
          "activeFlag": {
            "type": "boolean",
            "description": "Indicates that the person is currently in prison"
          },
          "facialImageId": {
            "type": "integer",
            "description": "Image Id Ref of prisoner",
            "format": "int64"
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of agency to which the prisoner is associated."
          },
          "assignedLivingUnitId": {
            "type": "integer",
            "description": "Identifier of living unit (e.g. cell) that prisoner is assigned to.",
            "format": "int64"
          },
          "religion": {
            "type": "string",
            "description": "Religion of the prisoner"
          },
          "language": {
            "type": "string",
            "description": "Preferred spoken language"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Interpreter required"
          },
          "writtenLanguage": {
            "type": "string",
            "description": "Preferred written language"
          },
          "alertsCodes": {
            "type": "array",
            "description": "List of Alerts",
            "items": {
              "type": "string",
              "description": "List of Alerts"
            }
          },
          "activeAlertCount": {
            "type": "integer",
            "description": "number of active alerts. Note: Full Details Only",
            "format": "int64"
          },
          "inactiveAlertCount": {
            "type": "integer",
            "description": "number of inactive alerts. Note: Full Details Only",
            "format": "int64"
          },
          "alerts": {
            "type": "array",
            "description": "List of alert details",
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          },
          "assignedLivingUnit": {
            "$ref": "#/components/schemas/AssignedLivingUnit"
          },
          "physicalAttributes": {
            "$ref": "#/components/schemas/PhysicalAttributes"
          },
          "physicalCharacteristics": {
            "type": "array",
            "description": "List of physical characteristics",
            "items": {
              "$ref": "#/components/schemas/PhysicalCharacteristic"
            }
          },
          "profileInformation": {
            "type": "array",
            "description": "List of profile information",
            "items": {
              "$ref": "#/components/schemas/ProfileInformation"
            }
          },
          "physicalMarks": {
            "type": "array",
            "description": "List of physical marks",
            "items": {
              "$ref": "#/components/schemas/PhysicalMark"
            }
          },
          "assessments": {
            "type": "array",
            "description": "List of assessments",
            "items": {
              "$ref": "#/components/schemas/Assessment"
            }
          },
          "csra": {
            "type": "string",
            "description": "CSRA (Latest assessment with cellSharing=true from list of assessments)"
          },
          "csraClassificationCode": {
            "type": "string",
            "description": "The CSRA classification (calculated from the list of CSRA assessments)",
            "example": "STANDARD"
          },
          "csraClassificationDate": {
            "type": "string",
            "description": "The date that the csraClassificationCode was assessed",
            "format": "date"
          },
          "category": {
            "type": "string",
            "description": "Category description (from list of assessments)"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code (from list of assessments)"
          },
          "birthPlace": {
            "type": "string",
            "description": "Place of birth",
            "example": "WALES"
          },
          "birthCountryCode": {
            "type": "string",
            "description": "Country of birth",
            "example": "GBR"
          },
          "inOutStatus": {
            "type": "string",
            "description": "In/Out Status",
            "example": "IN, OUT, TRN"
          },
          "identifiers": {
            "type": "array",
            "description": "Identifiers. Note: Only returned when requesting extra details",
            "items": {
              "$ref": "#/components/schemas/OffenderIdentifier"
            }
          },
          "personalCareNeeds": {
            "type": "array",
            "description": "Personal Care Needs. Note: Only returned when requesting extra details",
            "items": {
              "$ref": "#/components/schemas/PersonalCareNeed"
            }
          },
          "sentenceDetail": {
            "$ref": "#/components/schemas/SentenceCalcDates"
          },
          "offenceHistory": {
            "type": "array",
            "description": "Offence History. Note: Only returned when requesting extra details",
            "items": {
              "$ref": "#/components/schemas/OffenceHistoryDetail"
            }
          },
          "sentenceTerms": {
            "type": "array",
            "description": "Current Sentence Terms. Note: Only returned when requesting extra details",
            "items": {
              "$ref": "#/components/schemas/OffenderSentenceTerms"
            }
          },
          "aliases": {
            "type": "array",
            "description": "Aliases. Note: Only returned when requesting extra details",
            "items": {
              "$ref": "#/components/schemas/Alias"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of prisoner",
            "example": "ACTIVE IN, INACTIVE OUT, INACTIVE TRN"
          },
          "statusReason": {
            "type": "string",
            "description": "Last movement status of the prison",
            "example": "CRT-CA"
          },
          "lastMovementTypeCode": {
            "type": "string",
            "description": "Last Movement Type Code of prisoner. Note: Reference Data from MOVE_TYPE Domain",
            "example": "TAP, CRT, TRN, ADM, REL"
          },
          "lastMovementReasonCode": {
            "type": "string",
            "description": "Last Movement Reason of prisoner. Note: Reference Data from MOVE_RSN Domain",
            "example": "CA"
          },
          "legalStatus": {
            "type": "string",
            "description": "Legal Status. Note: Only returned when requesting extra details",
            "example": "REMAND",
            "enum": [
              "RECALL",
              "DEAD",
              "INDETERMINATE_SENTENCE",
              "SENTENCED",
              "CONVICTED_UNSENTENCED",
              "CIVIL_PRISONER",
              "IMMIGRATION_DETAINEE",
              "REMAND",
              "UNKNOWN",
              "OTHER"
            ]
          },
          "recall": {
            "type": "boolean",
            "description": "Recall. Note: Only returned when requesting extra details",
            "example": true
          },
          "imprisonmentStatus": {
            "type": "string",
            "description": "The prisoner's imprisonment status. Note: Only returned when requesting extra details",
            "example": "LIFE"
          },
          "imprisonmentStatusDescription": {
            "type": "string",
            "description": "The prisoner's imprisonment status description. Note: Only returned when requesting extra details",
            "example": "Serving Life Imprisonment"
          },
          "receptionDate": {
            "type": "string",
            "description": "Date prisoner was received into the prison.",
            "format": "date",
            "example": "1980-01-01"
          },
          "locationDescription": {
            "type": "string",
            "description": "current prison or outside with last movement information.",
            "example": "Outside - released from Leeds"
          },
          "latestLocationId": {
            "type": "string",
            "description": "the current prison id or the last prison before release",
            "example": "MDI"
          }
        },
        "description": "Inmate Detail"
      },
      "OffenceHistoryDetail": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Prisoner booking id",
            "format": "int64",
            "example": 1123456
          },
          "offenceDate": {
            "type": "string",
            "description": "Date the offence took place",
            "format": "date",
            "example": "2018-02-10"
          },
          "offenceRangeDate": {
            "type": "string",
            "description": "End date if range the offence was believed to have taken place",
            "format": "date",
            "example": "2018-03-10"
          },
          "offenceDescription": {
            "type": "string",
            "description": "Description associated with the offence code",
            "example": "Commit an act / series of acts with intent to pervert the course of public justice"
          },
          "offenceCode": {
            "type": "string",
            "description": "Reference Code",
            "example": "RR84070"
          },
          "statuteCode": {
            "type": "string",
            "description": "Statute code",
            "example": "RR84"
          },
          "mostSerious": {
            "type": "boolean",
            "description": "Identifies the main offence per booking"
          },
          "primaryResultCode": {
            "type": "string",
            "description": "Primary result code "
          },
          "secondaryResultCode": {
            "type": "string",
            "description": "Secondary result code"
          },
          "primaryResultDescription": {
            "type": "string",
            "description": "Description for Primary result"
          },
          "secondaryResultDescription": {
            "type": "string",
            "description": "Description for Secondary result"
          },
          "primaryResultConviction": {
            "type": "boolean",
            "description": "Conviction flag for Primary result "
          },
          "secondaryResultConviction": {
            "type": "boolean",
            "description": "Conviction flag for Secondary result "
          },
          "courtDate": {
            "type": "string",
            "description": "Latest court date associated with the offence",
            "format": "date",
            "example": "2018-02-10"
          },
          "caseId": {
            "type": "integer",
            "description": "Court case id",
            "format": "int64",
            "example": 100
          }
        },
        "description": "Offence History Item"
      },
      "OffenderIdentifier": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of offender identifier",
            "example": "PNC"
          },
          "value": {
            "type": "string",
            "description": "The value of the offender identifier",
            "example": "1231/XX/121"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number for this identifier",
            "example": "A1234AB"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking ID for this identifier",
            "format": "int64",
            "example": 1231223
          },
          "issuedAuthorityText": {
            "type": "string",
            "description": "Issuing Authority Information",
            "example": "Important Auth"
          },
          "issuedDate": {
            "type": "string",
            "description": "Date of issue",
            "format": "date",
            "example": "2018-01-21"
          },
          "caseloadType": {
            "type": "string",
            "description": "Related caseload type",
            "example": "GENERAL"
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Creation date and time",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Offender Identifier"
      },
      "OffenderSentenceTerms": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id.",
            "format": "int64",
            "example": 1132400
          },
          "sentenceSequence": {
            "type": "integer",
            "description": "Sentence number within booking id.",
            "format": "int32",
            "example": 2
          },
          "termSequence": {
            "type": "integer",
            "description": "Sentence term number within sentence.",
            "format": "int32",
            "example": 1
          },
          "consecutiveTo": {
            "type": "integer",
            "description": "Sentence number which this sentence follows if consecutive, otherwise concurrent.",
            "format": "int32",
            "example": 2
          },
          "sentenceType": {
            "type": "string",
            "description": "Sentence type, using reference data from table SENTENCE_CALC_TYPES.",
            "example": "2"
          },
          "sentenceTypeDescription": {
            "type": "string",
            "description": "Sentence type description.",
            "example": "2"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of sentence term.",
            "format": "date",
            "example": "2018-12-31"
          },
          "years": {
            "type": "integer",
            "description": "Sentence length years.",
            "format": "int32",
            "example": 1
          },
          "months": {
            "type": "integer",
            "description": "Sentence length months.",
            "format": "int32",
            "example": 2
          },
          "weeks": {
            "type": "integer",
            "description": "Sentence length weeks.",
            "format": "int32",
            "example": 3
          },
          "days": {
            "type": "integer",
            "description": "Sentence length days.",
            "format": "int32",
            "example": 4
          },
          "lifeSentence": {
            "type": "boolean",
            "description": "Whether this is a life sentence."
          },
          "caseId": {
            "type": "string",
            "description": "Court case id"
          },
          "fineAmount": {
            "type": "number",
            "description": "Fine amount.",
            "format": "double"
          },
          "sentenceTermCode": {
            "type": "string",
            "description": "Sentence term code.",
            "example": "IMP"
          },
          "lineSeq": {
            "type": "integer",
            "description": "Sentence line number",
            "format": "int64",
            "example": 1
          },
          "sentenceStartDate": {
            "type": "string",
            "description": "Sentence start date",
            "format": "date",
            "example": "2018-12-31"
          }
        },
        "description": "Offender Sentence terms details for booking id"
      },
      "PersonalCareNeed": {
        "type": "object",
        "properties": {
          "personalCareNeedId": {
            "type": "integer",
            "description": "ID",
            "format": "int64",
            "example": 1
          },
          "problemType": {
            "type": "string",
            "description": "Problem Type",
            "example": "MATSTAT"
          },
          "problemCode": {
            "type": "string",
            "description": "Problem Code",
            "example": "ACCU9"
          },
          "problemStatus": {
            "type": "string",
            "description": "Problem Status",
            "example": "ON"
          },
          "problemDescription": {
            "type": "string",
            "description": "Problem Description",
            "example": "Preg, acc under 9mths"
          },
          "commentText": {
            "type": "string",
            "description": "Comment Text",
            "example": "a comment"
          },
          "startDate": {
            "type": "string",
            "description": "Start Date",
            "format": "date",
            "example": "2010-06-21"
          },
          "endDate": {
            "type": "string",
            "description": "End Date",
            "format": "date",
            "example": "2010-06-21"
          }
        },
        "description": "Personal Care Need"
      },
      "PhysicalAttributes": {
        "type": "object",
        "properties": {
          "sexCode": {
            "type": "string",
            "description": "Gender Code",
            "example": "M"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "example": "Male"
          },
          "raceCode": {
            "type": "string",
            "description": "Ethnicity Code",
            "example": "W1"
          },
          "ethnicity": {
            "type": "string",
            "description": "Ethnicity",
            "example": "White: Eng./Welsh/Scot./N.Irish/British"
          },
          "heightFeet": {
            "type": "integer",
            "description": "Height in Feet",
            "format": "int32",
            "example": 5
          },
          "heightInches": {
            "type": "integer",
            "description": "Height in Inches",
            "format": "int32",
            "example": 60
          },
          "heightMetres": {
            "type": "number",
            "description": "Height in Metres (to 2dp)",
            "example": 1.76
          },
          "heightCentimetres": {
            "type": "integer",
            "description": "Height in Centimetres",
            "format": "int32",
            "example": 176
          },
          "weightPounds": {
            "type": "integer",
            "description": "Weight in Pounds",
            "format": "int32",
            "example": 50
          },
          "weightKilograms": {
            "type": "integer",
            "description": "Weight in Kilograms",
            "format": "int32",
            "example": 67
          }
        },
        "description": "Physical Attributes"
      },
      "PhysicalCharacteristic": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type code of physical characteristic"
          },
          "characteristic": {
            "type": "string",
            "description": "Type of physical characteristic"
          },
          "detail": {
            "type": "string",
            "description": "Detailed information about the physical characteristic"
          },
          "imageId": {
            "type": "integer",
            "description": "Image Id Ref",
            "format": "int64"
          }
        },
        "description": "Physical Characteristic"
      },
      "PhysicalMark": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of Mark"
          },
          "side": {
            "type": "string",
            "description": "Left or Right Side"
          },
          "bodyPart": {
            "type": "string",
            "description": "Where on the body"
          },
          "orientation": {
            "type": "string",
            "description": "Image orientation"
          },
          "comment": {
            "type": "string",
            "description": "More information"
          },
          "imageId": {
            "type": "integer",
            "description": "Image Id Ref",
            "format": "int64"
          }
        },
        "description": "Physical Mark"
      },
      "ProfileInformation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of profile information"
          },
          "question": {
            "type": "string",
            "description": "Profile Question"
          },
          "resultValue": {
            "type": "string",
            "description": "Profile Result Answer"
          }
        },
        "description": "Profile Information"
      },
      "SentenceCalcDates": {
        "type": "object",
        "properties": {
          "sentenceExpiryDate": {
            "type": "string",
            "description": "SED - date on which sentence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "automaticReleaseDate": {
            "type": "string",
            "description": "ARD - calculated automatic (unconditional) release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "conditionalReleaseDate": {
            "type": "string",
            "description": "CRD - calculated conditional release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "nonParoleDate": {
            "type": "string",
            "description": "NPD - calculated non-parole date for offender (relating to the 1991 act).",
            "format": "date",
            "example": "2020-02-03"
          },
          "postRecallReleaseDate": {
            "type": "string",
            "description": "PRRD - calculated post-recall release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "licenceExpiryDate": {
            "type": "string",
            "description": "LED - date on which offender licence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewEligibilityDate": {
            "type": "string",
            "description": "HDCED - date on which offender will be eligible for home detention curfew.",
            "format": "date",
            "example": "2020-02-03"
          },
          "paroleEligibilityDate": {
            "type": "string",
            "description": "PED - date on which offender is eligible for parole.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewActualDate": {
            "type": "string",
            "description": "HDCAD - the offender's actual home detention curfew date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "actualParoleDate": {
            "type": "string",
            "description": "APD - the offender's actual parole date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "releaseOnTemporaryLicenceDate": {
            "type": "string",
            "description": "ROTL - the date on which offender will be released on temporary licence.",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyTermDate": {
            "type": "string",
            "description": "ETD - early term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "midTermDate": {
            "type": "string",
            "description": "MTD - mid term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "lateTermDate": {
            "type": "string",
            "description": "LTD - late term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionExpiryDate": {
            "type": "string",
            "description": "TUSED - top-up supervision expiry date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffDate": {
            "type": "string",
            "description": "Date on which minimum term is reached for parole (indeterminate/life sentences).",
            "format": "date",
            "example": "2020-02-03"
          },
          "dtoPostRecallReleaseDate": {
            "type": "string",
            "description": "DPRRD - Detention training order post recall release date",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffEarlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "TERSED - Tariff early removal scheme eligibility date",
            "format": "date",
            "example": "2020-02-03"
          },
          "effectiveSentenceEndDate": {
            "type": "string",
            "description": "Effective sentence end date",
            "format": "date",
            "example": "2020-02-03"
          },
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id.",
            "format": "int64",
            "example": 1234123
          },
          "sentenceStartDate": {
            "type": "string",
            "description": "Sentence start date.",
            "format": "date",
            "example": "2010-02-03"
          },
          "additionalDaysAwarded": {
            "type": "integer",
            "description": "ADA - days added to sentence term due to adjustments.",
            "format": "int32",
            "example": 5
          },
          "automaticReleaseOverrideDate": {
            "type": "string",
            "description": "ARD (override) - automatic (unconditional) release override date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "conditionalReleaseOverrideDate": {
            "type": "string",
            "description": "CRD (override) - conditional release override date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "nonParoleOverrideDate": {
            "type": "string",
            "description": "NPD (override) - non-parole override date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "postRecallReleaseOverrideDate": {
            "type": "string",
            "description": "PRRD (override) - post-recall release override date for offender.",
            "format": "date",
            "example": "2020-04-01"
          },
          "dtoPostRecallReleaseDateOverride": {
            "type": "string",
            "description": "DPRRD (override) - detention training order post-recall release override date for offender",
            "format": "date",
            "example": "2020-04-01"
          },
          "nonDtoReleaseDate": {
            "type": "string",
            "description": "Release date for non-DTO sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.",
            "format": "date",
            "example": "2020-04-01"
          },
          "sentenceExpiryCalculatedDate": {
            "type": "string",
            "description": "SED (calculated) - date on which sentence expires. (as calculated by NOMIS)",
            "format": "date",
            "example": "2020-02-03"
          },
          "sentenceExpiryOverrideDate": {
            "type": "string",
            "description": "SED (override) - date on which sentence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "licenceExpiryCalculatedDate": {
            "type": "string",
            "description": "LED (calculated) - date on which offender licence expires. (as calculated by NOMIS)",
            "format": "date",
            "example": "2020-02-03"
          },
          "licenceExpiryOverrideDate": {
            "type": "string",
            "description": "LED (override) - date on which offender licence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "paroleEligibilityCalculatedDate": {
            "type": "string",
            "description": "PED (calculated) - date on which offender is eligible for parole.",
            "format": "date",
            "example": "2020-02-03"
          },
          "paroleEligibilityOverrideDate": {
            "type": "string",
            "description": "PED (override) - date on which offender is eligible for parole.",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionExpiryCalculatedDate": {
            "type": "string",
            "description": "TUSED (calculated) - top-up supervision expiry date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionExpiryOverrideDate": {
            "type": "string",
            "description": "TUSED (override) - top-up supervision expiry date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewEligibilityCalculatedDate": {
            "type": "string",
            "description": "HDCED (calculated) - date on which offender will be eligible for home detention curfew.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewEligibilityOverrideDate": {
            "type": "string",
            "description": "HDCED (override) - date on which offender will be eligible for home detention curfew.",
            "format": "date",
            "example": "2020-02-03"
          },
          "nonDtoReleaseDateType": {
            "type": "string",
            "description": "Indicates which type of non-DTO release date is the effective release date. One of 'ARD', 'CRD', 'NPD' or 'PRRD'.",
            "example": "CRD",
            "enum": [
              "ARD",
              "CRD",
              "NPD",
              "PRRD"
            ]
          },
          "confirmedReleaseDate": {
            "type": "string",
            "description": "Confirmed release date for offender.",
            "format": "date",
            "example": "2020-04-20"
          },
          "releaseDate": {
            "type": "string",
            "description": "Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>",
            "format": "date",
            "example": "2020-04-01"
          },
          "etdOverrideDate": {
            "type": "string",
            "description": "ETD Override - early term date for offender override date.",
            "format": "date",
            "example": "2019-04-02"
          },
          "etdCalculatedDate": {
            "type": "string",
            "description": "ETD Override - early term date for offender calculated date.",
            "format": "date",
            "example": "2019-04-02"
          },
          "mtdOverrideDate": {
            "type": "string",
            "description": "MTD - mid term date for offender override date.",
            "format": "date",
            "example": "2019-04-02"
          },
          "mtdCalculatedDate": {
            "type": "string",
            "description": "MTD - mid term date for offender calculated date.",
            "format": "date",
            "example": "2019-04-02"
          },
          "ltdOverrideDate": {
            "type": "string",
            "description": "LTD - late term date for offender override date.",
            "format": "date",
            "example": "2019-04-02"
          },
          "ltdCalculatedDate": {
            "type": "string",
            "description": "LTD - late term date for offender calculated date.",
            "format": "date",
            "example": "2019-04-02"
          },
          "topupSupervisionStartDate": {
            "type": "string",
            "description": "Top-up supervision start date for offender - calculated as licence end date + 1 day or releaseDate if licence end date not set.",
            "format": "date",
            "example": "2019-04-01"
          },
          "homeDetentionCurfewEndDate": {
            "type": "string",
            "description": "Offender's home detention curfew end date - calculated as one day before the releaseDate.",
            "format": "date",
            "example": "2019-04-01"
          }
        },
        "description": "Sentence Calculation Dates"
      },
      "RequestToTransferIn": {
        "required": [
          "receiveTime"
        ],
        "type": "object",
        "properties": {
          "receiveTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments about the release",
            "example": "Prisoner was transferred to a new prison"
          },
          "cellLocation": {
            "type": "string",
            "description": "Cell location",
            "example": "MDI-RECP"
          }
        },
        "description": "Represents the data required for receiving a prisoner transfer"
      },
      "RequestToTransferOutToTemporaryAbsence": {
        "required": [
          "escortType",
          "transferReasonCode"
        ],
        "type": "object",
        "properties": {
          "toCity": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The city to be released to. Not required if scheduleEventId is present",
            "example": "18248"
          },
          "movementTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "escortType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The escort type of the move.",
            "example": "PECS"
          },
          "transferReasonCode": {
            "type": "string",
            "description": "Reason code for the transfer, reference domain is MOVE_RSN",
            "example": "C3"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments about the release",
            "example": "Prisoner was transferred to a new prison"
          },
          "shouldReleaseBed": {
            "type": "boolean",
            "description": "Flag indicate if bed should be released"
          },
          "scheduleEventId": {
            "type": "integer",
            "description": "Optional scheduled schedule event this movement relates to",
            "format": "int64"
          }
        },
        "description": "Represents the data required for transferring a prisoner to temporary absence"
      },
      "RequestForTemporaryAbsenceArrival": {
        "required": [
          "agencyId",
          "dateTime"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency identifier",
            "example": "MDI"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "Movement Reason Code",
            "example": "CA"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments",
            "example": "Prisoner was transferred from..."
          },
          "dateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Represents the data required for registering temporary absence arrival"
      },
      "RequestToReleasePrisoner": {
        "required": [
          "movementReasonCode",
          "releaseTime"
        ],
        "type": "object",
        "properties": {
          "movementReasonCode": {
            "type": "string",
            "description": "Reason code for the release, reference domain is MOVE_RSN",
            "example": "CR",
            "enum": [
              "AR",
              "AU",
              "BD",
              "BL",
              "CE",
              "CR",
              "D1",
              "D2",
              "D3",
              "D4",
              "D5",
              "D6",
              "DA",
              "DD",
              "DE",
              "DEC",
              "DL",
              "DS",
              "ER",
              "ESCP",
              "ETR",
              "EX",
              "HC",
              "HD",
              "HE",
              "HP",
              "HR",
              "HU",
              "IF",
              "MRG",
              "NCS",
              "NG",
              "NP",
              "PD",
              "PF",
              "PX",
              "RE",
              "RW",
              "SC",
              "UAL"
            ]
          },
          "releaseTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the release occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments about the release",
            "example": "Prisoner was released on bail"
          },
          "toLocationCode": {
            "type": "string",
            "description": "Agency Location code where prisoner is released to, default is OUT",
            "example": "OUT"
          }
        },
        "description": "Request release of prisoner"
      },
      "RequestToRecall": {
        "required": [
          "movementReasonCode",
          "prisonId",
          "recallTime"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "Prison ID where recalled to",
            "example": "MDI"
          },
          "recallTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the recall occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "fromLocationId": {
            "type": "string",
            "description": "Where the prisoner has been recalled from (default OUT)",
            "example": "SHEFCC"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "Reason for in movement (e.g. Recall from Intermittent Custody)",
            "example": "24"
          },
          "youthOffender": {
            "type": "boolean",
            "description": "Is this offender a youth",
            "example": false
          },
          "cellLocation": {
            "type": "string",
            "description": "Cell location where recalled prisoner should be housed, default will be reception",
            "example": "MDI-RECP"
          },
          "imprisonmentStatus": {
            "type": "string",
            "description": "Require imprisonment status",
            "example": "CUR_ORA"
          }
        },
        "description": "Represents the data required for recalling a prisoner"
      },
      "CellMoveResult": {
        "required": [
          "agencyId",
          "bookingId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique, numeric booking id.",
            "format": "int64",
            "example": 1234134
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of agency that offender is associated with.",
            "example": "MDI"
          },
          "assignedLivingUnitId": {
            "type": "integer",
            "description": "Identifier of living unit (e.g. cell) that offender is assigned to.",
            "format": "int64",
            "example": 123123
          },
          "assignedLivingUnitDesc": {
            "type": "string",
            "description": "Description of living unit (e.g. cell) that offender is assigned to.",
            "example": "MDI-1-1-3"
          },
          "bedAssignmentHistorySequence": {
            "type": "integer",
            "description": "Bed assignment sequence associated with the entry created for this cell move ",
            "format": "int32",
            "example": 2
          }
        },
        "description": "Cell move result"
      },
      "RequestToDischargePrisoner": {
        "required": [
          "hospitalLocationCode"
        ],
        "type": "object",
        "properties": {
          "hospitalLocationCode": {
            "type": "string",
            "description": "Agency Location code for hospital, agency type is HSHOSP",
            "example": "HAZLWD"
          },
          "dischargeTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the release occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "supportingPrisonId": {
            "type": "string",
            "description": "Supporting Prison for POM, can be null if prisoner is already in a prison, for prisoners already released this field will be ignored",
            "example": "MDI"
          },
          "fromLocationId": {
            "type": "string",
            "description": "Where the prisoner has moved from e.g. court, can be null if prisoner is already in prison, for prisoners already in prison this field will be ignored",
            "example": "SHEFCC"
          }
        },
        "description": "Request release of prisoner"
      },
      "RequestToTransferOutToCourt": {
        "required": [
          "escortType",
          "movementTime",
          "toLocation",
          "transferReasonCode"
        ],
        "type": "object",
        "properties": {
          "toLocation": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The court location to be moved to.",
            "example": "LEEDYC"
          },
          "movementTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          },
          "escortType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The escort type of the move.",
            "example": "PECS"
          },
          "transferReasonCode": {
            "type": "string",
            "description": "Reason code for the transfer, reference domain is MOVE_RSN",
            "example": "CRT"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments about the release",
            "example": "Prisoner was transferred to a new prison"
          },
          "shouldReleaseBed": {
            "type": "boolean",
            "description": "Flag indicate if bed should be released"
          },
          "courtEventId": {
            "type": "integer",
            "description": "Optional scheduled court hearing event this movement relates to",
            "format": "int64"
          }
        },
        "description": "Represents the data required for transferring a prisoner to a court"
      },
      "RequestForCourtTransferIn": {
        "required": [
          "agencyId",
          "dateTime"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency identifier",
            "example": "MDI"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "Movement Reason Code",
            "example": "CA"
          },
          "commentText": {
            "type": "string",
            "description": "Additional comments",
            "example": "Prisoner was transferred to a new prison"
          },
          "dateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Represents the data required for registering court return"
      },
      "HdcChecks": {
        "required": [
          "date",
          "passed"
        ],
        "type": "object",
        "properties": {
          "passed": {
            "type": "boolean",
            "description": "HDC Checks passed flag",
            "example": true
          },
          "date": {
            "type": "string",
            "description": "HDC Checks passed date. ISO-8601 format. YYYY-MM-DD",
            "format": "date",
            "example": "2018-12-31"
          }
        },
        "description": "HDC Curfew Check"
      },
      "ApprovalStatus": {
        "required": [
          "approvalStatus",
          "date"
        ],
        "type": "object",
        "properties": {
          "approvalStatus": {
            "type": "string",
            "description": "Approval status. Must be one of the 'HDC_APPROVE' reference codes",
            "example": "APPROVED"
          },
          "refusedReason": {
            "type": "string",
            "description": "Refused reason. Must be one of the 'HDC_REJ_RSN' reference codes",
            "example": "UNDER_14DAYS"
          },
          "date": {
            "type": "string",
            "description": "Approval status date. ISO-8601 format. YYYY-MM-DD",
            "format": "date",
            "example": "2018-12-31"
          }
        },
        "description": "HDC Approval Status"
      },
      "CategoryRejectionDetail": {
        "required": [
          "assessmentSeq",
          "bookingId",
          "evaluationDate",
          "reviewCommitteeCode"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64"
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number",
            "format": "int32"
          },
          "evaluationDate": {
            "type": "string",
            "description": "Date of rejection",
            "format": "date"
          },
          "reviewCommitteeCode": {
            "type": "string",
            "description": "Department, reference code in domain 'ASSESS_COMM'. Normally 'REVIEW'"
          },
          "committeeCommentText": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Overall comment"
          }
        },
        "description": "Rejection details"
      },
      "CategorisationUpdateDetail": {
        "required": [
          "assessmentSeq",
          "bookingId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64"
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "description": "Category code"
          },
          "committee": {
            "type": "string",
            "description": "The assessment committee code (reference code in domain 'ASSESS_COMM')"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next review date for recategorisation",
            "format": "date"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Initial categorisation comment"
          }
        },
        "description": "Categorisation details"
      },
      "CategoryApprovalDetail": {
        "required": [
          "bookingId",
          "category",
          "evaluationDate",
          "reviewCommitteeCode"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64"
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number. Only used to check consistency",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "description": "Category code, reference code in domain 'SUP_LVL_TYPE'"
          },
          "evaluationDate": {
            "type": "string",
            "description": "Date of approval",
            "format": "date"
          },
          "reviewCommitteeCode": {
            "type": "string",
            "description": "Department, reference code in domain 'ASSESS_COMM'. Normally 'REVIEW'",
            "example": "REVIEW"
          },
          "approvedCategoryComment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Approved result category comment"
          },
          "committeeCommentText": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Overall comment"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next review date (date of re-assessment, remains unchanged if not provided)",
            "format": "date"
          },
          "approvedPlacementAgencyId": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "Approved placement prison"
          },
          "approvedPlacementText": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Approved placement prison comment"
          }
        },
        "description": "Approval details"
      },
      "OffenceActivationDto": {
        "required": [
          "activationFlag",
          "offenceCode",
          "statuteCode"
        ],
        "type": "object",
        "properties": {
          "offenceCode": {
            "type": "string"
          },
          "statuteCode": {
            "type": "string"
          },
          "activationFlag": {
            "type": "boolean"
          }
        },
        "description": "Used for deactivating/reactivating an offence. A deactivated offence is not selectable in NOMIS"
      },
      "HOCodeDto": {
        "required": [
          "activeFlag",
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "HO code",
            "example": "825/99"
          },
          "description": {
            "type": "string",
            "description": "HO code description",
            "example": "Ho Code 825/99"
          },
          "activeFlag": {
            "type": "string",
            "description": "Active Y/N",
            "example": "Y"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry Date",
            "format": "date",
            "example": "2021-01-05"
          }
        },
        "description": "HO Code",
        "example": "825/99"
      },
      "OffenceDto": {
        "required": [
          "activeFlag",
          "code",
          "description",
          "severityRanking",
          "statuteCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Reference Code",
            "example": "RR84070"
          },
          "description": {
            "type": "string",
            "description": "Description of offence"
          },
          "statuteCode": {
            "$ref": "#/components/schemas/StatuteDto"
          },
          "hoCode": {
            "$ref": "#/components/schemas/HOCodeDto"
          },
          "severityRanking": {
            "type": "string",
            "description": "Severity Ranking",
            "example": "5"
          },
          "activeFlag": {
            "type": "string",
            "description": "Active Y/N",
            "example": "Y"
          },
          "listSequence": {
            "type": "integer",
            "description": "Sequence",
            "format": "int32",
            "example": 1
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry Date if no longer active",
            "format": "date",
            "example": "2021-04-01"
          }
        },
        "description": "Offence"
      },
      "StatuteDto": {
        "required": [
          "activeFlag",
          "code",
          "description",
          "legislatingBodyCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Statute code",
            "example": "RR84"
          },
          "description": {
            "type": "string",
            "description": "Statute code description",
            "example": "Statute RV98"
          },
          "legislatingBodyCode": {
            "type": "string",
            "description": "Legislating Body Code",
            "example": "UK"
          },
          "activeFlag": {
            "type": "string",
            "description": "Active Y/N",
            "example": "Y"
          }
        },
        "description": "Statute",
        "example": "RR84"
      },
      "PrisonMoveCancellation": {
        "required": [
          "reasonCode"
        ],
        "type": "object",
        "properties": {
          "reasonCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The reason code for cancellation of the move.",
            "enum": [
              "ADMI",
              "OCI",
              "TRANS"
            ]
          }
        },
        "description": "The cancellation details."
      },
      "RequestMoveToCellSwap": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "description": "The reason code for the move (from reason code domain CHG_HOUS_RSN) (defaults to ADM)",
            "example": "ADM"
          },
          "dateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date / time of the move (defaults to current)",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Request move offender to cell swap"
      },
      "OffenderBooking": {
        "required": [
          "age",
          "agencyId",
          "alertsCodes",
          "alertsDetails",
          "bookingId",
          "dateOfBirth",
          "firstName",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique, numeric booking id.",
            "format": "int64",
            "example": 1234134
          },
          "bookingNo": {
            "type": "string",
            "description": "Booking number.",
            "example": "A12121"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number).",
            "example": "A1234AA"
          },
          "firstName": {
            "type": "string",
            "description": "Offender first name.",
            "example": "JOHN"
          },
          "middleName": {
            "type": "string",
            "description": "Offender middle name.",
            "example": "ASHLEY"
          },
          "lastName": {
            "type": "string",
            "description": "Offender last name.",
            "example": "SMITH"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Offender date of birth.",
            "format": "date",
            "example": "1980-05-02"
          },
          "age": {
            "type": "integer",
            "description": "Offender's current age.",
            "format": "int32",
            "example": 32
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of agency that offender is associated with.",
            "example": "MDI"
          },
          "assignedLivingUnitId": {
            "type": "integer",
            "description": "Identifier of living unit (e.g. cell) that offender is assigned to.",
            "format": "int64",
            "example": 123123
          },
          "assignedLivingUnitDesc": {
            "type": "string",
            "description": "Description of living unit (e.g. cell) that offender is assigned to.",
            "example": "MDI-1-1-3"
          },
          "facialImageId": {
            "type": "integer",
            "description": "Identifier of facial image of offender.",
            "format": "int64",
            "example": 1241241
          },
          "assignedOfficerUserId": {
            "type": "string",
            "description": "Identifier of officer (key worker) to which offender is assigned.",
            "example": "354543"
          },
          "aliases": {
            "type": "array",
            "description": "List of offender's alias names.",
            "items": {
              "type": "string",
              "description": "List of offender's alias names."
            }
          },
          "categoryCode": {
            "type": "string",
            "description": "The Cat A/B/C/D of the offender",
            "example": "C",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "I",
              "J"
            ]
          },
          "convictedStatus": {
            "type": "string",
            "description": "Convicted Status",
            "example": "Convicted",
            "enum": [
              "Convicted",
              "Remand"
            ]
          },
          "imprisonmentStatus": {
            "type": "string",
            "description": "The imprisonment status of the offender",
            "example": "SENT"
          },
          "alertsCodes": {
            "type": "array",
            "description": "List of offender's current alert types.",
            "items": {
              "type": "string",
              "description": "List of offender's current alert types."
            }
          },
          "alertsDetails": {
            "type": "array",
            "description": "List of offender's current alert codes.",
            "items": {
              "type": "string",
              "description": "List of offender's current alert codes."
            }
          },
          "legalStatus": {
            "type": "string",
            "description": "Legal Status",
            "example": "REMAND",
            "enum": [
              "RECALL",
              "DEAD",
              "INDETERMINATE_SENTENCE",
              "SENTENCED",
              "CONVICTED_UNSENTENCED",
              "CIVIL_PRISONER",
              "IMMIGRATION_DETAINEE",
              "REMAND",
              "UNKNOWN",
              "OTHER"
            ]
          }
        },
        "description": "Offender Booking Summary"
      },
      "CourtHearingDateAmendment": {
        "required": [
          "hearingDateTime"
        ],
        "type": "object",
        "properties": {
          "hearingDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "The amendments for the scheduled court hearing."
      },
      "AddressDto": {
        "required": [
          "noFixedAddress",
          "primary"
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "type": "integer",
            "description": "Address Id",
            "format": "int64",
            "example": 543524
          },
          "addressType": {
            "type": "string",
            "description": "Address Type. Note: Reference domain is ADDR_TYPE",
            "example": "BUS"
          },
          "flat": {
            "type": "string",
            "description": "Flat",
            "example": "3B"
          },
          "premise": {
            "type": "string",
            "description": "Premise",
            "example": "Liverpool Prison"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "Slinn Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "example": "Brincliffe"
          },
          "town": {
            "type": "string",
            "description": "Town/City. Note: Reference domain is CITY",
            "example": "Liverpool"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code",
            "example": "LI1 5TH"
          },
          "county": {
            "type": "string",
            "description": "County. Note: Reference domain is COUNTY",
            "example": "HEREFORD"
          },
          "country": {
            "type": "string",
            "description": "Country. Note: Reference domain is COUNTRY",
            "example": "ENG"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "example": "This is a comment text"
          },
          "primary": {
            "type": "boolean",
            "description": "Primary Address",
            "example": false
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "No Fixed Address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Date Added",
            "format": "date",
            "example": "2005-05-12"
          },
          "endDate": {
            "type": "string",
            "description": "Date ended",
            "format": "date",
            "example": "2021-02-12"
          },
          "phones": {
            "type": "array",
            "description": "The phone number associated with the address",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "addressUsages": {
            "type": "array",
            "description": "The address usages/types",
            "items": {
              "$ref": "#/components/schemas/AddressUsageDto"
            }
          }
        },
        "description": "An Address"
      },
      "AddressUsageDto": {
        "type": "object",
        "properties": {
          "addressId": {
            "type": "integer",
            "description": "Address ID of the associated address",
            "format": "int64",
            "example": 23422313
          },
          "addressUsage": {
            "type": "string",
            "description": "The address usages",
            "example": "HDC"
          },
          "addressUsageDescription": {
            "type": "string",
            "description": "The address usages description",
            "example": "HDC Address"
          },
          "activeFlag": {
            "type": "boolean",
            "description": "Active Flag",
            "example": true
          }
        },
        "description": "An Offender's address usage"
      },
      "Agency": {
        "required": [
          "active",
          "agencyId",
          "agencyType",
          "description"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency identifier.",
            "example": "MDI"
          },
          "description": {
            "type": "string",
            "description": "Agency description.",
            "example": "Moorland (HMP & YOI)"
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the agency",
            "example": "Moorland (HMP & YOI)"
          },
          "agencyType": {
            "type": "string",
            "description": "Agency type.  Reference domain is AGY_LOC_TYPE",
            "example": "INST",
            "enum": [
              "CRC",
              "POLSTN",
              "INST",
              "COMM",
              "APPR",
              "CRT",
              "POLICE",
              "IMDC",
              "TRN",
              "OUT",
              "YOT",
              "SCH",
              "STC",
              "HOST",
              "AIRPORT",
              "HSHOSP",
              "HOSPITAL",
              "PECS",
              "PAR",
              "PNP",
              "PSY"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates the Agency is active",
            "example": true
          },
          "courtType": {
            "type": "string",
            "description": "Court Type.  Reference domain is JURISDICTION",
            "example": "CC",
            "enum": [
              "CACD",
              "CB",
              "CC",
              "CO",
              "DCM",
              "GCM",
              "IMM",
              "MC",
              "OTHER",
              "YC"
            ]
          },
          "deactivationDate": {
            "type": "string",
            "description": "Date agency became inactive",
            "format": "date",
            "example": "2012-01-12"
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses associated with agency",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          },
          "phones": {
            "type": "array",
            "description": "List of phones associated with agency",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "emails": {
            "type": "array",
            "description": "List of emails associated with agency",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          }
        },
        "description": "Agency Details"
      },
      "CourtHearing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The court hearing identifier.",
            "format": "int64",
            "example": 123456789
          },
          "dateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and start time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "location": {
            "$ref": "#/components/schemas/Agency"
          }
        },
        "description": "Represents a court hearing for an offender court case."
      },
      "Email": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email"
          }
        },
        "description": "An Email Address"
      },
      "Telephone": {
        "required": [
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "phoneId": {
            "type": "integer",
            "description": "Phone Id",
            "format": "int64",
            "example": 2234232
          },
          "number": {
            "type": "string",
            "description": "Telephone number",
            "example": "0114 2345678"
          },
          "type": {
            "type": "string",
            "description": "Telephone type",
            "example": "TEL"
          },
          "ext": {
            "type": "string",
            "description": "Telephone extension number",
            "example": "123"
          }
        },
        "description": "Telephone Details"
      },
      "AlertChanges": {
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string",
            "description": "Date the alert became inactive",
            "format": "date",
            "example": "2019-02-13"
          },
          "comment": {
            "type": "string",
            "description": "Alert comment"
          }
        },
        "description": "Alert details"
      },
      "UpdateAttendance": {
        "required": [
          "eventOutcome"
        ],
        "type": "object",
        "properties": {
          "eventOutcome": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Attendance outcome, possible values are the codes in the 'PS_PA_OC' reference domain.",
            "example": "ATT",
            "enum": [
              "ABS",
              "ACCAB",
              "ATT",
              "CANC",
              "NREQ",
              "SUS",
              "UNACAB",
              "REST"
            ]
          },
          "performance": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Possible values are the codes in the 'PERFORMANCE' reference domain, mandatory for eventOutcome 'ATT'.",
            "example": "ACCEPT",
            "enum": [
              "ACCEPT",
              "GOOD",
              "POOR",
              "STANDARD",
              "UNACCEPT"
            ]
          },
          "outcomeComment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Free text comment, maximum length 240 characters.",
            "example": "Turned up very late"
          }
        },
        "description": "Attendance details.  This is used to update the attendance details of an offender"
      },
      "BookingActivity": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "activityId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "set of booking and activity ids"
      },
      "UpdateAttendanceBatch": {
        "required": [
          "bookingActivities",
          "eventOutcome"
        ],
        "type": "object",
        "properties": {
          "eventOutcome": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Attendance outcome, possible values are the codes in the 'PS_PA_OC' reference domain.",
            "example": "ATT",
            "enum": [
              "ABS",
              "ACCAB",
              "ATT",
              "CANC",
              "NREQ",
              "SUS",
              "UNACAB",
              "REST"
            ]
          },
          "performance": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Possible values are the codes in the 'PERFORMANCE' reference domain, mandatory for eventOutcome 'ATT'.",
            "example": "ACCEPT",
            "enum": [
              "ACCEPT",
              "GOOD",
              "POOR",
              "STANDARD",
              "UNACCEPT"
            ]
          },
          "outcomeComment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Free text comment, maximum length 240 characters.",
            "example": "Turned up very late"
          },
          "bookingActivities": {
            "uniqueItems": true,
            "type": "array",
            "description": "set of booking and activity ids",
            "items": {
              "$ref": "#/components/schemas/BookingActivity"
            }
          }
        },
        "description": "Attendance details.  This is used to update the attendance details of multiple bookings"
      },
      "RequestToUpdateAgency": {
        "required": [
          "agencyType",
          "courtType",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Agency description.",
            "example": "Moorland (HMP & YOI)"
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the agency",
            "example": "Moorland (HMP & YOI)"
          },
          "agencyType": {
            "pattern": "^[a-zA-Z0-9]+$",
            "type": "string",
            "description": "Agency type.  Reference domain is AGY_LOC_TYPE",
            "example": "INST",
            "enum": [
              "CRC",
              "POLSTN",
              "INST",
              "COMM",
              "APPR",
              "CRT",
              "POLICE",
              "IMDC",
              "TRN",
              "OUT",
              "YOT",
              "SCH",
              "STC",
              "HOST",
              "AIRPORT",
              "HSHOSP",
              "HOSPITAL",
              "PECS",
              "PAR",
              "PNP",
              "PSY"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates the Agency is active.  Note: if set false, the current date will be the deactivation date",
            "example": true
          },
          "courtType": {
            "pattern": "^[a-zA-Z0-9]+$",
            "type": "string",
            "description": "Court Type.  Reference domain is JURISDICTION",
            "example": "CC",
            "enum": [
              "CACD",
              "CB",
              "CC",
              "CO",
              "DCM",
              "GCM",
              "IMM",
              "MC",
              "OTHER",
              "YC"
            ]
          }
        },
        "description": "Update Agency Request"
      },
      "RequestToUpdateAddress": {
        "required": [
          "addressType",
          "noFixedAddress",
          "premise",
          "primary"
        ],
        "type": "object",
        "properties": {
          "addressType": {
            "type": "string",
            "description": "Address Type. Note: Reference domain is ADDR_TYPE",
            "example": "BUS"
          },
          "flat": {
            "type": "string",
            "description": "Flat",
            "example": "3B"
          },
          "premise": {
            "type": "string",
            "description": "Premise",
            "example": "Liverpool Prison"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "Slinn Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "example": "Brincliffe"
          },
          "town": {
            "type": "string",
            "description": "Town/City. Note: Reference domain is CITY",
            "example": "Liverpool"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code",
            "example": "LI1 5TH"
          },
          "county": {
            "type": "string",
            "description": "County. Note: Reference domain is COUNTY",
            "example": "HEREFORD"
          },
          "country": {
            "type": "string",
            "description": "Country. Note: Reference domain is COUNTRY",
            "example": "ENG"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "example": "This is a comment text"
          },
          "primary": {
            "type": "boolean",
            "description": "Primary Address",
            "example": false
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "No Fixed Address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Date Added",
            "format": "date",
            "example": "2005-05-12"
          },
          "endDate": {
            "type": "string",
            "description": "Date ended",
            "format": "date",
            "example": "2021-02-12"
          }
        },
        "description": "Update Address Request"
      },
      "RequestToUpdatePhone": {
        "required": [
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Telephone number"
          },
          "type": {
            "type": "string",
            "description": "Telephone type"
          },
          "ext": {
            "type": "string",
            "description": "Telephone extension number"
          }
        },
        "description": "Update Phone Request"
      },
      "CreateTransaction": {
        "required": [
          "amount",
          "client_transaction_id",
          "client_unique_ref",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Valid transaction type for the prison_id",
            "example": "CANT",
            "enum": [
              "CANT,REFND,PHONE,MRPR,MTDS,DTDS,CASHD,RELA,RELS"
            ]
          },
          "description": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Description of the Transaction",
            "example": "Canteen Purchase of £16.34"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of transaction in pence, hence 1634 is £16.34",
            "format": "int64",
            "example": 1634
          },
          "client_transaction_id": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Client Transaction Id",
            "example": "CL123212"
          },
          "client_unique_ref": {
            "maxLength": 64,
            "minLength": 0,
            "pattern": "[a-zA-Z0-9-_]+",
            "type": "string",
            "description": "A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed",
            "example": "CLIENT121131-0_11"
          }
        },
        "description": "Transaction Details"
      },
      "Transaction": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of created transaction",
            "example": "6179604-1"
          }
        },
        "description": "Transaction Response"
      },
      "StorePaymentRequest": {
        "required": [
          "amount",
          "client_transaction_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Valid payment type for the prison",
            "example": "ADJ",
            "enum": [
              "A_EARN,ADJ"
            ]
          },
          "description": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Description of the payment",
            "example": "Adjustment"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of the payment in pence, hence 1634 is £16.34",
            "format": "int64",
            "example": 1634
          },
          "client_transaction_id": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Client transaction identifier",
            "example": "CL123212"
          }
        },
        "description": "Transaction Details"
      },
      "PaymentResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message returned from a payment",
            "example": "Payment accepted"
          }
        },
        "description": "Payment Response"
      },
      "CodeDescription": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code"
          },
          "desc": {
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Code Description"
      },
      "Transfer": {
        "type": "object",
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "current_location": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        },
        "description": "Transfer Response"
      },
      "UserDetail": {
        "required": [
          "accountStatus",
          "active",
          "firstName",
          "lastName",
          "lockDate",
          "staffId",
          "username"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "description": "Staff Id",
            "format": "int64",
            "example": 231232
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "DEMO_USER1"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Smith"
          },
          "thumbnailId": {
            "type": "integer",
            "description": "Image Thumbnail Id",
            "format": "int64",
            "example": 2342341224
          },
          "activeCaseLoadId": {
            "type": "string",
            "description": "Current Active Caseload",
            "example": "MDI"
          },
          "accountStatus": {
            "type": "string",
            "description": "Status of the User Account",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "INACT",
              "SUS",
              "CAREER",
              "MAT",
              "SAB",
              "SICK"
            ]
          },
          "lockDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date the user account was locked",
            "example": "2021-07-05T10:35:17"
          },
          "expiryDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date the user account has expired",
            "example": "2021-07-05T10:35:17"
          },
          "lockedFlag": {
            "type": "boolean",
            "description": "The User account is locked",
            "example": false
          },
          "expiredFlag": {
            "type": "boolean",
            "description": "Indicates the user account has expired",
            "example": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicate if the account is active",
            "example": true
          }
        },
        "description": "User Details"
      },
      "UpdatePrisonerDetails": {
        "required": [
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Smith"
          }
        }
      },
      "PrisonDetails": {
        "required": [
          "prison",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "ID of prison",
            "example": "MDI"
          },
          "prison": {
            "type": "string",
            "description": "Name of prison",
            "example": "Moorland (HMP)"
          }
        },
        "description": "Prison details"
      },
      "PrisonerSchedule": {
        "required": [
          "cellLocation",
          "comment",
          "event",
          "eventDescription",
          "eventLocation",
          "eventStatus",
          "eventType",
          "firstName",
          "lastName",
          "locationId",
          "offenderNo",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number)"
          },
          "eventId": {
            "type": "integer",
            "description": "Activity id if any. Used to attend or pay the event",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "Booking id for offender",
            "format": "int64"
          },
          "locationId": {
            "type": "integer",
            "description": "The number which (uniquely) identifies the internal location associated with the Scheduled Event (Prisoner Schedule)",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "Offender first name"
          },
          "lastName": {
            "type": "string",
            "description": "Offender last name"
          },
          "cellLocation": {
            "type": "string",
            "description": "Offender cell"
          },
          "event": {
            "type": "string",
            "description": "Event code"
          },
          "eventType": {
            "type": "string",
            "description": "Event type, e.g. VISIT, APP, PRISON_ACT"
          },
          "eventDescription": {
            "type": "string",
            "description": "Description of event code"
          },
          "eventLocation": {
            "type": "string",
            "description": "Location of the event"
          },
          "eventLocationId": {
            "type": "integer",
            "description": "Id of an internal event location",
            "format": "int64"
          },
          "eventStatus": {
            "type": "string",
            "description": "The event's status. Includes 'CANC', meaning cancelled for 'VISIT'"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Comment"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event starts",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event ends",
            "example": "2021-07-05T10:35:17"
          },
          "eventOutcome": {
            "type": "string",
            "description": "Attendance, possible values are the codes in the 'PS_PA_OC' reference domain"
          },
          "performance": {
            "type": "string",
            "description": "Possible values are the codes in the 'PERFORMANCE' reference domain"
          },
          "outcomeComment": {
            "type": "string",
            "description": "No-pay reason"
          },
          "paid": {
            "type": "boolean",
            "description": "Activity paid flag"
          },
          "payRate": {
            "type": "number",
            "description": "Amount paid per activity session in pounds"
          },
          "excluded": {
            "type": "boolean",
            "description": "Activity excluded flag"
          },
          "timeSlot": {
            "type": "string",
            "description": "Activity time slot",
            "enum": [
              "AM",
              "PM",
              "ED"
            ]
          },
          "locationCode": {
            "type": "string",
            "description": "The code for the activity location"
          },
          "suspended": {
            "type": "boolean",
            "description": "Event scheduled has been suspended"
          }
        },
        "description": "Prisoner Schedule"
      },
      "PrisonerActivitiesCount": {
        "required": [
          "notRecorded",
          "suspended",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "suspended": {
            "type": "integer",
            "format": "int64"
          },
          "notRecorded": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PrisonerDetailSearchCriteria": {
        "type": "object",
        "properties": {
          "offenderNos": {
            "type": "array",
            "description": "List of offender Numbers (NOMS ID)",
            "items": {
              "type": "string",
              "description": "List of offender Numbers (NOMS ID)"
            }
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the offender.",
            "example": "John"
          },
          "gender": {
            "type": "string",
            "description": "Offender's gender code (F - Female, M - Male, NK - Not Known or NS - Not Specified).",
            "example": "F",
            "enum": [
              "M",
              "F",
              "NK",
              "NS",
              "ALL"
            ]
          },
          "middleNames": {
            "type": "string",
            "description": "The middle name(s) of the offender.",
            "example": "James"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the offender.",
            "example": "Smith"
          },
          "location": {
            "type": "string",
            "description": "Offender's location filter (IN, OUT or ALL) - defaults to ALL.",
            "example": "ALL",
            "enum": [
              "IN",
              "OUT",
              "ALL"
            ]
          },
          "pncNumber": {
            "type": "string",
            "description": "The offender's PNC (Police National Computer) number.",
            "example": "123/1231"
          },
          "croNumber": {
            "type": "string",
            "description": "The offender's CRO (Criminal Records Office) number.",
            "example": "12312312"
          },
          "dob": {
            "type": "string",
            "description": "The offender's date of birth. Cannot be used in conjunction with <i>dobFrom</i> or <i>dobTo</i>. Must be specified using YYYY-MM-DD format.",
            "format": "date",
            "example": "2001-01-15"
          },
          "dobFrom": {
            "type": "string",
            "description": "Start date for offender date of birth search. If <i>dobTo</i> is not specified, an implicit <i>dobTo</i> value of <i>dobFrom</i> + 10 years will be applied. If <i>dobTo</i> is specified, it will be adjusted, if necessary, to ensure it is not more than 10 years after <i>dobFrom</i>. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.",
            "format": "date",
            "example": "1999-05-25"
          },
          "dobTo": {
            "type": "string",
            "description": "End date for offender date of birth search. If <i>dobFrom</i> is not specified, an implicit <i>dobFrom</i> value of <i>dobTo</i> - 10 years will be applied. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.",
            "format": "date",
            "example": "2005-12-31"
          },
          "maxYearsRange": {
            "maximum": 10,
            "type": "integer",
            "description": "Max Date Range, applied to <i>dobFrom</i> or <i>dobTo</i>, default is 10, max allowed is 10",
            "format": "int32",
            "example": 10
          },
          "includeAliases": {
            "type": "boolean",
            "description": "If true the result set should include a row for every matched alias.  If the request includes some combination of firstName, lastName and dateOfBirth then this will be a subset of the OFFENDERS records for one or more offenders. Otherwise it will be every OFFENDERS record for each match on the other search criteria. Default is false."
          },
          "partialNameMatch": {
            "type": "boolean",
            "description": "If <i>true</i>, the search will use partial, start-of-name matching of offender names (where provided). For example, if <i>lastName</i> criteria of 'AD' is specified, this will match an offender whose last name is 'ADAMS' but not an offender whose last name is 'HADAD'. This will typically increase the number of matching offenders found. This parameter can be used with any other search processing parameter (e.g. <i>prioritisedMatch</i> or <i>anyMatch</i>).",
            "example": false
          },
          "anyMatch": {
            "type": "boolean",
            "description": "If <i>true</i>, offenders that match any of the specified criteria will be returned. The default search behaviour is to only return offenders that match <i>all</i> of the specified criteria. If the <i>prioritisedMatch</i> parameter is also set <i>true</i>, this parameter will only impact the behaviour of searching using offender name and date of birth criteria.",
            "example": false
          },
          "prioritisedMatch": {
            "type": "boolean",
            "description": "If <i>true</i>, search criteria prioritisation is used and searching/matching will stop as soon as one or more matching offenders are found. The criteria priority is:<br/><br/>1. <i>offenderNo</i><br/> 2. <i>pncNumber</i><br/>3. <i>croNumber</i><br/>4. <i>firstName</i>, <i>lastName</i>, <i>dob</i> <br/>5. <i>dobFrom</i>, <i>dobTo</i><br/><br/>As an example of how this works, if this parameter is set <i>true</i> and an <i>offenderNo</i> is specified and an offender having this offender number is found, searching will stop and that offender will be returned immediately. If no offender matching the specified <i>offenderNo</i> is found, the search will be repeated using the next priority criteria (<i>pncNumber</i>) and so on. Note that offender name and date of birth criteria have the same priority and will be used together to search for matching offenders.",
            "example": false
          }
        },
        "description": "Prisoner Search Criteria"
      },
      "PrisonerDetail": {
        "required": [
          "currentWorkingBirthDate",
          "currentWorkingFirstName",
          "currentWorkingLastName",
          "currentlyInPrison",
          "dateOfBirth",
          "firstName",
          "gender",
          "lastName",
          "offenderNo",
          "sexCode"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The prisoner's unique offender number (aka NOMS Number in the UK).",
            "example": "A0000AA"
          },
          "title": {
            "type": "string",
            "description": "The prisoner's title.",
            "example": "Earl"
          },
          "suffix": {
            "type": "string",
            "description": "The prisoner's name suffix.",
            "example": "Mac"
          },
          "firstName": {
            "type": "string",
            "description": "The prisoner's first name.",
            "example": "Thorfinn"
          },
          "middleNames": {
            "type": "string",
            "description": "The prisoner's middle name(s).",
            "example": "Skull-splitter"
          },
          "lastName": {
            "type": "string",
            "description": "The prisoner's last name.",
            "example": "Torf-Einarsson"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The prisoner's date of birth (in YYYY-MM-DD format).",
            "format": "date",
            "example": "1960-02-29"
          },
          "gender": {
            "type": "string",
            "description": "The prisoner's gender.",
            "example": "Female"
          },
          "sexCode": {
            "type": "string",
            "description": "The prisoner's gender code.",
            "example": "F"
          },
          "nationalities": {
            "type": "string",
            "description": "The prisoner's nationality.",
            "example": "Scottish"
          },
          "currentlyInPrison": {
            "type": "string",
            "description": "Flag (Y or N) to indicate if prisoner is currently in prison.",
            "example": "N"
          },
          "latestBookingId": {
            "type": "integer",
            "description": "ID of prisoner's latest booking.",
            "format": "int64",
            "example": 1
          },
          "latestLocationId": {
            "type": "string",
            "description": "Latest location ID of a prisoner (if in prison).",
            "example": "WRI"
          },
          "latestLocation": {
            "type": "string",
            "description": "Name of the prison where the prisoner resides (if in prison).",
            "example": "Whitemoor (HMP)"
          },
          "internalLocation": {
            "type": "string",
            "description": "Name of the location where the prisoner resides (if in prison)",
            "example": "WRI-B-3-018"
          },
          "pncNumber": {
            "type": "string",
            "description": "The prisoner's PNC (Police National Computer) number.",
            "example": "01/000000A"
          },
          "croNumber": {
            "type": "string",
            "description": "The prisoner's CRO (Criminal Records Office) number.",
            "example": "01/0001/01A"
          },
          "ethnicity": {
            "type": "string",
            "description": "The prisoner's ethnicity.",
            "example": "White: British"
          },
          "ethnicityCode": {
            "type": "string",
            "description": "The prisoner's ethnicity code.",
            "example": "W1"
          },
          "birthCountry": {
            "type": "string",
            "description": "The prisoner's country of birth.",
            "example": "Norway"
          },
          "religion": {
            "type": "string",
            "description": "The prisoner's religion.",
            "example": "Pagan"
          },
          "religionCode": {
            "type": "string",
            "description": "The prisoner's religion code.",
            "example": "PAG"
          },
          "convictedStatus": {
            "type": "string",
            "description": "Status code of prisoner's latest conviction.",
            "example": "Convicted",
            "enum": [
              "Convicted",
              "Remand"
            ]
          },
          "legalStatus": {
            "type": "string",
            "description": "Legal Status",
            "example": "REMAND",
            "enum": [
              "RECALL",
              "DEAD",
              "INDETERMINATE_SENTENCE",
              "SENTENCED",
              "CONVICTED_UNSENTENCED",
              "CIVIL_PRISONER",
              "IMMIGRATION_DETAINEE",
              "REMAND",
              "UNKNOWN",
              "OTHER"
            ]
          },
          "imprisonmentStatus": {
            "type": "string",
            "description": "The prisoner's imprisonment status.",
            "example": "LIFE"
          },
          "imprisonmentStatusDesc": {
            "type": "string",
            "description": "The prisoner's imprisonment status description.",
            "example": "Service Life Imprisonment"
          },
          "receptionDate": {
            "type": "string",
            "description": "Date prisoner was received into the prison.",
            "format": "date",
            "example": "1980-01-01"
          },
          "maritalStatus": {
            "type": "string",
            "description": "The prisoner's marital status.",
            "example": "Single"
          },
          "currentWorkingFirstName": {
            "type": "string",
            "description": "The prisoner's current working first name.",
            "example": "Thorfinn"
          },
          "currentWorkingLastName": {
            "type": "string",
            "description": "The prisoner's current working last name.",
            "example": "Torf-Einarsson"
          },
          "currentWorkingBirthDate": {
            "type": "string",
            "description": "The prisoner's current working date of birth (in YYYY-MM-DD format).",
            "format": "date",
            "example": "1960-02-29"
          }
        },
        "description": "Prisoner Details"
      },
      "RequestForNewBooking": {
        "required": [
          "bookingInTime",
          "movementReasonCode",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "Received Prison ID",
            "example": "MDI"
          },
          "bookingInTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the booking in occurred, if not supplied it will be the current time",
            "example": "2021-07-05T10:35:17"
          },
          "fromLocationId": {
            "type": "string",
            "description": "Where the prisoner has moved from (default OUT)",
            "example": "SHEFCC"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "Reason for in movement (e.g. Unconvicted Remand)",
            "example": "N"
          },
          "youthOffender": {
            "type": "boolean",
            "description": "Is this offender a youth",
            "example": false
          },
          "cellLocation": {
            "type": "string",
            "description": "Cell location where recalled prisoner should be housed, default will be reception",
            "example": "MDI-RECP"
          },
          "imprisonmentStatus": {
            "type": "string",
            "description": "Require imprisonment status (e.g Adult Imprisonment Without Option CJA03)",
            "example": "SENT03"
          }
        },
        "description": "Represents the data required receiving a prisoner under a new booking"
      },
      "RequestToCreate": {
        "required": [
          "dateOfBirth",
          "firstName",
          "gender",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "pncNumber": {
            "maxLength": 20,
            "minLength": 0,
            "pattern": "^^([0-9]{2}|[0-9]{4})/[0-9]+[a-zA-Z]$",
            "type": "string",
            "description": "The offender's PNC (Police National Computer) number.",
            "example": "03/11999M"
          },
          "lastName": {
            "maxLength": 35,
            "minLength": 0,
            "pattern": "^[A-Z|a-z ,.'-]+$",
            "type": "string",
            "description": "The offender's last name.",
            "example": "Mark"
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 0,
            "pattern": "^[A-Z|a-z ,.'-]+$",
            "type": "string",
            "description": "The offender's first name.",
            "example": "John"
          },
          "middleName1": {
            "maxLength": 35,
            "minLength": 0,
            "pattern": "^[A-Z|a-z ,.'-]+$",
            "type": "string",
            "description": "The offender's middle name.",
            "example": "Luke"
          },
          "middleName2": {
            "maxLength": 35,
            "minLength": 0,
            "pattern": "^[A-Z|a-z ,.'-]+$",
            "type": "string",
            "description": "An additional middle name for the offender.",
            "example": "Matthew"
          },
          "title": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "A code representing the offender's title (from TITLE reference domain).",
            "example": "MR",
            "enum": [
              "BR",
              "DAME",
              "DR",
              "FR",
              "IMAM",
              "LADY",
              "LORD",
              "MISS",
              "MR",
              "MRS",
              "MS",
              "RABBI",
              "REV",
              "SIR",
              "SR"
            ]
          },
          "suffix": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "A code representing a suffix to apply to offender's name (from SUFFIX reference domain).",
            "example": "JR",
            "enum": [
              "I",
              "II",
              "III",
              "IV",
              "IX",
              "V",
              "VI",
              "VII",
              "VIII",
              "JR",
              "SR"
            ]
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The offender's date of birth. Must be specified in YYYY-MM-DD format. Range allowed is 16-110 years",
            "format": "date",
            "example": "1970-01-01"
          },
          "gender": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "A code representing the offender's gender (from the SEX reference domain).",
            "example": "M",
            "enum": [
              "M",
              "F",
              "NK",
              "NS",
              "REF"
            ]
          },
          "ethnicity": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "A code representing the offender's ethnicity (from the ETHNICITY reference domain).",
            "example": "W1",
            "enum": [
              "A9",
              "B1",
              "B2",
              "B9",
              "M1",
              "M2",
              "M3",
              "M9",
              "NS",
              "O1",
              "O2",
              "O9",
              "W1",
              "W2",
              "W3",
              "W8",
              "W9"
            ]
          },
          "croNumber": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The offender's CRO (Criminal Records Office) number."
          },
          "booking": {
            "$ref": "#/components/schemas/RequestForNewBooking"
          }
        },
        "description": "Represents the data required for creating a new prisoner"
      },
      "OffenderAdjudicationHearing": {
        "required": [
          "agencyId",
          "hearingId",
          "internalLocationId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string"
          },
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number (UK is NOMS ID)"
          },
          "hearingId": {
            "type": "integer",
            "description": "OIC Hearing ID",
            "format": "int64",
            "example": 1985937
          },
          "hearingType": {
            "type": "string",
            "description": "Hearing Type",
            "example": "Governor's Hearing Adult"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Hearing Time",
            "example": "2021-07-05T10:35:17"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "The internal location id of the hearing",
            "format": "int64",
            "example": 789448
          },
          "internalLocationDescription": {
            "type": "string",
            "description": "The internal location description of the hearing",
            "example": "PVI-RES-MCASU-ADJUD"
          },
          "eventStatus": {
            "type": "string",
            "description": "The status of the hearing, SCH, COMP or EXP",
            "example": "COMP"
          }
        },
        "description": "Represents an adjudication hearing at the offender level."
      },
      "OffenderSentenceDetail": {
        "required": [
          "agencyLocationDesc",
          "agencyLocationId",
          "bookingId",
          "dateOfBirth",
          "firstName",
          "internalLocationDesc",
          "lastName",
          "mostRecentActiveBooking",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id.",
            "format": "int64",
            "example": 12341321
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference",
            "example": "A1000AA"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Smith"
          },
          "agencyLocationId": {
            "type": "string",
            "description": "Agency Id",
            "example": "LEI"
          },
          "mostRecentActiveBooking": {
            "type": "boolean",
            "description": "Is this the most recent active booking",
            "example": true
          },
          "sentenceDetail": {
            "$ref": "#/components/schemas/SentenceCalcDates"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Offender date of birth.",
            "format": "date"
          },
          "agencyLocationDesc": {
            "type": "string",
            "description": "Agency Description"
          },
          "internalLocationDesc": {
            "type": "string",
            "description": "Description of the location within the prison"
          },
          "facialImageId": {
            "type": "integer",
            "description": "Identifier of facial image of offender.",
            "format": "int64"
          }
        },
        "description": "Offender Sentence Detail"
      },
      "HomeDetentionCurfew": {
        "required": [
          "approvalStatusDate"
        ],
        "type": "object",
        "properties": {
          "passed": {
            "type": "boolean",
            "description": "HDC Checks passed flag",
            "example": true
          },
          "checksPassedDate": {
            "type": "string",
            "description": "HDC Checks passed date. ISO-8601 format. YYYY-MM-DD",
            "format": "date",
            "example": "2018-12-31"
          },
          "approvalStatus": {
            "type": "string",
            "description": "Approval status. Will be one of the 'HDC_APPROVE' reference codes",
            "example": "APPROVED"
          },
          "refusedReason": {
            "type": "string",
            "description": "Refused reason. Will be one of the 'HDC_REJ_RSN' reference codes",
            "example": "UNDER_14DAYS"
          },
          "approvalStatusDate": {
            "type": "string",
            "description": "Approval status date. ISO-8601 format. YYYY-MM-DD",
            "format": "date",
            "example": "2018-12-31"
          },
          "bookingId": {
            "type": "integer",
            "description": "Offender booking ID",
            "format": "int64",
            "example": 123
          }
        },
        "description": "Home Detention Curfew information"
      },
      "OffenderKeyDates": {
        "required": [
          "effectiveSentenceEndDate",
          "sentenceLength"
        ],
        "type": "object",
        "properties": {
          "homeDetentionCurfewEligibilityDate": {
            "type": "string",
            "description": "HDCED - date on which offender will be eligible for home detention curfew.",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyTermDate": {
            "type": "string",
            "description": "ETD - early term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "midTermDate": {
            "type": "string",
            "description": "MTD - mid term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "lateTermDate": {
            "type": "string",
            "description": "LTD - late term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "dtoPostRecallReleaseDate": {
            "type": "string",
            "description": "DPRRD - Detention training order post recall release date",
            "format": "date",
            "example": "2020-02-03"
          },
          "automaticReleaseDate": {
            "type": "string",
            "description": "ARD - calculated automatic (unconditional) release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "conditionalReleaseDate": {
            "type": "string",
            "description": "CRD - calculated conditional release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "paroleEligibilityDate": {
            "type": "string",
            "description": "PED - date on which offender is eligible for parole.",
            "format": "date",
            "example": "2020-02-03"
          },
          "nonParoleDate": {
            "type": "string",
            "description": "NPD - calculated non-parole date for offender (relating to the 1991 act).",
            "format": "date",
            "example": "2020-02-03"
          },
          "licenceExpiryDate": {
            "type": "string",
            "description": "LED - date on which offender licence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "postRecallReleaseDate": {
            "type": "string",
            "description": "PRRD - calculated post-recall release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "sentenceExpiryDate": {
            "type": "string",
            "description": "SED - date on which sentence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionExpiryDate": {
            "type": "string",
            "description": "TUSED - top-up supervision expiry date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "ERSED - Early Removal Scheme Eligibility Date",
            "format": "date",
            "example": "2020-02-03"
          },
          "effectiveSentenceEndDate": {
            "type": "string",
            "description": "Effective sentence end date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "sentenceLength": {
            "type": "string",
            "description": "Sentence length in the format 00 years/00 months/00 days.",
            "example": "11/00/00"
          },
          "homeDetentionCurfewApprovedDate": {
            "type": "string",
            "description": "HDCAD - Home Detention Curfew Approved date",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffDate": {
            "type": "string",
            "description": "Tarrif - Tarrif date",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffExpiredRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "Tarrif Expiry date",
            "format": "date",
            "example": "2020-02-03"
          },
          "approvedParoleDate": {
            "type": "string",
            "description": "APD - Approved Parole date",
            "format": "date",
            "example": "2020-02-03"
          },
          "releaseOnTemporaryLicenceDate": {
            "type": "string",
            "description": "ROTL = Release on temporary licence date",
            "format": "date",
            "example": "2020-02-03"
          }
        },
        "description": "Offender Key Dates"
      },
      "RequestToUpdateOffenderDates": {
        "required": [
          "calculationUuid",
          "keyDates",
          "submissionUser"
        ],
        "type": "object",
        "properties": {
          "calculationUuid": {
            "type": "string",
            "description": "UUID of the calculation performed by CRD.",
            "format": "uuid"
          },
          "calculationDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Timestamp when the calculation was performed",
            "example": "2021-07-05T10:35:17"
          },
          "submissionUser": {
            "type": "string",
            "description": "DPS/NOMIS user who submitted the calculated dates."
          },
          "keyDates": {
            "$ref": "#/components/schemas/OffenderKeyDates"
          },
          "comment": {
            "type": "string",
            "description": "Comment to be associated with the sentence calculation, if not set a default comment is used"
          },
          "reason": {
            "type": "string",
            "description": "The reason the sentence calculation was performed, if not set the default reason is used"
          },
          "noDates": {
            "type": "boolean",
            "description": "Is true, when there are no dates to be recorded in NOMIS"
          }
        },
        "description": "Update Offender Dates Request"
      },
      "OffenderCategorise": {
        "required": [
          "bookingId",
          "firstName",
          "lastName",
          "offenderNo",
          "status"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number"
          },
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "Prisoner First Name"
          },
          "lastName": {
            "type": "string",
            "description": "Prisoner Last Name"
          },
          "assessmentDate": {
            "type": "string",
            "description": "Categorisation date if any",
            "format": "date"
          },
          "approvalDate": {
            "type": "string",
            "description": "Date categorisation was approved if any",
            "format": "date"
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number within booking",
            "format": "int32"
          },
          "assessmentTypeId": {
            "type": "integer",
            "description": "assessment type",
            "format": "int64"
          },
          "assessStatus": {
            "type": "string",
            "description": "Categorisation status",
            "enum": [
              "P",
              "A",
              "I"
            ]
          },
          "categoriserFirstName": {
            "type": "string",
            "description": "Categoriser First Name"
          },
          "categoriserLastName": {
            "type": "string",
            "description": "Categoriser Last Name"
          },
          "approverFirstName": {
            "type": "string",
            "description": "Approver First Name if any"
          },
          "approverLastName": {
            "type": "string",
            "description": "Approver Last Name if any"
          },
          "category": {
            "type": "string",
            "description": "Categorisation"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next Review Date - for recategorisations",
            "format": "date"
          },
          "status": {
            "type": "string",
            "description": "Where in the categorisation workflow the prisoner is",
            "enum": [
              "UNCATEGORISED",
              "AWAITING_APPROVAL"
            ]
          }
        },
        "description": "Prisoner with categorisation data"
      },
      "CategorisationDetail": {
        "required": [
          "bookingId",
          "category",
          "committee",
          "placementAgencyId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64"
          },
          "category": {
            "type": "string",
            "description": "Category code"
          },
          "committee": {
            "type": "string",
            "description": "The assessment committee code (reference code in domain 'ASSESS_COMM')"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next review date for recategorisation, defaults to current date + 6 months, if not provided",
            "format": "date"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Initial categorisation comment"
          },
          "placementAgencyId": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The prison to be transferred to"
          }
        },
        "description": "Categorisation details"
      },
      "OffenceToScheduleMappingDto": {
        "required": [
          "offenceCode",
          "schedule"
        ],
        "type": "object",
        "properties": {
          "offenceCode": {
            "type": "string",
            "description": "Offence code",
            "example": "COML025"
          },
          "schedule": {
            "type": "string",
            "description": "Schedule type",
            "example": "SCHEDULE_15",
            "enum": [
              "SCHEDULE_13",
              "SCHEDULE_15",
              "SCHEDULE_15_ATTRACTS_LIFE",
              "SCHEDULE_17A_PART_1",
              "SCHEDULE_17A_PART_2",
              "SCHEDULE_19ZA",
              "PCSC_SDS",
              "PCSC_SDS_PLUS",
              "PCSC_SEC_250"
            ]
          }
        },
        "description": "Maps an offence to a schedule"
      },
      "CreateExternalMovement": {
        "required": [
          "bookingId",
          "directionCode",
          "fromAgencyId",
          "movementReason",
          "movementTime",
          "movementType",
          "toAgencyId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id",
            "format": "int64",
            "example": 1
          },
          "fromAgencyId": {
            "type": "string",
            "description": "Agency location moving from",
            "example": "MDI"
          },
          "toAgencyId": {
            "type": "string",
            "description": "Agency location moving to",
            "example": "OUT"
          },
          "movementTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time of movement",
            "example": "2021-07-05T10:35:17"
          },
          "movementType": {
            "type": "string",
            "description": "Type of movement",
            "example": "TRN"
          },
          "movementReason": {
            "type": "string",
            "description": "Movement reason",
            "example": "SEC"
          },
          "directionCode": {
            "type": "string",
            "description": "Direction code",
            "example": "OUT",
            "enum": [
              "IN",
              "OUT"
            ]
          }
        },
        "description": "Create external movement"
      },
      "OffenderMovement": {
        "required": [
          "bookingId",
          "dateOfBirth",
          "directionCode",
          "firstName",
          "fromAgency",
          "fromAgencyDescription",
          "lastName",
          "movementDate",
          "movementReason",
          "movementReasonDescription",
          "movementTime",
          "movementType",
          "movementTypeDescription",
          "offenderNo",
          "toAgency",
          "toAgencyDescription"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number (UK is NOMS ID)"
          },
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fromAgency": {
            "type": "string",
            "description": "Agency travelling from"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "Description for Agency travelling from"
          },
          "toAgency": {
            "type": "string",
            "description": "Agency travelling to"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "Description for Agency travelling to"
          },
          "movementType": {
            "type": "string",
            "description": "ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)",
            "example": "ADM",
            "enum": [
              "ADM",
              "CRT",
              "REL",
              "TAP",
              "TRN"
            ]
          },
          "movementTypeDescription": {
            "type": "string",
            "description": "Description of the movement type"
          },
          "movementReason": {
            "type": "string",
            "description": "Reason code for the movement"
          },
          "movementReasonDescription": {
            "type": "string",
            "description": "Description of the movement reason"
          },
          "directionCode": {
            "type": "string",
            "description": "IN or OUT"
          },
          "movementTime": {
            "type": "string",
            "description": "Movement time",
            "format": "partial-time"
          },
          "movementDate": {
            "type": "string",
            "description": "Movement date",
            "format": "date"
          }
        },
        "description": "Prisoner Movement"
      },
      "Movement": {
        "required": [
          "createDateTime",
          "directionCode",
          "fromAgency",
          "fromAgencyDescription",
          "movementDate",
          "movementReason",
          "movementReasonCode",
          "movementTime",
          "movementType",
          "movementTypeDescription",
          "offenderNo",
          "toAgency",
          "toAgencyDescription"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number (UK is NOMS ID)"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Timestamp when the external movement record was created",
            "example": "2021-07-05T10:35:17"
          },
          "fromAgency": {
            "type": "string",
            "description": "Agency travelling from"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "Description of the agency travelling from"
          },
          "toAgency": {
            "type": "string",
            "description": "Agency travelling to"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "Description of the agency travelling to"
          },
          "fromCity": {
            "type": "string",
            "description": "City offender was received from"
          },
          "toCity": {
            "type": "string",
            "description": "City offender was sent to"
          },
          "movementType": {
            "type": "string",
            "description": "ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)",
            "example": "ADM",
            "enum": [
              "ADM",
              "CRT",
              "REL",
              "TAP",
              "TRN"
            ]
          },
          "movementTypeDescription": {
            "type": "string",
            "description": "Description of the movement type"
          },
          "directionCode": {
            "type": "string",
            "description": "IN or OUT"
          },
          "movementDate": {
            "type": "string",
            "description": "Movement date",
            "format": "date"
          },
          "movementTime": {
            "type": "string",
            "description": "Movement time",
            "format": "partial-time"
          },
          "movementReason": {
            "type": "string",
            "description": "Description of movement reason"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "Code of movement reason"
          },
          "commentText": {
            "type": "string",
            "description": "Comment"
          }
        },
        "description": "Prisoner Custody Status"
      },
      "KeyWorkerAllocationDetail": {
        "required": [
          "agencyId",
          "assigned",
          "bookingId",
          "firstName",
          "internalLocationDesc",
          "lastName",
          "offenderNo",
          "staffId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender Booking Id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference"
          },
          "firstName": {
            "type": "string",
            "description": "First Name"
          },
          "middleNames": {
            "type": "string",
            "description": "Middle Name(s)"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name"
          },
          "staffId": {
            "type": "integer",
            "description": "The key worker's Staff Id",
            "format": "int64"
          },
          "agencyId": {
            "type": "string",
            "description": "Agency Id"
          },
          "assigned": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time of the allocation",
            "example": "2021-07-05T10:35:17"
          },
          "internalLocationDesc": {
            "type": "string",
            "description": "Description of the location within the prison"
          }
        },
        "description": "Key worker allocation details"
      },
      "OffenderKeyWorker": {
        "required": [
          "active",
          "agencyId",
          "assigned",
          "created",
          "createdBy",
          "offenderNo",
          "staffId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference"
          },
          "staffId": {
            "type": "integer",
            "description": "The key worker's Staff Id",
            "format": "int64"
          },
          "agencyId": {
            "type": "string",
            "description": "Agency Id"
          },
          "assigned": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time allocation was assigned",
            "example": "2021-07-05T10:35:17"
          },
          "expired": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time allocation expired",
            "example": "2021-07-05T10:35:17"
          },
          "userId": {
            "type": "string",
            "description": "Username of user who processed allocation"
          },
          "active": {
            "type": "string",
            "description": "Y"
          },
          "created": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time allocation record was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "Username of user who created allocation record"
          },
          "modified": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time allocation record was last modified",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Username of user who last modified allocation record"
          }
        },
        "description": "Offender Key Worker record representation (to facilitate data migration)"
      },
      "ImageDetail": {
        "required": [
          "active",
          "captureDate",
          "captureDateTime",
          "imageId",
          "imageOrientation",
          "imageType",
          "imageView"
        ],
        "type": "object",
        "properties": {
          "imageId": {
            "type": "integer",
            "description": "Image ID",
            "format": "int64",
            "example": 2461788
          },
          "active": {
            "type": "boolean",
            "description": "An active image means that it is to be used and is current for the prisoner. An inactive image means that it has been superseded by another image or the image is no longer relevant.",
            "example": false
          },
          "captureDate": {
            "type": "string",
            "description": "Date of image capture",
            "format": "date",
            "example": "2008-08-27"
          },
          "captureDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time of image capture",
            "example": "2021-07-05T10:35:17"
          },
          "imageView": {
            "type": "string",
            "description": "Image view information. Actual values extracted 10/05/2023, with the majority of values being FACE. This doesn't appear to be mapped to any REFERENCE_CODE data, even though there is a domain called IMAGE_VIEW.",
            "example": "FACE",
            "enum": [
              "OIC",
              "FACE",
              "TAT",
              "MARK",
              "SCAR",
              "OTH"
            ]
          },
          "imageOrientation": {
            "type": "string",
            "description": "Orientation of the image. Actual values extracted 10/05/2023, with the majority of values being FRONT. This doesn't appear to be mapped to any REFERENCE_CODE data, even though there is a domain called PART_ORIENT.",
            "example": "FRONT",
            "enum": [
              "NECK",
              "KNEE",
              "TORSO",
              "FACE",
              "DAMAGE",
              "INJURY",
              "HAND",
              "HEAD",
              "THIGH",
              "ELBOW",
              "FOOT",
              "INCIDENT",
              "ARM",
              "SHOULDER",
              "ANKLE",
              "FINGER",
              "EAR",
              "TOE",
              "FIGHT",
              "FRONT",
              "LEG",
              "LIP",
              "NOSE"
            ]
          },
          "imageType": {
            "type": "string",
            "description": "Image Type. Actual values extracted 10/05/2023, with the majority of values being OFF_BKG. This doesn't appear to be mapped to any REFERENCE_CODE data.",
            "example": "OFF_BKG",
            "enum": [
              "OFF_IDM",
              "OFF_BKG",
              "OIC"
            ]
          },
          "objectId": {
            "type": "integer",
            "description": "Object ID",
            "format": "int64"
          }
        },
        "description": "Image Detail"
      },
      "TransferTransaction": {
        "required": [
          "amount",
          "client_transaction_id",
          "client_unique_ref",
          "description"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 1,
            "type": "integer",
            "description": "Amount of transaction in pence, hence 1634 is £16.34",
            "format": "int64",
            "example": 1634
          },
          "description": {
            "maxLength": 240,
            "minLength": 1,
            "type": "string",
            "description": "Description of the Transaction",
            "example": "Canteen Purchase of £16.34"
          },
          "client_transaction_id": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "Client Transaction Id",
            "example": "CL123212"
          },
          "client_unique_ref": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9-_]+",
            "type": "string",
            "description": "A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed",
            "example": "CLIENT121131-0_11"
          }
        },
        "description": "Transfer to Savings Transaction"
      },
      "Education": {
        "required": [
          "addresses",
          "bookingId",
          "isSpecialEducation",
          "schedule",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id.",
            "format": "int64",
            "example": 14
          },
          "startDate": {
            "type": "string",
            "description": "Start date of education",
            "format": "date",
            "example": "2018-02-11"
          },
          "endDate": {
            "type": "string",
            "description": "End date of education",
            "format": "date",
            "example": "2020-02-11"
          },
          "studyArea": {
            "type": "string",
            "description": "The area of study for the offender while in school.",
            "example": "General Studies"
          },
          "educationLevel": {
            "type": "string",
            "description": "The highest level attained for the educational period.",
            "example": "Degree Level or Higher"
          },
          "numberOfYears": {
            "type": "integer",
            "description": "The number of educational years completed.",
            "format": "int32",
            "example": 2
          },
          "graduationYear": {
            "type": "string",
            "description": "Year of graduation.",
            "example": "2021"
          },
          "comment": {
            "type": "string",
            "description": "Comment relating to education.",
            "example": "The education is going well"
          },
          "school": {
            "type": "string",
            "description": "Name of school attended.",
            "example": "School of economics"
          },
          "isSpecialEducation": {
            "type": "boolean",
            "description": "Whether this is special education",
            "example": false
          },
          "schedule": {
            "type": "string",
            "description": "The education schedule",
            "example": "Full Time"
          },
          "addresses": {
            "type": "array",
            "description": "A list of addresses associated with the education",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          }
        },
        "description": "Offender Education"
      },
      "CaseNoteUsageRequest": {
        "required": [
          "offenderNos"
        ],
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "description": "Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate",
            "format": "date",
            "example": "2018-11-01"
          },
          "toDate": {
            "type": "string",
            "description": "Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate",
            "format": "date",
            "example": "2018-12-01"
          },
          "numMonths": {
            "type": "integer",
            "description": "Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month",
            "format": "int32",
            "example": 2
          },
          "offenderNos": {
            "type": "array",
            "description": "a list of offender numbers to search.",
            "items": {
              "type": "string",
              "description": "a list of offender numbers to search."
            }
          },
          "staffId": {
            "type": "integer",
            "description": "staff Id to use in search (optional).",
            "format": "int32",
            "example": 223423
          },
          "type": {
            "type": "string",
            "description": "Case note type.",
            "example": "KA"
          },
          "subType": {
            "type": "string",
            "description": "Case note sub-type.",
            "example": "KS"
          },
          "agencyId": {
            "type": "string",
            "description": "Optional agency Id to filter by",
            "example": "MDI"
          }
        },
        "description": "Case Note Type Usage Request"
      },
      "CaseNoteUsage": {
        "required": [
          "caseNoteSubType",
          "caseNoteType",
          "latestCaseNote",
          "numCaseNotes",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender No",
            "example": "ZWE12A"
          },
          "caseNoteType": {
            "type": "string",
            "description": "Case Note Type",
            "example": "KA"
          },
          "caseNoteSubType": {
            "type": "string",
            "description": "Case Note Sub Type",
            "example": "KS"
          },
          "numCaseNotes": {
            "type": "integer",
            "description": "Number of case notes of this type/subtype",
            "format": "int32",
            "example": 5
          },
          "latestCaseNote": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Last case note of this type",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Case Note Type Usage"
      },
      "BookingFromDatePair": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64"
          },
          "fromDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Only case notes occurring on or after this date (in YYYY-MM-DDTHH:MM:SS format) will be considered.",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Booking Id to case note from date pair"
      },
      "CaseNoteTypeSummaryRequest": {
        "required": [
          "bookingFromDateSelection"
        ],
        "type": "object",
        "properties": {
          "bookingFromDateSelection": {
            "type": "array",
            "description": "a list of booking id to from date to search. Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered",
            "items": {
              "$ref": "#/components/schemas/BookingFromDatePair"
            }
          },
          "types": {
            "type": "array",
            "description": "Case note types",
            "items": {
              "type": "string",
              "description": "Case note types"
            }
          }
        },
        "description": "Case Note Type Usage Request by Date grouped by bookings"
      },
      "CaseNoteTypeCount": {
        "required": [
          "bookingId",
          "caseNoteSubType",
          "caseNoteType",
          "numCaseNotes"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64",
            "example": 12345678
          },
          "caseNoteType": {
            "type": "string",
            "description": "Case Note Type",
            "example": "POS"
          },
          "caseNoteSubType": {
            "type": "string",
            "description": "Case Note Sub Type",
            "example": "IEP_ENC"
          },
          "numCaseNotes": {
            "type": "integer",
            "description": "Number of case notes of this type and subtype",
            "format": "int64",
            "example": 5
          }
        },
        "description": "Case Note Type Counts By Booking Id, type and sub type"
      },
      "CaseNoteStaffUsageRequest": {
        "required": [
          "staffIds"
        ],
        "type": "object",
        "properties": {
          "staffIds": {
            "type": "array",
            "description": "a list of staff numbers to search.",
            "items": {
              "type": "integer",
              "description": "a list of staff numbers to search.",
              "format": "int32"
            }
          },
          "numMonths": {
            "type": "integer",
            "description": "Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month",
            "format": "int32"
          },
          "fromDate": {
            "type": "string",
            "description": "Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "description": "Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate",
            "format": "date"
          },
          "type": {
            "type": "string",
            "description": "Case note type."
          },
          "subType": {
            "type": "string",
            "description": "Case note sub-type."
          }
        },
        "description": "Case Note Type Staff Usage Request"
      },
      "CaseNoteStaffUsage": {
        "required": [
          "caseNoteSubType",
          "caseNoteType",
          "latestCaseNote",
          "numCaseNotes",
          "staffId"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "description": "Staff ID",
            "format": "int32",
            "example": 2341232
          },
          "caseNoteType": {
            "type": "string",
            "description": "Case Note Type",
            "example": "KA"
          },
          "caseNoteSubType": {
            "type": "string",
            "description": "Case Note Sub Type",
            "example": "KS"
          },
          "numCaseNotes": {
            "type": "integer",
            "description": "Number of case notes of this type/subtype",
            "format": "int32",
            "example": 5
          },
          "latestCaseNote": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Last case note of this type",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Case Note Type Staff Usage"
      },
      "SchedulePrisonToPrisonMove": {
        "required": [
          "escortType",
          "fromPrisonLocation",
          "scheduledMoveDateTime",
          "toPrisonLocation"
        ],
        "type": "object",
        "properties": {
          "fromPrisonLocation": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The prison (agency code) to be moved from.",
            "example": "LEI"
          },
          "toPrisonLocation": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The prison (agency code) to be moved to.",
            "example": "PVI"
          },
          "escortType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The escort type of the move.",
            "example": "PECS"
          },
          "scheduledMoveDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time of the move in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "The prison to prison move to be scheduled for the offender booking."
      },
      "ScheduledPrisonToPrisonMove": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for the scheduled prison to prison move.",
            "format": "int64",
            "example": 123456789
          },
          "scheduledMoveDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and start time of the move in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "fromPrisonLocation": {
            "$ref": "#/components/schemas/Agency"
          },
          "toPrisonLocation": {
            "$ref": "#/components/schemas/Agency"
          }
        },
        "description": "Represents the data for a scheduled prison to prison move."
      },
      "PrisonToCourtHearing": {
        "required": [
          "courtHearingDateTime",
          "fromPrisonLocation",
          "toCourtLocation"
        ],
        "type": "object",
        "properties": {
          "fromPrisonLocation": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The prison (agency code) where the offender will be moved from.",
            "example": "LEI"
          },
          "toCourtLocation": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The court (agency code) where the offender will moved to.",
            "example": "LEEDCC"
          },
          "courtHearingDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The future date and time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "comments": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Any comments related to the court case.",
            "example": "Restricted access to parking level."
          }
        },
        "description": "The prison to court hearing to be scheduled for the offender booking."
      },
      "CreatePersonalCareNeed": {
        "required": [
          "commentText",
          "problemCode",
          "problemStatus",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "problemCode": {
            "type": "string",
            "description": "Problem Code",
            "example": "ACCU9"
          },
          "problemStatus": {
            "type": "string",
            "description": "Problem Status",
            "example": "ON"
          },
          "commentText": {
            "type": "string",
            "description": "Comment text",
            "example": "Preg, acc under 9mths"
          },
          "startDate": {
            "type": "string",
            "description": "Start Date",
            "format": "date",
            "example": "2010-06-21"
          },
          "endDate": {
            "type": "string",
            "description": "End Date",
            "format": "date",
            "example": "2010-06-21"
          }
        },
        "description": "Personal Care Need"
      },
      "NewAppointment": {
        "required": [
          "appointmentType",
          "locationId",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "appointmentType": {
            "maxLength": 12,
            "minLength": 0,
            "pattern": "\\w*",
            "type": "string",
            "description": "Corresponds to the scheduled event subType"
          },
          "locationId": {
            "type": "integer",
            "description": "Location at which the appointment takes place.",
            "format": "int64"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event starts",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event ends",
            "example": "2021-07-05T10:35:17"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Details of appointment"
          }
        },
        "description": "Creation details for a new appointment"
      },
      "ScheduledEvent": {
        "required": [
          "bookingId",
          "eventClass",
          "eventDate",
          "eventSource",
          "eventStatus",
          "eventSubType",
          "eventSubTypeDesc",
          "eventType",
          "eventTypeDesc"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id",
            "format": "int64"
          },
          "eventClass": {
            "type": "string",
            "description": "Class of event"
          },
          "eventId": {
            "type": "integer",
            "description": "Activity id if any. Used to attend or pay an activity.",
            "format": "int64"
          },
          "eventStatus": {
            "type": "string",
            "description": "Status of event"
          },
          "eventType": {
            "type": "string",
            "description": "Type of scheduled event (as a code)"
          },
          "eventTypeDesc": {
            "type": "string",
            "description": "Description of scheduled event type"
          },
          "eventSubType": {
            "type": "string",
            "description": "Sub type (or reason) of scheduled event (as a code)"
          },
          "eventSubTypeDesc": {
            "type": "string",
            "description": "Description of scheduled event sub type"
          },
          "eventDate": {
            "type": "string",
            "description": "Date on which event occurs",
            "format": "date"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event starts",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event ends",
            "example": "2021-07-05T10:35:17"
          },
          "eventLocation": {
            "type": "string",
            "description": "Location at which event takes place (could be an internal location, agency or external address)."
          },
          "eventLocationId": {
            "type": "integer",
            "description": "Id of an internal event location",
            "format": "int64"
          },
          "agencyId": {
            "type": "string",
            "description": "The agency ID for the booked internal location",
            "example": "WWI"
          },
          "eventSource": {
            "type": "string",
            "description": "Code identifying underlying source of event data"
          },
          "eventSourceCode": {
            "type": "string",
            "description": "Source-specific code for the type or nature of the event"
          },
          "eventSourceDesc": {
            "type": "string",
            "description": "Source-specific description for type or nature of the event"
          },
          "eventOutcome": {
            "type": "string",
            "description": "Activity attendance, possible values are the codes in the 'PS_PA_OC' reference domain."
          },
          "performance": {
            "type": "string",
            "description": "Activity performance, possible values are the codes in the 'PERFORMANCE' reference domain."
          },
          "outcomeComment": {
            "type": "string",
            "description": "Activity no-pay reason."
          },
          "paid": {
            "type": "boolean",
            "description": "Activity paid flag."
          },
          "payRate": {
            "type": "number",
            "description": "Amount paid per activity session in pounds"
          },
          "locationCode": {
            "type": "string",
            "description": "The code for the activity location"
          },
          "createUserId": {
            "type": "string",
            "description": "Staff member who created the appointment"
          }
        },
        "description": "Scheduled Event"
      },
      "CreateAlert": {
        "required": [
          "alertCode",
          "alertDate",
          "alertType",
          "comment"
        ],
        "type": "object",
        "properties": {
          "alertType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Code identifying type of alert",
            "example": "X"
          },
          "alertCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Code identifying the sub type of alert",
            "example": "XEL"
          },
          "comment": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Free Text Comment",
            "example": "has a large poster on cell wall"
          },
          "alertDate": {
            "type": "string",
            "description": "Date the alert became effective",
            "format": "date",
            "example": "2019-02-13"
          }
        },
        "description": "Alert details"
      },
      "AlertCreated": {
        "type": "object",
        "properties": {
          "alertId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InmateBasicDetails": {
        "required": [
          "agencyId",
          "bookingId",
          "bookingNo",
          "dateOfBirth",
          "firstName",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender Booking Id",
            "format": "int64",
            "example": 432132
          },
          "bookingNo": {
            "type": "string",
            "description": "Booking Number"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference",
            "example": "A1234AA"
          },
          "firstName": {
            "type": "string",
            "description": "First Name"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name(s)"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name"
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of agency to which the prisoner is associated."
          },
          "assignedLivingUnitId": {
            "type": "integer",
            "description": "Identifier of living unit (e.g. cell) that prisoner is assigned to.",
            "format": "int64"
          },
          "assignedLivingUnitDesc": {
            "type": "string",
            "description": "Description of living unit (e.g. cell) that offender is assigned to.",
            "example": "MDI-1-1-3"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth of prisoner",
            "format": "date",
            "example": "1970-03-15"
          }
        },
        "description": "Offender basic detail"
      },
      "PersonalCareNeeds": {
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender No"
          },
          "personalCareNeeds": {
            "type": "array",
            "description": "Personal Care Needs",
            "items": {
              "$ref": "#/components/schemas/PersonalCareNeed"
            }
          }
        },
        "description": "Personal Care Needs"
      },
      "PersonalCareCounterDto": {
        "required": [
          "offenderNo",
          "size"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number"
          },
          "size": {
            "type": "integer",
            "description": "Number of health problems records in set time",
            "format": "int32"
          }
        }
      },
      "OffenceDetail": {
        "required": [
          "bookingId",
          "offenceCode",
          "offenceDescription",
          "statuteCode"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Prisoner booking id",
            "format": "int64",
            "example": 1123456
          },
          "offenceDescription": {
            "type": "string",
            "description": "Description of offence"
          },
          "offenceCode": {
            "type": "string",
            "description": "Reference Code",
            "example": "RR84070"
          },
          "statuteCode": {
            "type": "string",
            "description": "Statute code",
            "example": "RR84"
          }
        },
        "description": "Offence Details"
      },
      "CourtEventOutcome": {
        "required": [
          "bookingId",
          "eventId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64",
            "example": 438934
          },
          "eventId": {
            "type": "integer",
            "description": "The court event identifier",
            "format": "int64",
            "example": 201206
          },
          "outcomeReasonCode": {
            "type": "string",
            "description": "The court event outcome reason code",
            "example": "5500"
          }
        },
        "description": "Court event outcome"
      },
      "AppointmentDefaults": {
        "required": [
          "appointmentType",
          "locationId",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "appointmentType": {
            "maxLength": 12,
            "minLength": 0,
            "pattern": "\\w*",
            "type": "string",
            "description": "The scheduled event subType",
            "example": "ACTI"
          },
          "locationId": {
            "type": "integer",
            "description": "The identifier of the appointments' Location. The location must be situated in the requestor's case load.",
            "format": "int64",
            "example": 25
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time at which the appointments start. ISO 8601 Date-time format. startTime must be in the future.",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time at which the appointments end. ISO 8601 Date-time format. endTime, if present, must be later than startTime.",
            "example": "2021-07-05T10:35:17"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "A comment that applies to all the appointments in this request.",
            "example": "Please provide helpful supporting text when it applies to all the appointments specified by this request."
          }
        },
        "description": "Default values to be applied when creating each appointment"
      },
      "AppointmentDetails": {
        "required": [
          "bookingId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The Booking id of the offender for whom the appointment is to be created.",
            "format": "int64",
            "example": 123456
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "A replacement for the default startTime. ISO 8601 date-time format.  This value, when present, must be in the future.",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "A replacement for the default endTime. ISO 8601 date-time format.  This value, when present, must be later than the default startTime, or the startTime in this object if it is defined.",
            "example": "2021-07-05T10:35:17"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The Appointment's details. When present this value replaces the default comment.",
            "example": "Please provide helpful supporting text relevant to this particular appointment when the default comment is not suitable."
          }
        },
        "description": "Detail for creating an appointment for a particular bookingId where values should differ from the defaults"
      },
      "AppointmentsToCreate": {
        "required": [
          "appointmentDefaults",
          "appointments"
        ],
        "type": "object",
        "properties": {
          "appointmentDefaults": {
            "$ref": "#/components/schemas/AppointmentDefaults"
          },
          "appointments": {
            "type": "array",
            "description": "The details for creating each appointment.  A Missing value falls back to the default value if present. Mandatory, but an empty list is accepted.",
            "items": {
              "$ref": "#/components/schemas/AppointmentDetails"
            }
          },
          "repeat": {
            "$ref": "#/components/schemas/Repeat"
          }
        },
        "description": "Details for creating appointments in bulk"
      },
      "Repeat": {
        "required": [
          "count",
          "repeatPeriod"
        ],
        "type": "object",
        "properties": {
          "repeatPeriod": {
            "type": "string",
            "description": "The period at which the appointment should repeat.",
            "example": "WEEKLY",
            "enum": [
              "DAILY",
              "WEEKDAYS",
              "WEEKLY",
              "FORTNIGHTLY",
              "MONTHLY"
            ]
          },
          "count": {
            "minimum": 1,
            "type": "integer",
            "description": "The total number of appointments. Must be greater than 0",
            "format": "int32"
          }
        },
        "description": "If present specifies the number of times to repeat the appointments and the period of the repeat"
      },
      "CreatedAppointmentDetails": {
        "required": [
          "bookingId",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The Booking id of the offender for whom the appointment was created.",
            "format": "int64",
            "example": 123456
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The start time of the appointment.",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The end time of the appointment.",
            "example": "2021-07-05T10:35:17"
          },
          "appointmentEventId": {
            "type": "integer",
            "format": "int64"
          },
          "appointmentType": {
            "type": "string",
            "description": "The scheduled event subType",
            "example": "ACTI"
          },
          "locationId": {
            "type": "integer",
            "description": "The identifier of the appointments' Location. The location must be situated in the requestor's case load.",
            "format": "int64",
            "example": 25
          }
        },
        "description": "The details of an appointment that has just been created"
      },
      "RequestToCreateAgency": {
        "required": [
          "agencyId",
          "agencyType",
          "courtType",
          "description"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "pattern": "^[a-zA-Z0-9]+$",
            "type": "string",
            "description": "Agency identifier.",
            "example": "MDI"
          },
          "description": {
            "type": "string",
            "description": "Agency description.",
            "example": "Moorland (HMP & YOI)"
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the agency",
            "example": "Moorland (HMP & YOI)"
          },
          "agencyType": {
            "pattern": "^[a-zA-Z0-9]+$",
            "type": "string",
            "description": "Agency type.  Reference domain is AGY_LOC_TYPE",
            "example": "INST",
            "enum": [
              "CRC",
              "POLSTN",
              "INST",
              "COMM",
              "APPR",
              "CRT",
              "POLICE",
              "IMDC",
              "TRN",
              "OUT",
              "YOT",
              "SCH",
              "STC",
              "HOST",
              "AIRPORT",
              "HSHOSP",
              "HOSPITAL",
              "PECS",
              "PAR",
              "PNP",
              "PSY"
            ]
          },
          "courtType": {
            "pattern": "^[a-zA-Z0-9]+$",
            "type": "string",
            "description": "Court Type.  Reference domain is JURISDICTION",
            "example": "CC",
            "enum": [
              "CACD",
              "CB",
              "CC",
              "CO",
              "DCM",
              "GCM",
              "IMM",
              "MC",
              "OTHER",
              "YC"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates the Agency is active. Note: if set false, the current date will be the deactivation date",
            "example": true
          }
        },
        "description": "Create Agency Request"
      },
      "VisitSlotCapacity": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "description": "Time",
            "example": "2019-01-01T13:30/16:00"
          },
          "capacity": {
            "type": "integer",
            "description": "Capacity",
            "format": "int64",
            "example": 402
          },
          "max_groups": {
            "type": "integer",
            "description": "Max Groups",
            "format": "int64",
            "example": 999
          },
          "max_adults": {
            "type": "integer",
            "description": "Max Adults",
            "format": "int64",
            "example": 999
          },
          "groups_booked": {
            "type": "integer",
            "description": "Groups Booked",
            "format": "int64",
            "example": 5
          },
          "visitors_booked": {
            "type": "integer",
            "description": "Visitors Booked",
            "format": "int64",
            "example": 6
          },
          "adults_booked": {
            "type": "integer",
            "description": "Adults Booked",
            "format": "int64",
            "example": 7
          }
        },
        "description": "Visit slots Details "
      },
      "VisitSlots": {
        "type": "object",
        "properties": {
          "slots": {
            "type": "array",
            "description": "List of visit slots with capacity",
            "items": {
              "$ref": "#/components/schemas/VisitSlotCapacity"
            }
          }
        },
        "description": "Visit slots with capacity"
      },
      "AccountTransaction": {
        "required": [
          "amount",
          "date",
          "description",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction ID",
            "example": "204564839-3"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "description": {
            "type": "string",
            "description": "Transaction description",
            "example": "Transfer In Regular from caseload PVR"
          },
          "amount": {
            "type": "integer",
            "description": "Amount in pence",
            "format": "int64",
            "example": 12345
          },
          "date": {
            "type": "string",
            "description": "Date of the transaction",
            "format": "date",
            "example": "2016-10-21"
          }
        },
        "description": "Account Transaction"
      },
      "Hold": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Hold via API"
          },
          "amount": {
            "type": "integer",
            "description": "Amount in pence",
            "format": "int64",
            "example": 150
          },
          "hold_number": {
            "type": "integer",
            "description": "Hold Number",
            "format": "int64",
            "example": 6185835
          },
          "client_unique_ref": {
            "type": "string",
            "description": "Client unique reference",
            "example": "jerkincrocus"
          },
          "reference_no": {
            "type": "string",
            "description": "Reference number",
            "example": "TEST0075"
          },
          "entry_date": {
            "type": "string",
            "description": "Entry date",
            "format": "date",
            "example": "2017-06-23"
          },
          "hold_until_date": {
            "type": "string",
            "description": "Hold until date",
            "format": "date",
            "example": "2017-07-07"
          }
        },
        "description": "Hold Response"
      },
      "AccountBalance": {
        "type": "object",
        "properties": {
          "spends": {
            "type": "integer",
            "description": "Spends balance",
            "format": "int64",
            "example": 5678
          },
          "savings": {
            "type": "integer",
            "description": "Saving balance",
            "format": "int64",
            "example": 12344
          },
          "cash": {
            "type": "integer",
            "description": "Cash balance",
            "format": "int64",
            "example": 13565
          }
        },
        "description": "Account Balance"
      },
      "AccountTransactions": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "description": "List of account transactions",
            "items": {
              "$ref": "#/components/schemas/AccountTransaction"
            }
          }
        },
        "description": "Account Transactions"
      },
      "LiveRoll": {
        "type": "object",
        "properties": {
          "noms_ids": {
            "type": "array",
            "description": "Noms Ids",
            "items": {
              "type": "string",
              "description": "Noms Ids"
            }
          }
        },
        "description": "Live Roll"
      },
      "UnavailabilityReason": {
        "type": "object",
        "properties": {
          "external_movement": {
            "type": "boolean",
            "description": "External Movement",
            "example": true
          },
          "existing_visits": {
            "type": "array",
            "description": "Existing Visits",
            "items": {
              "$ref": "#/components/schemas/Visit"
            }
          },
          "out_of_vo": {
            "type": "boolean",
            "description": "Out of Vo",
            "example": true
          },
          "banned": {
            "type": "boolean",
            "description": "Banned",
            "example": true
          }
        },
        "description": "Date Unavailability Reasons"
      },
      "Visit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int64",
            "example": 123456
          },
          "slot": {
            "type": "string",
            "description": "Slot",
            "example": "2019-01-01T13:30/16:00"
          }
        },
        "description": "Visit Details"
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "Available Dates",
            "items": {
              "$ref": "#/components/schemas/ContactPerson"
            }
          }
        },
        "description": "Contact List"
      },
      "ContactPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int64",
            "example": 1234567
          },
          "given_name": {
            "type": "string",
            "description": "Given Name",
            "example": "JENNIFER"
          },
          "middle_names": {
            "type": "string",
            "description": "Middle Names",
            "example": "ESMERALADA JANE"
          },
          "surname": {
            "type": "string",
            "description": "Last Name",
            "example": "HALLIBUT"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of Birth",
            "format": "date",
            "example": "1970-01-01"
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "relationship type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "contact type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "approved visitor": {
            "type": "boolean",
            "description": "Approved Visitor"
          },
          "active": {
            "type": "boolean",
            "description": "Active"
          },
          "restrictions": {
            "type": "array",
            "description": "Restrictions",
            "items": {
              "$ref": "#/components/schemas/VisitRestriction"
            }
          }
        },
        "description": "Contact Person"
      },
      "VisitRestriction": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "effective_date": {
            "type": "string",
            "description": "Effective Date",
            "format": "date",
            "example": "2019-01-01"
          },
          "expiry_date": {
            "type": "string",
            "description": "Expiry Date",
            "format": "date",
            "example": "2019-01-01"
          },
          "comment_text": {
            "type": "string",
            "description": "Comment Text"
          }
        },
        "description": "Visit Restriction"
      },
      "AvailableDates": {
        "type": "object",
        "properties": {
          "dates": {
            "type": "array",
            "description": "Available Dates",
            "items": {
              "type": "string",
              "description": "Available Dates",
              "format": "date"
            }
          }
        },
        "description": "Available Dates"
      },
      "Language": {
        "type": "object",
        "properties": {
          "preferred_spoken": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "interpreter_required": {
            "type": "boolean",
            "description": "whether an interpreter is required",
            "example": true
          }
        },
        "description": "Language"
      },
      "Offender": {
        "type": "object",
        "properties": {
          "given_name": {
            "type": "string",
            "description": "Given Name",
            "example": "JENNIFER"
          },
          "middle_names": {
            "type": "string",
            "description": "Middle Names",
            "example": "ESMERALADA JANE"
          },
          "surname": {
            "type": "string",
            "description": "Last Name",
            "example": "HALLIBUT"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "MR"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of Birth",
            "format": "date",
            "example": "1970-01-01"
          },
          "aliases": {
            "type": "array",
            "description": "List of offender’s aliases",
            "items": {
              "$ref": "#/components/schemas/OffenderAlias"
            }
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "nationalities": {
            "type": "string",
            "description": "Nationalities"
          },
          "religion": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "ethnicity": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "csra": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "convicted": {
            "type": "boolean",
            "description": "indicates whether the offender has been convicted or is on remand",
            "example": true
          },
          "pnc_number": {
            "type": "string",
            "description": "PNC Number",
            "example": "96/346527V"
          },
          "cro_number": {
            "type": "string",
            "description": "CRO Number",
            "example": "ADF567890"
          },
          "imprisonment_status": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "iep_level": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "diet": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "security_category": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        },
        "description": "Offender"
      },
      "OffenderAlias": {
        "type": "object",
        "properties": {
          "given_name": {
            "type": "string",
            "description": "Given Name",
            "example": "JENNIFER"
          },
          "middle_names": {
            "type": "string",
            "description": "Middle Names",
            "example": "ESMERALADA JANE"
          },
          "surname": {
            "type": "string",
            "description": "Surname",
            "example": "HALLIBUT"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of Birth",
            "format": "date",
            "example": "1970-01-01"
          }
        },
        "description": "Offender Alias"
      },
      "Event": {
        "required": [
          "id",
          "noms_id",
          "prison_id",
          "timestamp",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of event",
            "example": "IEP_CHANGED"
          },
          "id": {
            "type": "integer",
            "description": "Unique indentifier for event",
            "format": "int64",
            "example": 21
          },
          "noms_id": {
            "type": "string",
            "description": "Offender Noms Id",
            "example": "A1417AE"
          },
          "prison_id": {
            "type": "string",
            "description": "Prison ID",
            "example": "BMI"
          },
          "timestamp": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time the event occurred",
            "example": "2021-07-05T10:35:17"
          },
          "eventData": {
            "type": "string"
          }
        },
        "description": "Offender Event"
      },
      "Location": {
        "required": [
          "agencyId",
          "description",
          "locationId",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "Location identifier.",
            "format": "int64"
          },
          "locationType": {
            "type": "string",
            "description": "Location type."
          },
          "description": {
            "type": "string",
            "description": "Location description."
          },
          "locationUsage": {
            "type": "string",
            "description": "What events this room can be used for."
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of Agency this location is associated with."
          },
          "parentLocationId": {
            "type": "integer",
            "description": "Identifier of this location's parent location.",
            "format": "int64"
          },
          "currentOccupancy": {
            "type": "integer",
            "description": "Current occupancy of location.",
            "format": "int32"
          },
          "locationPrefix": {
            "type": "string",
            "description": "Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations."
          },
          "operationalCapacity": {
            "type": "integer",
            "description": "Operational capacity of the location.",
            "format": "int32"
          },
          "userDescription": {
            "type": "string",
            "description": "User-friendly location description."
          },
          "internalLocationCode": {
            "type": "string"
          },
          "subLocations": {
            "type": "boolean",
            "description": "Indicates that sub locations exist for this location e.g. landings or cells"
          }
        },
        "description": "Location Details"
      },
      "Image": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Base64 Encoded JPEG data",
            "example": "<base64_encoded_jpeg_data>"
          }
        },
        "description": "Prisoner Photo"
      },
      "Booking": {
        "required": [
          "booking_active",
          "booking_no",
          "booking_started"
        ],
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "booking_no": {
            "type": "string",
            "description": "Bookings",
            "example": "A12313"
          },
          "booking_started": {
            "type": "string",
            "description": "Start Date of Booking",
            "format": "date",
            "example": "2017-02-04"
          },
          "booking_ended": {
            "type": "string",
            "description": "End date of Booking",
            "format": "date",
            "example": "2019-06-04"
          },
          "booking_active": {
            "type": "boolean",
            "description": "Booking Active?",
            "example": true
          },
          "release_date": {
            "type": "string",
            "description": "Release Date",
            "format": "date",
            "example": "2019-02-04"
          },
          "legal_cases": {
            "type": "array",
            "description": "Legal Cases",
            "items": {
              "$ref": "#/components/schemas/LegalCase"
            }
          }
        },
        "description": "Offender Booking"
      },
      "Bookings": {
        "type": "object",
        "properties": {
          "bookings": {
            "type": "array",
            "description": "Bookings",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          }
        },
        "description": "Bookings"
      },
      "Charge": {
        "type": "object",
        "properties": {
          "statute": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "offence": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "most_serious": {
            "type": "boolean",
            "description": "Most Serious Offence ",
            "example": true
          },
          "charge_active": {
            "type": "boolean",
            "description": "Charge Active",
            "example": true
          },
          "severity_ranking": {
            "type": "string",
            "description": "Severity Ranking",
            "example": "100"
          },
          "result": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "disposition": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "convicted": {
            "type": "boolean",
            "description": "Convicted",
            "example": true
          },
          "imprisonment_status": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "band": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        },
        "description": "Offender Charge"
      },
      "LegalCase": {
        "type": "object",
        "properties": {
          "case_info_number": {
            "type": "string",
            "description": "Case Information Number",
            "example": "1254232"
          },
          "case_active": {
            "type": "boolean",
            "description": "Case Active",
            "example": true
          },
          "case_started": {
            "type": "string",
            "description": "Case Started Date",
            "format": "date",
            "example": "2019-01-17"
          },
          "court": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "legal_case_type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "charges": {
            "type": "array",
            "description": "Charges",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          }
        },
        "description": "Legal Case"
      },
      "AlertV1": {
        "required": [
          "alert_date",
          "alert_sub_type",
          "alert_type"
        ],
        "type": "object",
        "properties": {
          "alert_type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "alert_sub_type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "alert_date": {
            "type": "string",
            "description": "Date the alert became effective",
            "format": "date",
            "example": "2019-02-13"
          },
          "expiry_date": {
            "type": "string",
            "description": "Alert Type",
            "format": "date",
            "example": "2019-04-15"
          },
          "status": {
            "type": "string",
            "description": "ACTIVE or INACTIVE (Inactive alerts will have a expiry date of today or earlier",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE,INACTIVE"
            ]
          },
          "comment": {
            "type": "string",
            "description": "Free Text Comment",
            "example": "has a large poster on cell wall"
          }
        },
        "description": "Offender Alert"
      },
      "Alerts": {
        "type": "object",
        "properties": {
          "alerts": {
            "type": "array",
            "description": "Alerts",
            "items": {
              "$ref": "#/components/schemas/AlertV1"
            }
          }
        },
        "description": "Alerts"
      },
      "Events": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "description": "Events",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "description": "Events"
      },
      "ActiveOffender": {
        "type": "object",
        "properties": {
          "found": {
            "type": "boolean",
            "description": "found",
            "example": true
          },
          "offender": {
            "$ref": "#/components/schemas/OffenderId"
          }
        },
        "description": "Active Offender"
      },
      "OffenderId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int64",
            "example": 1234567
          }
        },
        "description": "offender ID"
      },
      "UserRole": {
        "required": [
          "roleCode",
          "roleId",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "Role Id",
            "format": "int64"
          },
          "roleCode": {
            "type": "string",
            "description": "code for this role"
          },
          "roleName": {
            "type": "string",
            "description": "Full text description of the role type"
          },
          "parentRoleCode": {
            "type": "string",
            "description": "role code of the parent role"
          },
          "caseloadId": {
            "type": "string",
            "description": "caseload that this role belongs to, (NOMIS only)"
          }
        },
        "description": "User Role"
      },
      "StaffDetail": {
        "required": [
          "firstName",
          "lastName",
          "staffId",
          "status"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "description": "Unique identifier for staff member.",
            "format": "int64",
            "example": 423142
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name.",
            "example": "JOHN"
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name.",
            "example": "SMITH"
          },
          "status": {
            "type": "string",
            "description": "Status of staff member.",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "thumbnailId": {
            "type": "integer",
            "description": "Identifier for staff member image.",
            "format": "int64",
            "example": 231232
          },
          "gender": {
            "type": "string",
            "description": "Gender of Staff Member",
            "example": "M",
            "enum": [
              "M",
              "F",
              "NK",
              "NS",
              "REF"
            ]
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth of Staff Member",
            "format": "date",
            "example": "1970-01-02"
          }
        },
        "description": "Staff Details"
      },
      "StaffRole": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "A code that defines staff member's role at agency."
          },
          "roleDescription": {
            "type": "string",
            "description": "Description of staff member's role at agency."
          }
        },
        "description": "Staff Role"
      },
      "StaffLocationRole": {
        "required": [
          "agencyId",
          "firstName",
          "fromDate",
          "lastName",
          "position",
          "role",
          "staffId",
          "status"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "description": "Unique identifier for staff member.",
            "format": "int64",
            "example": 242342
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name.",
            "example": "JOHN"
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name.",
            "example": "SMITH"
          },
          "status": {
            "type": "string",
            "description": "Status of staff member.",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "thumbnailId": {
            "type": "integer",
            "description": "Identifier for staff member image.",
            "format": "int64",
            "example": 2342334
          },
          "gender": {
            "type": "string",
            "description": "Gender of Staff Member",
            "example": "M",
            "enum": [
              "M",
              "F",
              "NK",
              "NS",
              "REF"
            ]
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth of Staff Member",
            "format": "date",
            "example": "1970-01-02"
          },
          "agencyId": {
            "type": "string",
            "description": "Agency at which staff member is performing role.",
            "example": "LEI"
          },
          "agencyDescription": {
            "type": "string",
            "description": "Agency description.",
            "example": "HMP Leeds"
          },
          "fromDate": {
            "type": "string",
            "description": "Date from which staff member is actively performing role.",
            "format": "date",
            "example": "2019-02-05"
          },
          "toDate": {
            "type": "string",
            "description": "Date on which staff member stops actively performing role.",
            "format": "date",
            "example": "2019-03-25"
          },
          "position": {
            "type": "string",
            "description": "A code that defines staff member's position at agency.",
            "example": "PRO"
          },
          "positionDescription": {
            "type": "string",
            "description": "Description of staff member's position at agency.",
            "example": "Prison Officer"
          },
          "role": {
            "type": "string",
            "description": "A code that defines staff member's role at agency.",
            "example": "KW"
          },
          "roleDescription": {
            "type": "string",
            "description": "Description of staff member's role at agency.",
            "example": "Key Worker"
          },
          "scheduleType": {
            "type": "string",
            "description": "A code the defines staff member's schedule type.",
            "example": "FT"
          },
          "scheduleTypeDescription": {
            "type": "string",
            "description": "Description of staff member's schedule type.",
            "example": "Full Time"
          },
          "hoursPerWeek": {
            "type": "number",
            "description": "Number of hours worked per week by staff member.",
            "example": 30
          }
        },
        "description": "Staff Details with position and role"
      },
      "PrisonerPrisonSchedule": {
        "required": [
          "comment",
          "event",
          "eventDescription",
          "eventLocation",
          "eventStatus",
          "eventType",
          "firstName",
          "lastName",
          "offenderNo",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number)"
          },
          "firstName": {
            "type": "string",
            "description": "Offender first name"
          },
          "lastName": {
            "type": "string",
            "description": "Offender last name"
          },
          "event": {
            "type": "string",
            "description": "Event code"
          },
          "eventType": {
            "type": "string",
            "description": "Event type, e.g. VISIT, APP, PRISON_ACT"
          },
          "eventDescription": {
            "type": "string",
            "description": "Description of event code"
          },
          "eventLocation": {
            "type": "string",
            "description": "Location of the event"
          },
          "eventStatus": {
            "type": "string",
            "description": "The event's status. Includes 'CANC', meaning cancelled for 'VISIT'"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Comment"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event starts",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event ends",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Prisoner Prison Schedule"
      },
      "ScheduledAppointmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Appointment id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number)"
          },
          "firstName": {
            "type": "string",
            "description": "Offender first name"
          },
          "lastName": {
            "type": "string",
            "description": "Offender last name"
          },
          "date": {
            "type": "string",
            "description": "Date the appointment is scheduled",
            "format": "date"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which appointment starts",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which appointment ends",
            "example": "2021-07-05T10:35:17"
          },
          "appointmentTypeDescription": {
            "type": "string",
            "description": "Description of appointment type"
          },
          "appointmentTypeCode": {
            "type": "string",
            "description": "Appointment code"
          },
          "locationDescription": {
            "type": "string",
            "description": "Description of location the appointment is held"
          },
          "locationId": {
            "type": "integer",
            "description": "Id of location the appointment is held",
            "format": "int64"
          },
          "createUserId": {
            "type": "string",
            "description": "Staff member who created the appointment"
          },
          "agencyId": {
            "type": "string",
            "description": "Agency the appointment belongs to"
          }
        },
        "description": "Scheduled appointment"
      },
      "ReferenceDomain": {
        "required": [
          "applnCode",
          "description",
          "domain",
          "domainStatus",
          "ownerCode"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Reference domain name"
          },
          "description": {
            "type": "string",
            "description": "Reference domain description."
          },
          "domainStatus": {
            "type": "string",
            "description": "Reference domain status."
          },
          "ownerCode": {
            "type": "string",
            "description": "Reference domain owner."
          },
          "applnCode": {
            "type": "string",
            "description": "Application that uses reference domain."
          },
          "parentDomain": {
            "type": "string",
            "description": "Parent domain for reference domain."
          }
        },
        "description": "Reference Domain"
      },
      "PrisonerInformation": {
        "required": [
          "bookingId",
          "communityStatus",
          "dateOfBirth",
          "englishSpeaking",
          "establishmentCode",
          "establishmentName",
          "gender",
          "givenName1",
          "lastName",
          "nomsId"
        ],
        "type": "object",
        "properties": {
          "nomsId": {
            "type": "string",
            "description": "Offender Identifier",
            "example": "A1234AA"
          },
          "establishmentCode": {
            "type": "string",
            "description": "Establishment Code for prisoner",
            "example": "MDI"
          },
          "bookingId": {
            "type": "integer",
            "description": "Booking Id (Internal)",
            "format": "int64",
            "example": 1231232
          },
          "givenName1": {
            "type": "string",
            "description": "Given Name 1",
            "example": "John"
          },
          "givenName2": {
            "type": "string",
            "description": "Given Name 2",
            "example": "Luke"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Smith"
          },
          "requestedName": {
            "type": "string",
            "description": "Requested Name",
            "example": "Dave"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth",
            "format": "date",
            "example": "1970-05-01"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "example": "Male"
          },
          "englishSpeaking": {
            "type": "boolean",
            "description": "Indicated that is English speaking",
            "example": true
          },
          "unitCode1": {
            "type": "string",
            "description": "Level 1 Location Unit Code",
            "example": "A"
          },
          "unitCode2": {
            "type": "string",
            "description": "Level 2 Location Unit Code",
            "example": "2"
          },
          "unitCode3": {
            "type": "string",
            "description": "Level 3 Location Unit Code",
            "example": "003"
          },
          "bookingBeginDate": {
            "type": "string",
            "description": "Date Prisoner booking was initial made",
            "format": "date",
            "example": "2017-05-01"
          },
          "admissionDate": {
            "type": "string",
            "description": "Date of admission into this prison",
            "format": "date",
            "example": "2019-06-01"
          },
          "releaseDate": {
            "type": "string",
            "description": "Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>",
            "format": "date",
            "example": "2021-04-12"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category of this prisoner",
            "example": "C"
          },
          "communityStatus": {
            "type": "string",
            "description": "Status of prisoner in community",
            "example": "ACTIVE IN",
            "enum": [
              "ACTIVE IN",
              "ACTIVE OUT"
            ]
          },
          "legalStatus": {
            "type": "string",
            "description": "Legal Status",
            "example": "REMAND",
            "enum": [
              "RECALL",
              "DEAD",
              "INDETERMINATE_SENTENCE",
              "SENTENCED",
              "CONVICTED_UNSENTENCED",
              "CIVIL_PRISONER",
              "IMMIGRATION_DETAINEE",
              "REMAND",
              "UNKNOWN",
              "OTHER"
            ]
          },
          "establishmentName": {
            "type": "string",
            "description": "Establishment Name for prisoner",
            "example": "Moorland"
          }
        },
        "description": "Prisoner Information"
      },
      "PageString": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      },
      "BookingAdjustment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Adjustment type",
            "enum": [
              "SPECIAL_REMISSION",
              "ADDITIONAL_DAYS_AWARDED",
              "RESTORED_ADDITIONAL_DAYS_AWARDED",
              "UNLAWFULLY_AT_LARGE",
              "LAWFULLY_AT_LARGE",
              "SPECIAL_REMISSION, ADDITIONAL_DAYS_AWARDED, RESTORED_ADDITIONAL_DAYS_AWARDED, UNLAWFULLY_AT_LARGE, LAWFULLY_AT_LARGE"
            ]
          },
          "numberOfDays": {
            "type": "integer",
            "description": "Number of days to adjust",
            "format": "int32",
            "example": 12
          },
          "fromDate": {
            "type": "string",
            "description": "The 'from date' of the adjustment",
            "format": "date",
            "example": "2022-01-01"
          },
          "toDate": {
            "type": "string",
            "description": "The 'to date' of the adjustment",
            "format": "date",
            "example": "2022-01-31"
          },
          "active": {
            "type": "boolean",
            "description": "Boolean flag showing if the adjustment is active",
            "example": true
          }
        },
        "description": "Sentence Adjustment values"
      },
      "CalculableSentenceEnvelope": {
        "required": [
          "bookingAdjustments",
          "bookingId",
          "offenderFinePayments",
          "person",
          "sentenceAdjustments",
          "sentenceAndOffences"
        ],
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking ID",
            "format": "int64"
          },
          "sentenceAndOffences": {
            "type": "array",
            "description": "Sentence and offence details  for a prisoner",
            "items": {
              "$ref": "#/components/schemas/OffenderSentenceAndOffences"
            }
          },
          "sentenceAdjustments": {
            "type": "array",
            "description": "Adjustments at a sentence level",
            "items": {
              "$ref": "#/components/schemas/SentenceAdjustmentValues"
            }
          },
          "bookingAdjustments": {
            "type": "array",
            "description": "Adjustments at a booking level",
            "items": {
              "$ref": "#/components/schemas/BookingAdjustment"
            }
          },
          "offenderFinePayments": {
            "type": "array",
            "description": "List of offender fine payments",
            "items": {
              "$ref": "#/components/schemas/OffenderFinePaymentDto"
            }
          },
          "fixedTermRecallDetails": {
            "$ref": "#/components/schemas/FixedTermRecallDetails"
          },
          "sentenceCalcDates": {
            "$ref": "#/components/schemas/SentenceCalcDates"
          }
        },
        "description": "The active sentence envelope is a combination of the person information, the active booking and calculable sentences at a particular establishment"
      },
      "FixedTermRecallDetails": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "returnToCustodyDate": {
            "type": "string",
            "description": "The date the offender returned to custody",
            "format": "date"
          },
          "recallLength": {
            "type": "integer",
            "description": "The length of the fixed term recall",
            "format": "int32"
          }
        },
        "description": "Details relating to the fixed term recall on a booking"
      },
      "OffenderFinePaymentDto": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The bookingId this payment relates to",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "Payment sequence - a unique identifier a payment on a booking",
            "format": "int32"
          },
          "paymentDate": {
            "type": "string",
            "description": "The date of the payment",
            "format": "date"
          },
          "paymentAmount": {
            "type": "number",
            "description": "The amount of the payment"
          }
        },
        "description": "Offender fine payments"
      },
      "OffenderOffence": {
        "type": "object",
        "properties": {
          "offenderChargeId": {
            "type": "integer",
            "description": "Internal ID for charge relating to offender",
            "format": "int64"
          },
          "offenceStartDate": {
            "type": "string",
            "description": "Offence Start Date",
            "format": "date"
          },
          "offenceEndDate": {
            "type": "string",
            "description": "Offence End Date",
            "format": "date"
          },
          "offenceStatute": {
            "type": "string",
            "description": "Offence statute"
          },
          "offenceCode": {
            "type": "string",
            "description": "Offence Code"
          },
          "offenceDescription": {
            "type": "string",
            "description": "Offence Description"
          },
          "indicators": {
            "type": "array",
            "description": "Offence Indicators",
            "items": {
              "type": "string",
              "description": "Offence Indicators"
            }
          }
        },
        "description": "Offence details related to an offender"
      },
      "OffenderSentenceAndOffences": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The bookingId this sentence and offence(s) relates to",
            "format": "int64"
          },
          "sentenceSequence": {
            "type": "integer",
            "description": "Sentence sequence - a unique identifier a sentence on a booking",
            "format": "int32"
          },
          "consecutiveToSequence": {
            "type": "integer",
            "description": "This sentence is consecutive to this sequence (if populated)",
            "format": "int32"
          },
          "lineSequence": {
            "type": "integer",
            "description": "Sentence line sequence - a number representing the order",
            "format": "int64"
          },
          "caseSequence": {
            "type": "integer",
            "description": "Case sequence - a number representing the order of the case this sentence belongs to",
            "format": "int32"
          },
          "caseReference": {
            "type": "string",
            "description": "Case reference - a string identifying the case this sentence belongs to"
          },
          "courtDescription": {
            "type": "string",
            "description": "Court description - a string describing the the court that the case was heard at"
          },
          "sentenceStatus": {
            "type": "string",
            "description": "This sentence status: A = Active I = Inactive"
          },
          "sentenceCategory": {
            "type": "string",
            "description": "The sentence category e.g. 2003 or Licence"
          },
          "sentenceCalculationType": {
            "type": "string",
            "description": "The sentence calculation type e.g. R or ADIMP_ORA"
          },
          "sentenceTypeDescription": {
            "type": "string",
            "description": "The sentence type description e.g. Standard Determinate Sentence"
          },
          "sentenceDate": {
            "type": "string",
            "description": "The sentenced date for this sentence (aka court date)",
            "format": "date"
          },
          "sentenceStartDate": {
            "type": "string",
            "description": "Date that this sentence did or will start",
            "format": "date"
          },
          "sentenceEndDate": {
            "type": "string",
            "description": "Date that this sentence would expire",
            "format": "date"
          },
          "terms": {
            "type": "array",
            "description": "The sentence terms of the sentence",
            "items": {
              "$ref": "#/components/schemas/OffenderSentenceTerm"
            }
          },
          "offences": {
            "type": "array",
            "description": "The offences related to this sentence (will usually only have one offence per sentence)",
            "items": {
              "$ref": "#/components/schemas/OffenderOffence"
            }
          },
          "fineAmount": {
            "type": "number",
            "description": "The amount of fine related to the sentence and offence",
            "format": "double"
          }
        },
        "description": "Offender sentence and offence details"
      },
      "OffenderSentenceTerm": {
        "type": "object",
        "properties": {
          "years": {
            "type": "integer",
            "description": "The term duration - years",
            "format": "int32",
            "example": 1
          },
          "months": {
            "type": "integer",
            "description": "The term duration - months",
            "format": "int32",
            "example": 2
          },
          "weeks": {
            "type": "integer",
            "description": "The term duration - weeks",
            "format": "int32",
            "example": 3
          },
          "days": {
            "type": "integer",
            "description": "The term duration - days",
            "format": "int32",
            "example": 4
          },
          "code": {
            "type": "string",
            "description": "The sentence term code, indicating if this is the term of imprisonment or license"
          }
        },
        "description": "Offender sentence term"
      },
      "PageCalculableSentenceEnvelope": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalculableSentenceEnvelope"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Person": {
        "required": [
          "alerts",
          "dateOfBirth",
          "lastName",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner Identifier",
            "example": "A1234AA"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "lastName": {
            "type": "string"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          }
        },
        "description": "The identifiers of a person necessary for a calculation"
      },
      "SentenceAdjustmentValues": {
        "type": "object",
        "properties": {
          "sentenceSequence": {
            "type": "integer",
            "description": "Sentence sequence",
            "format": "int32",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "Adjustment type",
            "enum": [
              "RECALL_SENTENCE_REMAND",
              "TAGGED_BAIL",
              "RECALL_SENTENCE_TAGGED_BAIL",
              "REMAND",
              "UNUSED_REMAND"
            ]
          },
          "numberOfDays": {
            "type": "integer",
            "description": "Number of days to adjust",
            "format": "int32",
            "example": 12
          },
          "fromDate": {
            "type": "string",
            "description": "The 'from date' of the adjustment",
            "format": "date",
            "example": "2022-01-01"
          },
          "toDate": {
            "type": "string",
            "description": "The 'to date' of the adjustment",
            "format": "date",
            "example": "2022-01-31"
          },
          "active": {
            "type": "boolean",
            "description": "Boolean flag showing if the adjustment is active",
            "example": true
          }
        },
        "description": "Sentence Adjustment values"
      },
      "PersonIdentifier": {
        "required": [
          "identifierType",
          "identifierValue"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The identifier type"
          },
          "identifierValue": {
            "type": "string",
            "description": "The most recent identifier value of that type."
          }
        },
        "description": "PersonIdentifier"
      },
      "OffenderTransactionHistoryDto": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "offenderId": {
            "type": "integer",
            "description": "Offender Id",
            "format": "int64",
            "example": 1
          },
          "transactionId": {
            "type": "integer",
            "description": "Transaction Id",
            "format": "int64",
            "example": 1
          },
          "transactionEntrySequence": {
            "type": "integer",
            "description": "Transaction Sequence",
            "format": "int64",
            "example": 1
          },
          "entryDate": {
            "type": "string",
            "description": "Transaction Date",
            "format": "date",
            "example": "2020-12-11"
          },
          "transactionType": {
            "type": "string",
            "description": "Transaction Type"
          },
          "entryDescription": {
            "type": "string",
            "description": "Transaction Description",
            "example": "some textual description here"
          },
          "referenceNumber": {
            "type": "string",
            "description": "Transaction Reference Number"
          },
          "currency": {
            "type": "string",
            "description": "Currency of these amounts.",
            "example": "GBP"
          },
          "penceAmount": {
            "type": "integer",
            "description": "Transaction Amount",
            "format": "int64",
            "example": 60
          },
          "accountType": {
            "type": "string",
            "description": "Offender Sub Account",
            "example": "savings,spends,cash"
          },
          "postingType": {
            "type": "string",
            "description": "Posting type. Denotes the direction of money moving in or out of the account",
            "example": "CR,DR"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number",
            "example": "G6123VU"
          },
          "agencyId": {
            "type": "string",
            "description": "The place the transaction took place",
            "example": "MDI"
          },
          "relatedOffenderTransactions": {
            "type": "array",
            "description": "List of related transaction details",
            "items": {
              "$ref": "#/components/schemas/RelatedTransactionDetails"
            }
          },
          "currentBalance": {
            "type": "integer",
            "description": "Balance at a point in time",
            "format": "int64"
          },
          "holdingCleared": {
            "type": "boolean",
            "description": "Indicates that the amount has been cleared from holding"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Creation date time",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Offender transaction details"
      },
      "RelatedTransactionDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Transaction details id",
            "format": "int64",
            "example": 1
          },
          "transactionId": {
            "type": "integer",
            "description": "Transaction Id",
            "format": "int64",
            "example": 1
          },
          "transactionEntrySequence": {
            "type": "integer",
            "description": "Transaction Sequence",
            "format": "int64",
            "example": 1
          },
          "calendarDate": {
            "type": "string",
            "description": "Calendar date the payment was processed",
            "format": "date",
            "example": "2020-10-12"
          },
          "payTypeCode": {
            "type": "string",
            "description": "Pay type code",
            "example": "UNEMPLOYED,SESSION,LTSICK,STSICK,MATERNAL,RETIRED,HOSPITAL"
          },
          "eventId": {
            "type": "integer",
            "description": "Event id the payment is associated with",
            "format": "int64",
            "example": 1
          },
          "payAmount": {
            "type": "integer",
            "description": "Payment amount in pence",
            "format": "int64",
            "example": 100
          },
          "pieceWork": {
            "type": "integer",
            "description": "Piece work amount in pence",
            "format": "int64",
            "example": 250
          },
          "bonusPay": {
            "type": "integer",
            "description": "Bonus payment in pence",
            "format": "int64",
            "example": 55
          },
          "currentBalance": {
            "type": "integer",
            "description": "Balance at a point in time",
            "format": "int64"
          },
          "paymentDescription": {
            "type": "string",
            "description": "Reason for payment",
            "example": "Cleaner HB1 PM"
          }
        },
        "description": "Offender transaction drill down details"
      },
      "PrisonPeriod": {
        "required": [
          "bookNumber",
          "bookingId",
          "entryDate",
          "movementDates",
          "prisons",
          "transfers"
        ],
        "type": "object",
        "properties": {
          "bookNumber": {
            "type": "string",
            "description": "The book number for this booking"
          },
          "bookingId": {
            "type": "integer",
            "description": "The ID of this booking",
            "format": "int64"
          },
          "entryDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date they first entered prison in this booking",
            "example": "2021-07-05T10:35:17"
          },
          "releaseDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date they were last released from prison in this booking if they have been released",
            "example": "2021-07-05T10:35:17"
          },
          "movementDates": {
            "type": "array",
            "description": "List of significant period of time when in prison. The time between these periods means they person was out of prison (but not including court)",
            "items": {
              "$ref": "#/components/schemas/SignificantMovement"
            }
          },
          "transfers": {
            "type": "array",
            "description": "List of transfers during this period. Will be empty if there have been no transfers. Transfer via court or temporary absence are also included",
            "items": {
              "$ref": "#/components/schemas/TransferDetail"
            }
          },
          "prisons": {
            "type": "array",
            "description": "List of prisons the person was detained during this booking period",
            "items": {
              "type": "string",
              "description": "List of prisons the person was detained during this booking period"
            }
          }
        },
        "description": "A period of time in prison"
      },
      "PrisonerInPrisonSummary": {
        "required": [
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner Identifier",
            "example": "A1234AA"
          },
          "prisonPeriod": {
            "type": "array",
            "description": "List of date when prisoner was in prison",
            "items": {
              "$ref": "#/components/schemas/PrisonPeriod"
            }
          }
        },
        "description": "Prisoners time in prison summary"
      },
      "SignificantMovement": {
        "type": "object",
        "properties": {
          "reasonInToPrison": {
            "type": "string",
            "description": "Reason for movement into prison",
            "example": "Unconvicted Remand"
          },
          "dateInToPrison": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "inwardType": {
            "type": "string",
            "description": "Type of movement into prison",
            "enum": [
              "ADM",
              "TAP"
            ]
          },
          "reasonOutOfPrison": {
            "type": "string",
            "description": "Reason for movement out from prison",
            "example": "Conditional Release (CJA91) -SH Term>1YR"
          },
          "dateOutOfPrison": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date this sub-period ended - if it has ended",
            "example": "2021-07-05T10:35:17"
          },
          "outwardType": {
            "type": "string",
            "description": "Type of movement out of prison",
            "enum": [
              "REL",
              "TAP"
            ]
          },
          "admittedIntoPrisonId": {
            "type": "string",
            "description": "The initial prison they entered during this period",
            "example": "MDI"
          },
          "releaseFromPrisonId": {
            "type": "string",
            "description": "The final prison they left during this period - if this period has ended",
            "example": "MDI"
          }
        },
        "description": "A movement IN and OUT range"
      },
      "TransferDetail": {
        "required": [
          "toPrisonId"
        ],
        "type": "object",
        "properties": {
          "dateOutOfPrison": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date prisoner left the original prison",
            "example": "2021-07-05T10:35:17"
          },
          "dateInToPrison": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date prisoner entered the new prison. Can be absent if they have not arrived at the prison yet",
            "example": "2021-07-05T10:35:17"
          },
          "transferReason": {
            "type": "string",
            "description": "Reason for the transfer",
            "example": "Compassionate Transfer"
          },
          "fromPrisonId": {
            "type": "string",
            "description": "The prison they were transferred from",
            "example": "WWI"
          },
          "toPrisonId": {
            "type": "string",
            "description": "The prison they were transferred to. Can be absent if they have not arrived at the prison yet",
            "example": "BXI"
          }
        },
        "description": "A movement that is a transfer"
      },
      "OffenderRestriction": {
        "required": [
          "active",
          "restrictionId",
          "restrictionType",
          "restrictionTypeDescription",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "restrictionId": {
            "type": "integer",
            "description": "restriction id",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Restriction comment text"
          },
          "restrictionType": {
            "type": "string",
            "description": "code of restriction type"
          },
          "restrictionTypeDescription": {
            "type": "string",
            "description": "description of restriction type"
          },
          "startDate": {
            "type": "string",
            "description": "Date from which the restrictions applies",
            "format": "date",
            "example": "1980-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date restriction applies to, or indefinitely if null",
            "format": "date",
            "example": "1980-01-01"
          },
          "active": {
            "type": "boolean",
            "description": "true if restriction is within the start date and optional expiry date range"
          }
        },
        "description": "Offender restriction"
      },
      "OffenderRestrictions": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id for offender",
            "format": "int64"
          },
          "offenderRestrictions": {
            "type": "array",
            "description": "Offender restrictions",
            "items": {
              "$ref": "#/components/schemas/OffenderRestriction"
            }
          }
        },
        "description": "Offender restrictions"
      },
      "MilitaryRecord": {
        "required": [
          "militaryBranchCode",
          "militaryBranchDescription",
          "selectiveServicesFlag",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "warZoneCode": {
            "type": "string",
            "description": "War zone code",
            "example": "AFG"
          },
          "warZoneDescription": {
            "type": "string",
            "description": "War zone description",
            "example": "Afghanistan"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date",
            "example": "2000-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "format": "date",
            "example": "2020-10-17"
          },
          "militaryDischargeCode": {
            "type": "string",
            "description": "Military discharge code",
            "example": "DIS"
          },
          "militaryDischargeDescription": {
            "type": "string",
            "description": "Military discharge description",
            "example": "Dishonourable"
          },
          "militaryBranchCode": {
            "type": "string",
            "description": "Military branch code",
            "example": "ARM"
          },
          "militaryBranchDescription": {
            "type": "string",
            "description": "Military branch description",
            "example": "Army"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Some description"
          },
          "unitNumber": {
            "type": "string",
            "description": "The unit number",
            "example": "255 TACP Battery"
          },
          "enlistmentLocation": {
            "type": "string",
            "description": "Enlistment location",
            "example": "Sheffield"
          },
          "dischargeLocation": {
            "type": "string",
            "description": "Discharge location",
            "example": "Manchester"
          },
          "selectiveServicesFlag": {
            "type": "boolean",
            "description": "Selective services flag",
            "example": false
          },
          "militaryRankCode": {
            "type": "string",
            "description": "Military rank code",
            "example": "LCPL_RMA"
          },
          "militaryRankDescription": {
            "type": "string",
            "description": "Military rank description",
            "example": "Lance Corporal  (Royal Marines)"
          },
          "serviceNumber": {
            "type": "string",
            "description": "Service number",
            "example": "25232301"
          },
          "disciplinaryActionCode": {
            "type": "string",
            "description": "Disciplinary action code",
            "example": "CM"
          },
          "disciplinaryActionDescription": {
            "type": "string",
            "description": "Disciplinary action description",
            "example": "Court Martial"
          }
        },
        "description": "Military Record"
      },
      "MilitaryRecords": {
        "type": "object",
        "properties": {
          "militaryRecords": {
            "type": "array",
            "description": "Military Records",
            "items": {
              "$ref": "#/components/schemas/MilitaryRecord"
            }
          }
        },
        "description": "Military Records"
      },
      "IncidentCase": {
        "required": [
          "incidentCaseId",
          "incidentDate",
          "incidentStatus",
          "incidentTime",
          "incidentTitle",
          "incidentType",
          "reportDate",
          "reportTime",
          "reportedStaffId"
        ],
        "type": "object",
        "properties": {
          "incidentCaseId": {
            "type": "integer",
            "description": "Incident Case ID",
            "format": "int64",
            "example": 2131231
          },
          "incidentTitle": {
            "type": "string",
            "description": "Title of the case",
            "example": "Assault on staff member"
          },
          "incidentType": {
            "type": "string",
            "description": "Type of incident",
            "example": "ASSAULT",
            "enum": [
              "MISC",
              "ASSAULT",
              "FINDS1",
              "DISORDER",
              "KEY_LOCK",
              "ROOF_CLIMB",
              "DEATH_NI",
              "REL_ERROR",
              "FINDS",
              "FIRE",
              "DAMAGE",
              "FOOD_REF",
              "BOMB",
              "ATT_ESC_E",
              "ESCAPE_ESC",
              "DRONE",
              "TRF3",
              "ATT_ESCAPE",
              "BREACH",
              "ESCAPE_EST",
              "FIND",
              "TRF2",
              "FIND1",
              "BARRICADE",
              "HOSTAGE",
              "SELF_HARM",
              "DRUGS",
              "TOOL_LOSS",
              "RADIO_COMP",
              "FIREARM_ETC",
              "CON_INDISC",
              "KEY_LOCKNEW",
              "CLOSE_DOWN",
              "DEATH",
              "ABSCOND",
              "TRF",
              "MOBILES"
            ]
          },
          "incidentDetails": {
            "type": "string",
            "description": "Details about the case",
            "example": "There was a big fight"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date the incident took place",
            "format": "date",
            "example": "2018-02-10"
          },
          "incidentTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Time when incident occurred",
            "example": "2021-07-05T10:35:17"
          },
          "reportedStaffId": {
            "type": "integer",
            "description": "Staff ID who created report",
            "format": "int64",
            "example": 2131231
          },
          "reportDate": {
            "type": "string",
            "description": "Date when incident reported",
            "format": "date",
            "example": "2018-02-11"
          },
          "reportTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Time incident reported",
            "example": "2021-07-05T10:35:17"
          },
          "incidentStatus": {
            "type": "string",
            "description": "Current Status of Incident.  Note:\nAWAN = Awaiting Analysis\nINAN = In Analysis\nINREQ = Information Required\nINAME =Information Amended\nCLOSE = Closed\nPIU = Post Incident Update\nIUP = Incident Updated\nDUP = Duplicate (Created In Error)",
            "example": "CLOSE",
            "enum": [
              "CLOSE",
              "DUP",
              "AWAN",
              "INAN",
              "INREQ",
              "INAME",
              "PIU",
              "IUP"
            ]
          },
          "agencyId": {
            "type": "string",
            "description": "Agency where incident happened",
            "example": "MDI"
          },
          "responseLockedFlag": {
            "type": "boolean",
            "description": "Is the response completed?",
            "example": true
          },
          "responses": {
            "uniqueItems": true,
            "type": "array",
            "description": "Question And Answer Responses",
            "items": {
              "$ref": "#/components/schemas/IncidentResponse"
            }
          },
          "parties": {
            "uniqueItems": true,
            "type": "array",
            "description": "Parties Involved in case",
            "items": {
              "$ref": "#/components/schemas/IncidentParty"
            }
          }
        },
        "description": "Incident Case"
      },
      "IncidentParty": {
        "required": [
          "bookingId",
          "commentText",
          "incidentCaseId",
          "outcomeCode",
          "participationRole",
          "partySeq"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking Id of offender involved",
            "format": "int64",
            "example": 1241232
          },
          "partySeq": {
            "type": "integer",
            "description": "Sequence or each party member",
            "format": "int64",
            "example": 1
          },
          "staffId": {
            "type": "integer",
            "description": "Staff Member ID (optional)",
            "format": "int64",
            "example": 1534133
          },
          "personId": {
            "type": "integer",
            "description": "Person (non-staff) ID (optional)",
            "format": "int64",
            "example": 544233
          },
          "participationRole": {
            "type": "string",
            "description": "Role in the Incident",
            "example": "ASSIAL"
          },
          "outcomeCode": {
            "type": "string",
            "description": "Outcome Code",
            "example": "POR"
          },
          "commentText": {
            "type": "string",
            "description": "Additional Comments",
            "example": "Some additional Information"
          },
          "incidentCaseId": {
            "type": "integer",
            "description": "Incident Case ID",
            "format": "int64",
            "example": 12431243
          }
        },
        "description": "Incident Party"
      },
      "IncidentResponse": {
        "required": [
          "answer",
          "question",
          "questionSeq",
          "questionnaireAnsId",
          "questionnaireQueId"
        ],
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "The Question",
            "example": "Was it a violent assault?"
          },
          "answer": {
            "type": "string",
            "description": "The Answer to the Question",
            "example": "YES"
          },
          "questionSeq": {
            "type": "integer",
            "description": "Sequence of presented Questions",
            "format": "int32",
            "example": 2131231
          },
          "questionnaireQueId": {
            "type": "integer",
            "description": "ID for Questionnaire Question",
            "format": "int64",
            "example": 983431
          },
          "questionnaireAnsId": {
            "type": "integer",
            "description": "ID for Questionnaire Answer",
            "format": "int64",
            "example": 983434
          },
          "responseDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date response was recorded",
            "example": "2021-07-05T10:35:17"
          },
          "responseCommentText": {
            "type": "string",
            "description": "Additional comments for the response to the question",
            "example": "The knife was in his pocket"
          },
          "recordStaffId": {
            "type": "integer",
            "description": "Staff Id recording comment",
            "format": "int64",
            "example": 123123
          }
        },
        "description": "Incident Reponses"
      },
      "HousingLocation": {
        "required": [
          "code",
          "description",
          "level"
        ],
        "type": "object",
        "properties": {
          "level": {
            "maximum": 4,
            "minimum": 1,
            "type": "integer",
            "description": "The level (starting from 1) of the individual location. The highest number level will be the cell.",
            "format": "int32",
            "example": 1
          },
          "code": {
            "type": "string",
            "description": "The code for the location e.g. 010 for a cell, A for a wing",
            "example": "010"
          },
          "description": {
            "type": "string",
            "description": "Description of the location, either from the user description if set or reference code description and code",
            "example": "Wing A"
          },
          "type": {
            "type": "string",
            "description": "The type of the location - from LIVING_UNIT reference code",
            "example": "WING",
            "enum": [
              "BED",
              "BLK",
              "CB",
              "CELL",
              "LAND",
              "SPUR",
              "TIER",
              "WING"
            ]
          }
        },
        "description": "Previous permanent housing levels at the same prison without moving to a different prison inbetween"
      },
      "OffenderLocation": {
        "type": "object",
        "properties": {
          "levels": {
            "type": "array",
            "description": "Current housing levels or null if not currently in prison",
            "items": {
              "$ref": "#/components/schemas/HousingLocation"
            }
          },
          "lastPermanentLevels": {
            "type": "array",
            "description": "Previous permanent housing levels at the same prison without moving to a different prison inbetween",
            "items": {
              "$ref": "#/components/schemas/HousingLocation"
            }
          }
        }
      },
      "OffenderDamageObligationModel": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identifier of damage obligation",
            "format": "int64",
            "example": 1
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number",
            "example": "G4346UT"
          },
          "referenceNumber": {
            "type": "string",
            "description": "Reference number",
            "example": "841177/1, A841821/1, 842371"
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The start date time when the damage obligation started",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The end date time when the damage obligation ended",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison the damages occurred",
            "example": "MDI"
          },
          "amountToPay": {
            "type": "number",
            "description": "Original amount to pay",
            "example": 50.0
          },
          "amountPaid": {
            "type": "number",
            "description": "Amount paid",
            "example": 10.0
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "ACTIVE"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "example": "Damages to canteen furniture"
          },
          "currency": {
            "type": "string",
            "description": "Currency of these amounts.",
            "example": "GBP"
          }
        },
        "description": "Damage obligation for an offender"
      },
      "OffenderDamageObligationResponse": {
        "type": "object",
        "properties": {
          "damageObligations": {
            "type": "array",
            "description": "List of offender damage obligations",
            "items": {
              "$ref": "#/components/schemas/OffenderDamageObligationModel"
            }
          }
        },
        "description": "Offender damage obligation response"
      },
      "OffenderContact": {
        "required": [
          "active",
          "approvedVisitor",
          "bookingId",
          "contactType",
          "emergencyContact",
          "firstName",
          "lastName",
          "nextOfKin",
          "relationshipCode"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "description": "Last name of the contact",
            "example": "Smith"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Names",
            "example": "Mark"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "date of birth",
            "format": "date",
            "example": "1980-01-01"
          },
          "contactType": {
            "type": "string",
            "description": "Contact type",
            "example": "O"
          },
          "contactTypeDescription": {
            "type": "string",
            "description": "Contact type text",
            "example": "Official"
          },
          "relationshipCode": {
            "type": "string",
            "description": "Relationship to prisoner",
            "example": "RO"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "Relationship text",
            "example": "Responsible Officer"
          },
          "commentText": {
            "type": "string",
            "description": "Comments",
            "example": "Some additional information"
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Is an emergency contact",
            "example": true
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates that the contact is Next of Kin Type",
            "example": false
          },
          "personId": {
            "type": "integer",
            "description": "id of the person",
            "format": "int64",
            "example": 5871791
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Approved Visitor",
            "example": true
          },
          "bookingId": {
            "type": "integer",
            "description": "Offender Booking Id for this contact",
            "format": "int64",
            "example": 2468081
          },
          "emails": {
            "type": "array",
            "description": "List of emails associated with the contact",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "phones": {
            "type": "array",
            "description": "List of phone numbers associated with the contact",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "List of restrictions associated with the contact",
            "items": {
              "$ref": "#/components/schemas/VisitorRestriction"
            }
          },
          "active": {
            "type": "boolean",
            "description": "active contact",
            "example": true
          }
        },
        "description": "Offender Contact"
      },
      "OffenderContacts": {
        "type": "object",
        "properties": {
          "offenderContacts": {
            "type": "array",
            "description": "Offender contacts",
            "items": {
              "$ref": "#/components/schemas/OffenderContact"
            }
          }
        },
        "description": "Offender contacts"
      },
      "VisitorRestriction": {
        "required": [
          "globalRestriction",
          "restrictionId",
          "restrictionType",
          "restrictionTypeDescription",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "restrictionId": {
            "type": "integer",
            "description": "restriction id",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Restriction comment text"
          },
          "restrictionType": {
            "type": "string",
            "description": "code of restriction type"
          },
          "restrictionTypeDescription": {
            "type": "string",
            "description": "description of restriction type"
          },
          "startDate": {
            "type": "string",
            "description": "Date from which the restrictions applies",
            "format": "date",
            "example": "1980-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date restriction applies to, or indefinitely if null",
            "format": "date",
            "example": "1980-01-01"
          },
          "globalRestriction": {
            "type": "boolean",
            "description": "true if applied globally to the contact or false if applied in the context of a visit"
          }
        },
        "description": "Visitor restriction"
      },
      "CourtSentences": {
        "type": "object",
        "properties": {
          "caseInfoNumber": {
            "type": "string",
            "description": "The case information number",
            "example": "TD20177010"
          },
          "id": {
            "type": "integer",
            "description": "The case identifier (internal)",
            "format": "int64",
            "example": 1
          },
          "caseSeq": {
            "type": "integer",
            "description": "The case sequence number for the offender",
            "format": "int32",
            "example": 1
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date of the court hearings",
            "format": "date",
            "example": "2019-12-01"
          },
          "court": {
            "$ref": "#/components/schemas/Agency"
          },
          "caseType": {
            "type": "string",
            "description": "The case type",
            "example": "Adult"
          },
          "caseInfoPrefix": {
            "type": "string",
            "description": "The prefix of the case number"
          },
          "caseStatus": {
            "type": "string",
            "description": "The case status",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "CLOSED",
              "INACTIVE"
            ]
          },
          "sentences": {
            "type": "array",
            "description": "Court sentences associated with the court case",
            "items": {
              "$ref": "#/components/schemas/SentencesOffencesTerms"
            }
          },
          "issuingCourt": {
            "$ref": "#/components/schemas/Agency"
          },
          "issuingCourtDate": {
            "type": "string",
            "description": "Issuing Court Date",
            "format": "date"
          }
        },
        "description": "Court case details"
      },
      "KeyDates": {
        "required": [
          "nonDtoReleaseDateType",
          "sentenceStartDate"
        ],
        "type": "object",
        "properties": {
          "sentenceStartDate": {
            "type": "string",
            "description": "Sentence start date.",
            "format": "date",
            "example": "2010-02-03"
          },
          "effectiveSentenceEndDate": {
            "type": "string",
            "description": "Effective sentence end date",
            "format": "date",
            "example": "2020-02-03"
          },
          "additionalDaysAwarded": {
            "type": "integer",
            "description": "ADA - days added to sentence term due to adjustments.",
            "format": "int32",
            "example": 5
          },
          "nonDtoReleaseDate": {
            "type": "string",
            "description": "Release date for non-DTO sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.",
            "format": "date",
            "example": "2020-04-01"
          },
          "nonDtoReleaseDateType": {
            "type": "string",
            "description": "Indicates which type of non-DTO release date is the effective release date. One of 'ARD', 'CRD', 'NPD' or 'PRRD'.",
            "example": "CRD",
            "enum": [
              "ARD",
              "CRD",
              "NPD",
              "PRRD"
            ]
          },
          "confirmedReleaseDate": {
            "type": "string",
            "description": "Confirmed release date for offender.",
            "format": "date",
            "example": "2020-04-20"
          },
          "releaseDate": {
            "type": "string",
            "description": "Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>",
            "format": "date",
            "example": "2020-04-01"
          },
          "sentenceExpiryDate": {
            "type": "string",
            "description": "SED - date on which sentence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "automaticReleaseDate": {
            "type": "string",
            "description": "ARD - calculated automatic (unconditional) release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "conditionalReleaseDate": {
            "type": "string",
            "description": "CRD - calculated conditional release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "nonParoleDate": {
            "type": "string",
            "description": "NPD - calculated non-parole date for offender (relating to the 1991 act).",
            "format": "date",
            "example": "2020-02-03"
          },
          "postRecallReleaseDate": {
            "type": "string",
            "description": "PRRD - calculated post-recall release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "licenceExpiryDate": {
            "type": "string",
            "description": "LED - date on which offender licence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewEligibilityDate": {
            "type": "string",
            "description": "HDCED - date on which offender will be eligible for home detention curfew.",
            "format": "date",
            "example": "2020-02-03"
          },
          "paroleEligibilityDate": {
            "type": "string",
            "description": "PED - date on which offender is eligible for parole.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewActualDate": {
            "type": "string",
            "description": "HDCAD - the offender's actual home detention curfew date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "actualParoleDate": {
            "type": "string",
            "description": "APD - the offender's actual parole date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "releaseOnTemporaryLicenceDate": {
            "type": "string",
            "description": "ROTL - the date on which offender will be released on temporary licence.",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyTermDate": {
            "type": "string",
            "description": "ETD - early term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "midTermDate": {
            "type": "string",
            "description": "MTD - mid term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "lateTermDate": {
            "type": "string",
            "description": "LTD - late term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionExpiryDate": {
            "type": "string",
            "description": "TUSED - top-up supervision expiry date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffDate": {
            "type": "string",
            "description": "Date on which minimum term is reached for parole (indeterminate/life sentences).",
            "format": "date",
            "example": "2020-02-03"
          },
          "dtoPostRecallReleaseDate": {
            "type": "string",
            "description": "DPRRD - Detention training order post recall release date",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffEarlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "TERSED - Tariff early removal scheme eligibility date",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionStartDate": {
            "type": "string",
            "description": "Top-up supervision start date for offender - calculated as licence end date + 1 day or releaseDate if licence end date not set.",
            "format": "date",
            "example": "2019-04-01"
          },
          "homeDetentionCurfewEndDate": {
            "type": "string",
            "description": "Offender's home detention curfew end date - calculated as one day before the releaseDate.",
            "format": "date",
            "example": "2019-04-01"
          }
        },
        "description": "Key Dates"
      },
      "PrisonTerm": {
        "required": [
          "bookNumber",
          "bookingId"
        ],
        "type": "object",
        "properties": {
          "bookNumber": {
            "type": "string",
            "description": "Book Number (Prison) / Prison Number (Probation)",
            "example": "B45232"
          },
          "bookingId": {
            "type": "integer",
            "description": "Booking Identifier (internal)",
            "format": "int64",
            "example": 12312312
          },
          "courtSentences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtSentences"
            }
          },
          "licenceSentences": {
            "type": "array",
            "description": "Licence sentences",
            "items": {
              "$ref": "#/components/schemas/SentencesOffencesTerms"
            }
          },
          "keyDates": {
            "$ref": "#/components/schemas/KeyDates"
          },
          "sentenceAdjustments": {
            "$ref": "#/components/schemas/SentenceAdjustmentDetail"
          }
        },
        "description": "Prison Term"
      },
      "SentenceAdjustmentDetail": {
        "type": "object",
        "properties": {
          "additionalDaysAwarded": {
            "type": "integer",
            "description": "Number of additional days awarded",
            "format": "int32",
            "example": 12
          },
          "unlawfullyAtLarge": {
            "type": "integer",
            "description": "Number unlawfully at large days",
            "format": "int32",
            "example": 12
          },
          "lawfullyAtLarge": {
            "type": "integer",
            "description": "Number of lawfully at large days",
            "format": "int32",
            "example": 12
          },
          "restoredAdditionalDaysAwarded": {
            "type": "integer",
            "description": "Number of restored additional days awarded",
            "format": "int32",
            "example": 12
          },
          "specialRemission": {
            "type": "integer",
            "description": "Number of special remission days",
            "format": "int32",
            "example": 12
          },
          "recallSentenceRemand": {
            "type": "integer",
            "description": "Number of recall sentence remand days",
            "format": "int32",
            "example": 12
          },
          "recallSentenceTaggedBail": {
            "type": "integer",
            "description": "Number of recall sentence tagged bail days",
            "format": "int32",
            "example": 12
          },
          "remand": {
            "type": "integer",
            "description": "Number of remand days",
            "format": "int32",
            "example": 12
          },
          "taggedBail": {
            "type": "integer",
            "description": "Number of tagged bail days",
            "format": "int32",
            "example": 12
          },
          "unusedRemand": {
            "type": "integer",
            "description": "Number of unused remand days",
            "format": "int32",
            "example": 12
          }
        },
        "description": "Sentence adjustments"
      },
      "SentenceSummary": {
        "required": [
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner Identifier",
            "example": "A1234AA"
          },
          "latestPrisonTerm": {
            "$ref": "#/components/schemas/PrisonTerm"
          }
        },
        "description": "Sentence Summary"
      },
      "SentencesOffencesTerms": {
        "required": [
          "fineAmount",
          "lineSeq"
        ],
        "type": "object",
        "properties": {
          "sentenceSequence": {
            "type": "integer",
            "description": "Sentence sequence - a number representing the order",
            "format": "int32"
          },
          "consecutiveToSequence": {
            "type": "integer",
            "description": "This sentence is consecutive to this sequence (if populated)",
            "format": "int32"
          },
          "sentenceStatus": {
            "type": "string",
            "description": "This sentence status: A = Active I = Inactive"
          },
          "sentenceCategory": {
            "type": "string",
            "description": "The sentence category e.g. 2003 or Licence"
          },
          "sentenceCalculationType": {
            "type": "string",
            "description": "The sentence calculation type e.g. R or ADIMP_ORA"
          },
          "sentenceTypeDescription": {
            "type": "string",
            "description": "The sentence type description e.g. Standard Determinate Sentence"
          },
          "sentenceStartDate": {
            "type": "string",
            "description": "The sentence start date for this sentence (aka court date)",
            "format": "date"
          },
          "sentenceEndDate": {
            "type": "string",
            "description": "The sentence end date for this sentence",
            "format": "date"
          },
          "fineAmount": {
            "type": "number",
            "description": "Fine amount.",
            "format": "double"
          },
          "lineSeq": {
            "type": "integer",
            "description": "Sentence line number",
            "format": "int64",
            "example": 1
          },
          "offences": {
            "type": "array",
            "description": "The offences related to this sentence (will usually only have one offence per sentence)",
            "items": {
              "$ref": "#/components/schemas/OffenderOffence"
            }
          },
          "terms": {
            "type": "array",
            "description": "The terms related to this sentence (will usually only have one term per sentence)",
            "items": {
              "$ref": "#/components/schemas/Terms"
            }
          }
        },
        "description": "Offender sentence and offence details"
      },
      "Terms": {
        "required": [
          "lifeSentence",
          "sentenceTermCode",
          "startDate",
          "termSequence"
        ],
        "type": "object",
        "properties": {
          "termSequence": {
            "type": "integer",
            "description": "Sentence term number within sentence.",
            "format": "int32",
            "example": 1
          },
          "consecutiveTo": {
            "type": "integer",
            "description": "Sentence number which this sentence follows if consecutive, otherwise concurrent.",
            "format": "int32",
            "example": 2
          },
          "sentenceType": {
            "type": "string",
            "description": "Sentence type, using reference data from table SENTENCE_CALC_TYPES.",
            "example": "2"
          },
          "sentenceTermCode": {
            "type": "string",
            "description": "Sentence term code.",
            "example": "IMP"
          },
          "sentenceTypeDescription": {
            "type": "string",
            "description": "Sentence type description.",
            "example": "2"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of sentence term.",
            "format": "date",
            "example": "2018-12-31"
          },
          "years": {
            "type": "integer",
            "description": "Sentence length years.",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "description": "Sentence length months.",
            "format": "int32"
          },
          "weeks": {
            "type": "integer",
            "description": "Sentence length weeks.",
            "format": "int32"
          },
          "days": {
            "type": "integer",
            "description": "Sentence length days.",
            "format": "int32"
          },
          "lifeSentence": {
            "type": "boolean",
            "description": "Whether this is a life sentence."
          }
        },
        "description": "Offender Sentence terms details for booking id"
      },
      "BaseSentenceCalcDates": {
        "type": "object",
        "properties": {
          "sentenceExpiryDate": {
            "type": "string",
            "description": "SED - date on which sentence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "automaticReleaseDate": {
            "type": "string",
            "description": "ARD - calculated automatic (unconditional) release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "conditionalReleaseDate": {
            "type": "string",
            "description": "CRD - calculated conditional release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "nonParoleDate": {
            "type": "string",
            "description": "NPD - calculated non-parole date for offender (relating to the 1991 act).",
            "format": "date",
            "example": "2020-02-03"
          },
          "postRecallReleaseDate": {
            "type": "string",
            "description": "PRRD - calculated post-recall release date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "licenceExpiryDate": {
            "type": "string",
            "description": "LED - date on which offender licence expires.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewEligibilityDate": {
            "type": "string",
            "description": "HDCED - date on which offender will be eligible for home detention curfew.",
            "format": "date",
            "example": "2020-02-03"
          },
          "paroleEligibilityDate": {
            "type": "string",
            "description": "PED - date on which offender is eligible for parole.",
            "format": "date",
            "example": "2020-02-03"
          },
          "homeDetentionCurfewActualDate": {
            "type": "string",
            "description": "HDCAD - the offender's actual home detention curfew date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "actualParoleDate": {
            "type": "string",
            "description": "APD - the offender's actual parole date.",
            "format": "date",
            "example": "2020-02-03"
          },
          "releaseOnTemporaryLicenceDate": {
            "type": "string",
            "description": "ROTL - the date on which offender will be released on temporary licence.",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).",
            "format": "date",
            "example": "2020-02-03"
          },
          "earlyTermDate": {
            "type": "string",
            "description": "ETD - early term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "midTermDate": {
            "type": "string",
            "description": "MTD - mid term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "lateTermDate": {
            "type": "string",
            "description": "LTD - late term date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "topupSupervisionExpiryDate": {
            "type": "string",
            "description": "TUSED - top-up supervision expiry date for offender.",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffDate": {
            "type": "string",
            "description": "Date on which minimum term is reached for parole (indeterminate/life sentences).",
            "format": "date",
            "example": "2020-02-03"
          },
          "dtoPostRecallReleaseDate": {
            "type": "string",
            "description": "DPRRD - Detention training order post recall release date",
            "format": "date",
            "example": "2020-02-03"
          },
          "tariffEarlyRemovalSchemeEligibilityDate": {
            "type": "string",
            "description": "TERSED - Tariff early removal scheme eligibility date",
            "format": "date",
            "example": "2020-02-03"
          },
          "effectiveSentenceEndDate": {
            "type": "string",
            "description": "Effective sentence end date",
            "format": "date",
            "example": "2020-02-03"
          }
        },
        "description": "Base Sentence Calc Dates"
      },
      "OffenderSentenceCalcBaseSentenceCalcDates": {
        "required": [
          "agencyLocationId",
          "bookingId",
          "firstName",
          "lastName",
          "mostRecentActiveBooking",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id.",
            "format": "int64",
            "example": 12341321
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference",
            "example": "A1000AA"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "example": "Smith"
          },
          "agencyLocationId": {
            "type": "string",
            "description": "Agency Id",
            "example": "LEI"
          },
          "mostRecentActiveBooking": {
            "type": "boolean",
            "description": "Is this the most recent active booking",
            "example": true
          },
          "sentenceDetail": {
            "$ref": "#/components/schemas/BaseSentenceCalcDates"
          }
        },
        "description": "Offender Sentence Calculation"
      },
      "OffenderSentenceCalculation": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "agencyLocationId": {
            "type": "string"
          },
          "offenderSentCalculationId": {
            "type": "integer",
            "format": "int64"
          },
          "calculationDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "sentenceExpiryDate": {
            "type": "string",
            "format": "date"
          },
          "licenceExpiryDate": {
            "type": "string",
            "format": "date"
          },
          "paroleEligibilityDate": {
            "type": "string",
            "format": "date"
          },
          "homeDetCurfEligibilityDate": {
            "type": "string",
            "format": "date"
          },
          "homeDetCurfActualDate": {
            "type": "string",
            "format": "date"
          },
          "automaticReleaseDate": {
            "type": "string",
            "format": "date"
          },
          "conditionalReleaseDate": {
            "type": "string",
            "format": "date"
          },
          "nonParoleDate": {
            "type": "string",
            "format": "date"
          },
          "postRecallReleaseDate": {
            "type": "string",
            "format": "date"
          },
          "actualParolDate": {
            "type": "string",
            "format": "date"
          },
          "topupSupervisionExpiryDate": {
            "type": "string",
            "format": "date"
          },
          "earlyTermDate": {
            "type": "string",
            "format": "date"
          },
          "midTermDate": {
            "type": "string",
            "format": "date"
          },
          "lateTermDate": {
            "type": "string",
            "format": "date"
          },
          "tariffDate": {
            "type": "string",
            "format": "date"
          },
          "rotl": {
            "type": "string",
            "format": "date"
          },
          "ersed": {
            "type": "string",
            "format": "date"
          },
          "commentText": {
            "type": "string"
          }
        },
        "description": "Offender Sentence Calculation"
      },
      "AssessmentSummary": {
        "required": [
          "assessmentCode",
          "assessmentDate",
          "assessmentSeq",
          "bookingId",
          "cellSharingAlertFlag",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking number",
            "format": "int64",
            "example": 123456
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number of assessment within booking",
            "format": "int32",
            "example": 1
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number).",
            "example": "GV09876N"
          },
          "classificationCode": {
            "type": "string",
            "description": "Classification code. This will not have a value if the assessment is incomplete or pending",
            "example": "STANDARD"
          },
          "assessmentCode": {
            "type": "string",
            "description": "Identifies the type of assessment",
            "example": "CSR"
          },
          "cellSharingAlertFlag": {
            "type": "boolean",
            "description": "Indicates whether this is a CSRA assessment"
          },
          "assessmentDate": {
            "type": "string",
            "description": "Date assessment was created",
            "format": "date",
            "example": "2018-02-11"
          },
          "assessmentAgencyId": {
            "type": "string",
            "description": "The assessment creation agency id",
            "example": "MDI"
          },
          "assessmentComment": {
            "type": "string",
            "description": "Comment from assessor",
            "example": "Comment details"
          },
          "assessorUser": {
            "type": "string",
            "description": "Username who made the assessment",
            "example": "NGK33Y"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Date of next review",
            "format": "date",
            "example": "2018-02-11"
          }
        },
        "description": "AssessmentSummary"
      },
      "AssessmentDetail": {
        "required": [
          "assessmentCode",
          "assessmentDate",
          "assessmentSeq",
          "bookingId",
          "cellSharingAlertFlag",
          "offenderNo",
          "questions"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking number",
            "format": "int64",
            "example": 123456
          },
          "assessmentSeq": {
            "type": "integer",
            "description": "Sequence number of assessment within booking",
            "format": "int32",
            "example": 1
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number (e.g. NOMS Number).",
            "example": "GV09876N"
          },
          "classificationCode": {
            "type": "string",
            "description": "Classification code. This will not have a value if the assessment is incomplete or pending",
            "example": "STANDARD"
          },
          "assessmentCode": {
            "type": "string",
            "description": "Identifies the type of assessment",
            "example": "CSR"
          },
          "cellSharingAlertFlag": {
            "type": "boolean",
            "description": "Indicates whether this is a CSRA assessment"
          },
          "assessmentDate": {
            "type": "string",
            "description": "Date assessment was created",
            "format": "date",
            "example": "2018-02-11"
          },
          "assessmentAgencyId": {
            "type": "string",
            "description": "The assessment creation agency id",
            "example": "MDI"
          },
          "assessmentComment": {
            "type": "string",
            "description": "Comment from assessor",
            "example": "Comment details"
          },
          "assessorUser": {
            "type": "string",
            "description": "Username who made the assessment",
            "example": "NGK33Y"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Date of next review",
            "format": "date",
            "example": "2018-02-11"
          },
          "assessmentCommitteeCode": {
            "type": "string",
            "description": "The code of the committee that conducted the assessment",
            "example": "REVIEW"
          },
          "assessmentCommitteeName": {
            "type": "string",
            "description": "The name of the committee that conducted the assessment",
            "example": "REVIEW"
          },
          "approvalDate": {
            "type": "string",
            "description": "Date of assessment approval",
            "format": "date",
            "example": "2018-02-11"
          },
          "approvalCommitteeCode": {
            "type": "string",
            "description": "The code of the committee that conducted the approval",
            "example": "REVIEW"
          },
          "approvalCommitteeName": {
            "type": "string",
            "description": "The name of the committee that conducted the approval",
            "example": "REVIEW"
          },
          "originalClassificationCode": {
            "type": "string",
            "description": "Classification code before it was reviewed",
            "example": "HI"
          },
          "classificationReviewReason": {
            "type": "string",
            "description": "The reason for the review of the classification",
            "example": "HI"
          },
          "overridingClassificationCode": {
            "type": "string",
            "description": "The classification code entered to override the calculated value prior to approval",
            "example": "HI"
          },
          "calculatedClassificationCode": {
            "type": "string",
            "description": "The classification code originally calculated by NOMIS based on the answers given to the questions when carrying out the initial review",
            "example": "HI"
          },
          "approvedClassificationCode": {
            "type": "string",
            "description": "The classification code that has been approved",
            "example": "HI"
          },
          "approvalComment": {
            "type": "string",
            "description": "Comment added at approval of classification code",
            "example": "Comment"
          },
          "overrideReason": {
            "type": "string",
            "description": "The reason given for overriding the calculated classification code",
            "example": "Overriding comment"
          },
          "questions": {
            "type": "array",
            "description": "Assessment questions and answers, in the order they were asked",
            "items": {
              "$ref": "#/components/schemas/AssessmentQuestion"
            }
          }
        },
        "description": "AssessmentDetail"
      },
      "AssessmentQuestion": {
        "required": [
          "question"
        ],
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "Question"
          },
          "answer": {
            "type": "string",
            "description": "The answer given. More than one answer might have been given, in which case the other answers will be in the additionalAnswers property"
          },
          "additionalAnswers": {
            "type": "array",
            "description": "If a question has more than one answer, all but the first answer will be in this property",
            "items": {
              "type": "string",
              "description": "If a question has more than one answer, all but the first answer will be in this property"
            }
          }
        },
        "description": "AssessmentQuestion"
      },
      "PageOffenceDto": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenceDto"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "OffenderOutTodayDto": {
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName",
          "offenderNo",
          "timeOut"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender Unique Reference"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "reasonDescription": {
            "type": "string",
            "description": "Reason for out movement"
          },
          "timeOut": {
            "type": "string",
            "format": "partial-time"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "description": "Offender out today details"
      },
      "OffenderIn": {
        "required": [
          "bookingId",
          "dateOfBirth",
          "firstName",
          "fromAgencyDescription",
          "fromAgencyId",
          "fromCity",
          "lastName",
          "location",
          "movementDateTime",
          "movementTime",
          "offenderNo",
          "toAgencyDescription",
          "toAgencyId",
          "toCity"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number"
          },
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fromAgencyId": {
            "type": "string",
            "description": "Id for Agency travelling from"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "Description for Agency travelling from"
          },
          "toAgencyId": {
            "type": "string",
            "description": "Id for Agency travelling to"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "Description for Agency travelling to"
          },
          "fromCity": {
            "type": "string",
            "description": "City offender was received from"
          },
          "toCity": {
            "type": "string",
            "description": "City offender was sent to"
          },
          "movementTime": {
            "type": "string",
            "description": "Movement time",
            "format": "partial-time"
          },
          "movementDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Movement date time",
            "example": "2021-07-05T10:35:17"
          },
          "location": {
            "type": "string",
            "description": "Description of the offender's (internal) location"
          }
        },
        "description": "Summary of an offender counted as Establishment Roll - In"
      },
      "CourtEventBasic": {
        "required": [
          "court",
          "eventSubType",
          "offenderNo",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (NOMS ID)",
            "example": "G3878UK"
          },
          "court": {
            "type": "string",
            "description": "The agency code of the court",
            "example": "LEEDCC"
          },
          "courtDescription": {
            "type": "string",
            "description": "The court description",
            "example": "Leeds Crown Court"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "eventSubType": {
            "type": "string",
            "description": "The court event subtype (from MOVE_RSN reference data)",
            "example": "CRT"
          },
          "eventDescription": {
            "type": "string",
            "description": "The event description",
            "example": "Court Appearance"
          },
          "hold": {
            "type": "boolean",
            "description": "Whether hold ordered by the court at this hearing"
          }
        },
        "description": "Basic Summary data for a scheduled court event"
      },
      "CourtEvent": {
        "required": [
          "bookingActiveFlag",
          "bookingInOutStatus",
          "commentText",
          "createDateTime",
          "directionCode",
          "endTime",
          "eventClass",
          "eventDate",
          "eventId",
          "eventStatus",
          "eventSubType",
          "eventType",
          "fromAgency",
          "fromAgencyDescription",
          "judgeName",
          "offenderNo",
          "startTime",
          "toAgency",
          "toAgencyDescription"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (NOMS ID)",
            "example": "G3878UK"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "eventId": {
            "type": "integer",
            "description": "The internal event ID",
            "format": "int64",
            "example": 12343434
          },
          "fromAgency": {
            "type": "string",
            "description": "The agency code ",
            "example": "LEI"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "The from agency description",
            "example": "HMP LEEDS"
          },
          "toAgency": {
            "type": "string",
            "description": "The agency code to which the transfer will be made (if an agency)",
            "example": "LEEDCC"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "The to agency description",
            "example": "Leeds Crown Court"
          },
          "eventDate": {
            "type": "string",
            "description": "The date on which the event is scheduled to occur",
            "format": "date",
            "example": "2019-12-01"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The planned date and time of the end of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "eventClass": {
            "type": "string",
            "description": "The event class (from COURT_EVENTS)",
            "example": "EXT_MOV"
          },
          "eventType": {
            "type": "string",
            "description": "The event type",
            "example": "CRT"
          },
          "eventSubType": {
            "type": "string",
            "description": "The event sub-type",
            "example": "DP"
          },
          "eventStatus": {
            "type": "string",
            "description": "The event status - either SCH (scheduled) or COMP (completed)",
            "example": "SCH"
          },
          "judgeName": {
            "type": "string",
            "description": "Judge name, where available",
            "example": "Harris"
          },
          "directionCode": {
            "type": "string",
            "description": "The direction code (IN or OUT)",
            "example": "IN"
          },
          "commentText": {
            "type": "string",
            "description": "The comment text stored against this event",
            "example": "Restricted access to parking level"
          },
          "bookingActiveFlag": {
            "type": "boolean",
            "description": "The booking active flag",
            "example": true
          },
          "bookingInOutStatus": {
            "type": "string",
            "description": "The booking in or out status - either IN or OUT",
            "example": "OUT"
          }
        },
        "description": "Summary data for a scheduled court event"
      },
      "MovementSummary": {
        "required": [
          "createDateTime",
          "directionCode",
          "eventId",
          "fromAgency",
          "fromAgencyDescription",
          "movementReason",
          "movementTime",
          "movementType",
          "movementTypeDescription",
          "offenderNo",
          "toAgency",
          "toAgencyDescription"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (NOMS ID)",
            "example": "G3878UK"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Timestamp when the external movement record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "eventId": {
            "type": "integer",
            "description": "The internal event ID",
            "format": "int64",
            "example": 1223232
          },
          "fromAgency": {
            "type": "string",
            "description": "Agency travelling from",
            "example": "LEI"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "Description of the agency travelling from",
            "example": "HMP LEEDS"
          },
          "toAgency": {
            "type": "string",
            "description": "Agency travelling to",
            "example": "MDI"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "Description of the agency travelling to",
            "example": "HMP MOORLANDS"
          },
          "fromCity": {
            "type": "string",
            "description": "City offender was received from",
            "example": "LEEDS"
          },
          "toCity": {
            "type": "string",
            "description": "City offender was sent to",
            "example": "DONCASTER"
          },
          "arrestAgencyLocId": {
            "type": "string",
            "description": "The arresting agency location ID",
            "example": "SYPOL"
          },
          "internalScheduleType": {
            "type": "string",
            "description": "Internal schedule type"
          },
          "internalScheduleReasonCode": {
            "type": "string",
            "description": "Internal schedule reason code"
          },
          "toProvStatCode": {
            "type": "string",
            "description": "To prov stat code - from offender_external_movements"
          },
          "escortCode": {
            "type": "string",
            "description": "The escort code",
            "example": "PECS123"
          },
          "escortText": {
            "type": "string",
            "description": "The escort text",
            "example": "Secure van"
          },
          "movementType": {
            "type": "string",
            "description": "ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)",
            "example": "ADM",
            "enum": [
              "ADM",
              "CRT",
              "REL",
              "TAP",
              "TRN"
            ]
          },
          "movementTypeDescription": {
            "type": "string",
            "description": "Description of the movement type",
            "example": "Admission"
          },
          "directionCode": {
            "type": "string",
            "description": "IN or OUT",
            "example": "IN"
          },
          "movementTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Movement date and time in Europe/London local time format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "movementReason": {
            "type": "string",
            "description": "Description of movement reason",
            "example": "Convicted at court"
          },
          "commentText": {
            "type": "string",
            "description": "Comment",
            "example": "This is a free text comment"
          }
        },
        "description": "Summary data for a completed movement"
      },
      "ReleaseEvent": {
        "required": [
          "approvedReleaseDate",
          "bookingActiveFlag",
          "bookingInOutStatus",
          "commentText",
          "createDateTime",
          "eventClass",
          "eventId",
          "eventStatus",
          "fromAgency",
          "fromAgencyDescription",
          "movementReasonCode",
          "movementReasonDescription",
          "movementTypeCode",
          "movementTypeDescription",
          "offenderNo",
          "releaseDate"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (NOMS ID)",
            "example": "G3878UK"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "eventId": {
            "type": "integer",
            "description": "The internal event ID",
            "format": "int64",
            "example": 1234556
          },
          "fromAgency": {
            "type": "string",
            "description": "The agency code from which the release will be made",
            "example": "LEI"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "The agency description",
            "example": "HMP LEEDS"
          },
          "releaseDate": {
            "type": "string",
            "description": "The planned release date",
            "format": "date",
            "example": "2019-12-01"
          },
          "approvedReleaseDate": {
            "type": "string",
            "description": "The approved release date",
            "format": "date",
            "example": "2019-12-01"
          },
          "eventClass": {
            "type": "string",
            "description": "The event class - usually EXT_MOV",
            "example": "EXT_MOV"
          },
          "eventStatus": {
            "type": "string",
            "description": "The event status - either SCH (scheduled) or COMP (completed)",
            "example": "SCH"
          },
          "movementTypeCode": {
            "type": "string",
            "description": "The movement type code - from OFFENDER_IND_SCHEDULE",
            "example": "REL"
          },
          "movementTypeDescription": {
            "type": "string",
            "description": "The movement type description from reference data",
            "example": "Release at end of sentence"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "The movement reason code - from OFFENDER_IND_SCHEDULE",
            "example": "DD"
          },
          "movementReasonDescription": {
            "type": "string",
            "description": "The movement reason description from reference data",
            "example": "Release"
          },
          "commentText": {
            "type": "string",
            "description": "Any comment text entered against this event",
            "example": "Notes relating to this release"
          },
          "bookingActiveFlag": {
            "type": "boolean",
            "description": "The booking active flag",
            "example": true
          },
          "bookingInOutStatus": {
            "type": "string",
            "description": "The booking in or out status - either IN or OUT",
            "example": "OUT"
          }
        },
        "description": "Summary data for a scheduled offender release"
      },
      "TransferEvent": {
        "required": [
          "bookingActiveFlag",
          "bookingInOutStatus",
          "createDateTime",
          "directionCode",
          "endTime",
          "engagementCode",
          "escortCode",
          "eventClass",
          "eventDate",
          "eventId",
          "eventStatus",
          "eventSubType",
          "eventType",
          "fromAgency",
          "fromAgencyDescription",
          "judgeName",
          "offenderNo",
          "outcomeReasonCode",
          "performanceCode",
          "startTime",
          "toAgency",
          "toAgencyDescription",
          "toCity"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number(NOMS ID)",
            "example": "G3878UK"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "eventId": {
            "type": "integer",
            "description": "The internal event ID",
            "format": "int64",
            "example": 1232323
          },
          "fromAgency": {
            "type": "string",
            "description": "The agency code from which the event will start",
            "example": "LEI"
          },
          "fromAgencyDescription": {
            "type": "string",
            "description": "The from agency description",
            "example": "HMP LEEDS"
          },
          "toAgency": {
            "type": "string",
            "description": "The agency code to which the transfer will be made (if an agency)",
            "example": "MDI"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "The to agency description",
            "example": "HMP MOORLANDS"
          },
          "toCity": {
            "type": "string",
            "description": "The destination city when available",
            "example": "DONCASTER"
          },
          "eventStatus": {
            "type": "string",
            "description": "The event status - either SCH or COMP",
            "example": "SCH"
          },
          "eventClass": {
            "type": "string",
            "description": "The event class - from OFFENDER_IND_SCHEDULES",
            "example": "EXT_MOV"
          },
          "eventType": {
            "type": "string",
            "description": "The event type - from OFFENDER_IND_SCHEDULES",
            "example": "TRN"
          },
          "eventSubType": {
            "type": "string",
            "description": "The event sub-type - from OFFENDER_IND_SCHEDULES",
            "example": "PP"
          },
          "eventDate": {
            "type": "string",
            "description": "The date on which the event is scheduled to occur",
            "format": "date",
            "example": "2019-01-01"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The planned date and time of the end of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "outcomeReasonCode": {
            "type": "string",
            "description": "The outcome reason code - from offender_ind_schedules",
            "example": "CO"
          },
          "judgeName": {
            "type": "string",
            "description": "The name of the judge where known"
          },
          "engagementCode": {
            "type": "string",
            "description": "Engagement code",
            "example": "ENG"
          },
          "escortCode": {
            "type": "string",
            "description": "The escort code",
            "example": "DEF2"
          },
          "performanceCode": {
            "type": "string",
            "description": "The performance code",
            "example": "PERF1"
          },
          "directionCode": {
            "type": "string",
            "description": "The direction code (IN or OUT)",
            "example": "IN"
          },
          "bookingActiveFlag": {
            "type": "boolean",
            "description": "The booking active flag",
            "example": true
          },
          "bookingInOutStatus": {
            "type": "string",
            "description": "The booking in or out status - either IN or OUT from offender bookings",
            "example": "OUT"
          }
        },
        "description": "A scheduled offender movement event"
      },
      "TransferSummary": {
        "type": "object",
        "properties": {
          "courtEvents": {
            "type": "array",
            "description": "List of scheduled or completed court events",
            "items": {
              "$ref": "#/components/schemas/CourtEvent"
            }
          },
          "transferEvents": {
            "type": "array",
            "description": "List of scheduled or completed offender events",
            "items": {
              "$ref": "#/components/schemas/TransferEvent"
            }
          },
          "releaseEvents": {
            "type": "array",
            "description": "List of scheduled or completed release events",
            "items": {
              "$ref": "#/components/schemas/ReleaseEvent"
            }
          },
          "movements": {
            "type": "array",
            "description": "List of confirmed movements",
            "items": {
              "$ref": "#/components/schemas/MovementSummary"
            }
          }
        },
        "description": "The container object for transfer and movement events"
      },
      "RollCount": {
        "required": [
          "availablePhysical",
          "bedsInUse",
          "currentlyInCell",
          "currentlyOut",
          "livingUnitDesc",
          "livingUnitId",
          "maximumCapacity",
          "netVacancies",
          "operationalCapacity",
          "outOfLivingUnits",
          "outOfOrder"
        ],
        "type": "object",
        "properties": {
          "livingUnitId": {
            "type": "integer",
            "description": "Id of location",
            "format": "int64"
          },
          "livingUnitDesc": {
            "type": "string",
            "description": "Wing, houseblock etc. name"
          },
          "bedsInUse": {
            "type": "integer",
            "description": "No of residential prisoners",
            "format": "int32"
          },
          "currentlyInCell": {
            "type": "integer",
            "description": "No of residential prisoners actually in",
            "format": "int32"
          },
          "outOfLivingUnits": {
            "type": "integer",
            "description": "No of residential prisoners in internal locations",
            "format": "int32"
          },
          "currentlyOut": {
            "type": "integer",
            "description": "No of residential prisoners out",
            "format": "int32"
          },
          "operationalCapacity": {
            "type": "integer",
            "description": "Total capacity not including unavailable cells",
            "format": "int32"
          },
          "netVacancies": {
            "type": "integer",
            "description": "Available empty beds",
            "format": "int32"
          },
          "maximumCapacity": {
            "type": "integer",
            "description": "Total capacity including unavailable cells",
            "format": "int32"
          },
          "availablePhysical": {
            "type": "integer",
            "description": "All empty beds",
            "format": "int32"
          },
          "outOfOrder": {
            "type": "integer",
            "description": "No of unavailable cells",
            "format": "int32"
          }
        },
        "description": "Establishment roll count numbers for a housing block, wing, or reception etc."
      },
      "MovementCount": {
        "required": [
          "in",
          "out"
        ],
        "type": "object",
        "properties": {
          "in": {
            "type": "integer",
            "description": "Number of prisoners arrived so far on given date",
            "format": "int32"
          },
          "out": {
            "type": "integer",
            "description": "Number of prisoners that have left so far on given date",
            "format": "int32"
          }
        },
        "description": "Establishment roll count in and out numbers"
      },
      "OffenderInReception": {
        "required": [
          "bookingId",
          "dateOfBirth",
          "firstName",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number"
          },
          "bookingId": {
            "type": "integer",
            "description": "Booking Id",
            "format": "int64"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "description": "Summary of an offender counted as Establishment Roll - Reception"
      },
      "OffenderOut": {
        "required": [
          "bookingId",
          "dateOfBirth",
          "firstName",
          "lastName",
          "location",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Display Prisoner Number"
          },
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "location": {
            "type": "string",
            "description": "The prisoner's internal location (Cell)"
          }
        },
        "description": "Summary of an offender 'currently out' according to Establishment Roll"
      },
      "OutOnTemporaryAbsenceSummary": {
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName",
          "movementReason",
          "movementReasonCode",
          "movementTime",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender number (NOMS ID)",
            "example": "G3878UK"
          },
          "firstName": {
            "type": "string",
            "description": "Prisoner first name.",
            "example": "JOHN"
          },
          "lastName": {
            "type": "string",
            "description": "Prisoner's last name.",
            "example": "SMITH"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Prisoner's date of birth.",
            "format": "date",
            "example": "1980-05-02"
          },
          "movementTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Movement date and time in Europe/London local time format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example": "2021-07-05T10:35:17"
          },
          "toAgency": {
            "type": "string",
            "description": "Agency travelling to",
            "example": "MDI"
          },
          "toAgencyDescription": {
            "type": "string",
            "description": "Description of the agency travelling to",
            "example": "HMP MOORLANDS"
          },
          "toCity": {
            "type": "string",
            "description": "City offender was sent to",
            "example": "DONCASTER"
          },
          "movementReasonCode": {
            "type": "string",
            "description": "The movement reason code",
            "example": "C1"
          },
          "movementReason": {
            "type": "string",
            "description": "Description of movement reason",
            "example": "Convicted at court"
          },
          "commentText": {
            "type": "string",
            "description": "Comment",
            "example": "This is a free text comment"
          }
        },
        "description": "Summary data for a completed movement"
      },
      "Keyworker": {
        "required": [
          "firstName",
          "lastName",
          "numberAllocated",
          "staffId",
          "status"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "description": "Unique identifier for staff member.",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "Staff member's first name."
          },
          "lastName": {
            "type": "string",
            "description": "Staff member's last name."
          },
          "status": {
            "type": "string",
            "description": "Status of staff member."
          },
          "thumbnailId": {
            "type": "integer",
            "description": "Identifier for staff member image.",
            "format": "int64"
          },
          "numberAllocated": {
            "type": "integer",
            "description": "Current number allocated",
            "format": "int32"
          }
        },
        "description": "Keyworker Details"
      },
      "GangMemberDetail": {
        "required": [
          "firstName",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Prisoner Number of this gang member",
            "example": "A1234AA"
          },
          "firstName": {
            "type": "string",
            "description": "First name of this gang member",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of this gang member",
            "example": "Smith"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison ID if inside or OUT if not inside",
            "example": "MDI"
          },
          "Moorland": {
            "type": "string",
            "description": "Name of the prison or Outside if not inside"
          },
          "cellLocation": {
            "type": "string",
            "description": "Cell location of the gang member (if inside)",
            "example": "MDI-A-1-001"
          }
        },
        "description": "Gang Member Detail"
      },
      "GangMemberSummary": {
        "required": [
          "currentGangs",
          "gangNonAssociations"
        ],
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/GangMemberDetail"
          },
          "currentGangs": {
            "type": "array",
            "description": "Current gang involvement",
            "items": {
              "$ref": "#/components/schemas/GangSummary"
            }
          },
          "gangNonAssociations": {
            "type": "array",
            "description": "Non associations with other gangs",
            "items": {
              "$ref": "#/components/schemas/GangNonAssociationSummary"
            }
          }
        },
        "description": "Summary of Gangs for a specified prisoner"
      },
      "GangNonAssociationSummary": {
        "required": [
          "code",
          "members",
          "name",
          "reason"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code assigned for the gang",
            "example": "A_GANG"
          },
          "name": {
            "type": "string",
            "description": "The name of the gang",
            "example": "A New Gang"
          },
          "reason": {
            "type": "string",
            "description": "Reason this gang should not be associated with other gang",
            "example": "Rival Gang"
          },
          "members": {
            "type": "array",
            "description": "List of members of this gang",
            "items": {
              "$ref": "#/components/schemas/GangMemberDetail"
            }
          }
        },
        "description": "Non associations Gang information"
      },
      "GangSummary": {
        "required": [
          "code",
          "name",
          "numberOfMembers"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code assigned for the gang",
            "example": "A_GANG"
          },
          "name": {
            "type": "string",
            "description": "The name of the gang",
            "example": "A New Gang"
          },
          "comment": {
            "type": "string",
            "description": "Information about this member within the gang",
            "example": "Leader of gang"
          },
          "numberOfMembers": {
            "type": "integer",
            "description": "Number of members in this gang",
            "format": "int64",
            "example": 15
          }
        },
        "description": "Gang Summary"
      },
      "PageEducation": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Education"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CourtDateCharge": {
        "type": "object",
        "properties": {
          "chargeId": {
            "type": "integer",
            "description": "The id of the charge",
            "format": "int64"
          },
          "offenceCode": {
            "type": "string",
            "description": "The offence code of the office in the court case"
          },
          "offenceStatue": {
            "type": "string",
            "description": "The offence statute of the office in the court case"
          },
          "offenceDescription": {
            "type": "string",
            "description": "The offence description"
          },
          "offenceDate": {
            "type": "string",
            "description": "The date of the offence",
            "format": "date"
          },
          "offenceEndDate": {
            "type": "string",
            "description": "The offence end date",
            "format": "date"
          },
          "guilty": {
            "type": "boolean",
            "description": "Was the verdict guilty or not guilty"
          },
          "courtCaseId": {
            "type": "integer",
            "description": "The id of the court case",
            "format": "int64"
          },
          "courtCaseRef": {
            "type": "string",
            "description": "Court case reference"
          },
          "courtLocation": {
            "type": "string",
            "description": "Court case location"
          },
          "sentenceSequence": {
            "type": "integer",
            "description": "The sequence of the sentence from this charge",
            "format": "int32"
          },
          "sentenceDate": {
            "type": "string",
            "description": "The sentence date",
            "format": "date"
          },
          "resultDescription": {
            "type": "string",
            "description": "The result description of the charge"
          }
        },
        "description": "A charge linked to a court date"
      },
      "CourtDateResult": {
        "required": [
          "bookNumber",
          "bookingId",
          "charge",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of this court date",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "description": "The date of the court result",
            "format": "date"
          },
          "resultCode": {
            "type": "string",
            "description": "The result code of the court date"
          },
          "resultDescription": {
            "type": "string",
            "description": "The result description of the court date"
          },
          "resultDispositionCode": {
            "type": "string",
            "description": "The disposition code of the result of the court date"
          },
          "charge": {
            "$ref": "#/components/schemas/CourtDateCharge"
          },
          "bookingId": {
            "type": "integer",
            "description": "The id of the booking this court date was linked to",
            "format": "int64"
          },
          "bookNumber": {
            "type": "string",
            "description": "The user readable ID for a booking"
          }
        },
        "description": "Represents a court date and its outcome"
      },
      "BedAssignment": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique, numeric booking id. Used as a primary key when combined with the bed assignment sequence",
            "format": "int64",
            "example": 1234134
          },
          "livingUnitId": {
            "type": "integer",
            "description": "Identifier of living unit (e.g. cell) that offender is assigned to.",
            "format": "int64",
            "example": 123123
          },
          "assignmentDate": {
            "type": "string",
            "description": "Date the offender was assigned to a living unit.",
            "format": "date",
            "example": "2020-10-12"
          },
          "assignmentDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time the offender was moved to a living unit.",
            "example": "2021-07-05T10:35:17"
          },
          "assignmentReason": {
            "type": "string",
            "description": "Assignment reason code",
            "example": "ADM"
          },
          "assignmentEndDate": {
            "type": "string",
            "description": "Date an offender was moved out of the living unit",
            "format": "date",
            "example": "2020-11-12"
          },
          "assignmentEndDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time an offender was moved out of the living unit",
            "example": "2021-07-05T10:35:17"
          },
          "agencyId": {
            "type": "string",
            "description": "Agency of living unit",
            "example": "MDI"
          },
          "description": {
            "type": "string",
            "description": "Description of living unit (e.g. cell) ",
            "example": "MDI-1-1-2"
          },
          "bedAssignmentHistorySequence": {
            "type": "integer",
            "description": "Bed assignment sequence. Used as a primary key when combined with the booking id",
            "format": "int32",
            "example": 2
          },
          "movementMadeBy": {
            "type": "string",
            "description": "the staff member responsible for the movement of a prisoner",
            "example": "KQJ74F"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender number",
            "example": "A1234AA"
          }
        },
        "description": "Bed assignment history entry"
      },
      "OffenderCell": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The case identifier",
            "format": "int64",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "LEI-1-1"
          },
          "userDescription": {
            "type": "string",
            "description": "Description",
            "example": "LEI-1-1"
          },
          "capacity": {
            "type": "integer",
            "description": "Capacity",
            "format": "int32",
            "example": 2
          },
          "noOfOccupants": {
            "type": "integer",
            "description": "Number of occupants",
            "format": "int32",
            "example": 2
          },
          "attributes": {
            "type": "array",
            "description": "List of attributes",
            "items": {
              "$ref": "#/components/schemas/OffenderCellAttribute"
            }
          }
        },
        "description": "Offender cell details"
      },
      "OffenderCellAttribute": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Attribute code",
            "example": "LC"
          },
          "description": {
            "type": "string",
            "description": "Attribute description",
            "example": "Listener Cell"
          }
        },
        "description": "Offender cell details"
      },
      "VisitSummary": {
        "required": [
          "hasVisits"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which next scheduled (i.e. not cancelled) event starts (if any)",
            "example": "2021-07-05T10:35:17"
          },
          "hasVisits": {
            "type": "boolean",
            "description": "Whether the prisoner has any visits (previous or next)"
          }
        },
        "description": "Visit summary"
      },
      "PageVisitWithVisitors": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitWithVisitors"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "VisitDetails": {
        "required": [
          "attended",
          "completionStatus",
          "eventOutcome",
          "eventStatus",
          "startTime",
          "visitType"
        ],
        "type": "object",
        "properties": {
          "relationship": {
            "type": "string",
            "description": "Relationship of lead visitor to offender"
          },
          "location": {
            "type": "string",
            "description": "Location at which event takes place (could be an internal location, agency or external address)."
          },
          "prison": {
            "type": "string",
            "description": "Prison at which event takes place"
          },
          "attended": {
            "type": "boolean",
            "description": "Whether the visit was attended. Translation of eventOutcome into boolean. Defaults in NOMIS to true when the visit is created"
          },
          "eventStatus": {
            "type": "string",
            "description": "Status of event (EVENT_STS reference code)",
            "enum": [
              "EXP",
              "SCH",
              "COMP",
              "CANC"
            ]
          },
          "eventStatusDescription": {
            "type": "string",
            "description": "Description of eventStatus code"
          },
          "completionStatus": {
            "type": "string",
            "description": "Completion status of visit (VIS_COMPLETE reference code)",
            "enum": [
              "NORM",
              "SCH",
              "VDE",
              "OFFEND",
              "VISITOR",
              "CANC",
              "HMPOP"
            ]
          },
          "completionStatusDescription": {
            "type": "string",
            "description": "Description of completionStatus code"
          },
          "visitType": {
            "type": "string",
            "description": "Code for social (SCON) or official (OFFI) type of visit (VISIT_TYPE reference code)",
            "enum": [
              "OFFI",
              "SCON"
            ]
          },
          "visitTypeDescription": {
            "type": "string",
            "description": "Description of social or official visit",
            "enum": [
              "Official Visit",
              "Social Contact"
            ]
          },
          "leadVisitor": {
            "type": "string",
            "description": "Name of lead visitor (blank if there was no visiting order for this visit)"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "Description of relationship code"
          },
          "startTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event starts",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time at which event ends",
            "example": "2021-07-05T10:35:17"
          },
          "eventOutcome": {
            "type": "string",
            "description": "Whether attended (ATT) or not (ABS) (OUTCOMES reference code)",
            "enum": [
              "ATT",
              "ABS"
            ]
          },
          "eventOutcomeDescription": {
            "type": "string",
            "description": "Description of eventOutcome code"
          },
          "cancellationReason": {
            "type": "string",
            "description": "Reason for cancellation if not attended (MOVE_CANC_RS reference code)"
          },
          "cancelReasonDescription": {
            "type": "string",
            "description": "Description of cancellationReason code"
          },
          "visitors": {
            "type": "array",
            "description": "List of visitors on visit",
            "items": {
              "$ref": "#/components/schemas/Visitor"
            }
          },
          "searchType": {
            "type": "string",
            "description": "Type of search performed - mandatory if visit completed (SEARCH_LEVEL reference code)",
            "example": "FULL"
          },
          "searchTypeDescription": {
            "type": "string",
            "description": "Description of searchType code"
          }
        },
        "description": "Visit details"
      },
      "VisitWithVisitors": {
        "required": [
          "visitDetails",
          "visitors"
        ],
        "type": "object",
        "properties": {
          "visitors": {
            "type": "array",
            "description": "List of visitors on visit",
            "items": {
              "$ref": "#/components/schemas/Visitor"
            }
          },
          "visitDetails": {
            "$ref": "#/components/schemas/VisitDetails"
          }
        },
        "description": "List of visitors for a visit"
      },
      "Visitor": {
        "required": [
          "attended",
          "dateOfBirth",
          "firstName",
          "lastName",
          "leadVisitor",
          "personId",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "relationship": {
            "type": "string",
            "description": "Relationship of visitor to offender"
          },
          "attended": {
            "type": "boolean",
            "description": "Whether the visitor attended.  Defaults in NOMIS to true when the visit is created so of limited value."
          },
          "personId": {
            "type": "integer",
            "description": "Person id of visitor",
            "format": "int64"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of visitor"
          },
          "firstName": {
            "type": "string",
            "description": "First name of visitor"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of visitor",
            "format": "date"
          },
          "leadVisitor": {
            "type": "boolean",
            "description": "Flag marking the visitor as lead visitor or not (only set for visit orders)",
            "example": true
          }
        },
        "description": "Visitor"
      },
      "SecondaryLanguage": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id",
            "format": "int64",
            "example": 10000
          },
          "code": {
            "type": "string",
            "description": "Language code",
            "example": "ENG"
          },
          "description": {
            "type": "string",
            "description": "Language description",
            "example": "English"
          },
          "canRead": {
            "type": "boolean",
            "description": "Reading proficiency"
          },
          "canWrite": {
            "type": "boolean",
            "description": "Writing proficiency"
          },
          "canSpeak": {
            "type": "boolean",
            "description": "Speaking proficiency"
          }
        },
        "description": "Secondary language"
      },
      "ReasonableAdjustment": {
        "type": "object",
        "properties": {
          "treatmentCode": {
            "type": "string",
            "description": "Treatment Code",
            "example": "WHEELCHR_ACC"
          },
          "commentText": {
            "type": "string",
            "description": "Comment Text",
            "example": "abcd"
          },
          "startDate": {
            "type": "string",
            "description": "Start Date",
            "format": "date",
            "example": "2010-06-21"
          },
          "endDate": {
            "type": "string",
            "description": "End Date",
            "format": "date",
            "example": "2010-06-21"
          },
          "agencyId": {
            "type": "string",
            "description": "The agency id where the adjustment was created",
            "example": "LEI"
          },
          "agencyDescription": {
            "type": "string",
            "description": "The formatted agency description where the adjustment was created",
            "example": "Moorland (HMP)"
          },
          "treatmentDescription": {
            "type": "string",
            "description": "Treatment Description",
            "example": "Wheelchair accessibility"
          },
          "personalCareNeedId": {
            "type": "integer",
            "description": "Personal care need ID",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Reasonable Adjustment"
      },
      "ReasonableAdjustments": {
        "type": "object",
        "properties": {
          "reasonableAdjustments": {
            "type": "array",
            "description": "Reasonable Adjustments",
            "items": {
              "$ref": "#/components/schemas/ReasonableAdjustment"
            }
          }
        },
        "description": "Reasonable Adjustments"
      },
      "PropertyContainer": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "sealMark": {
            "type": "string",
            "description": "The case sequence number for the offender",
            "example": "MDI10"
          },
          "containerType": {
            "type": "string",
            "description": "The type of container",
            "example": "Valuables"
          }
        },
        "description": "Offender property container details"
      },
      "CourtHearings": {
        "type": "object",
        "properties": {
          "hearings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtHearing"
            }
          }
        },
        "description": "Represents court hearings for an offender booking."
      },
      "CourtCase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The case identifier",
            "format": "int64",
            "example": 1
          },
          "caseSeq": {
            "type": "integer",
            "description": "The case sequence number for the offender",
            "format": "int32",
            "example": 1
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date",
            "format": "date",
            "example": "2019-12-01"
          },
          "agency": {
            "$ref": "#/components/schemas/Agency"
          },
          "caseType": {
            "type": "string",
            "description": "The case type",
            "example": "Adult"
          },
          "caseInfoPrefix": {
            "type": "string",
            "description": "The prefix of the case number"
          },
          "caseInfoNumber": {
            "type": "string",
            "description": "The case information number",
            "example": "TD20177010"
          },
          "caseStatus": {
            "type": "string",
            "description": "The case status",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "CLOSED",
              "INACTIVE"
            ]
          },
          "courtHearings": {
            "type": "array",
            "description": "Court hearings associated with the court case",
            "items": {
              "$ref": "#/components/schemas/CourtHearing"
            }
          }
        },
        "description": "Offender court case details"
      },
      "Contact": {
        "required": [
          "activeFlag",
          "approvedVisitorFlag",
          "awareOfChargesFlag",
          "bookingId",
          "canBeContactedFlag",
          "contactType",
          "createDateTime",
          "emergencyContact",
          "firstName",
          "lastName",
          "nextOfKin",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "description": "Last name of the contact",
            "example": "SMITH"
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "example": "JOHN"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Names",
            "example": "MARK"
          },
          "contactType": {
            "type": "string",
            "description": "Contact type",
            "example": "O"
          },
          "contactTypeDescription": {
            "type": "string",
            "description": "Contact type text",
            "example": "Official"
          },
          "relationship": {
            "type": "string",
            "description": "Relationship to prisoner",
            "example": "RO"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "Relationship text",
            "example": "Responsible Officer"
          },
          "commentText": {
            "type": "string",
            "description": "Comments",
            "example": "Some additional information"
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Is an emergency contact",
            "example": true
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates that the contact is Next of Kin Type",
            "example": false
          },
          "relationshipId": {
            "type": "integer",
            "description": "ID of the relationship (internal)",
            "format": "int64",
            "example": 10466277
          },
          "personId": {
            "type": "integer",
            "description": "id of the person contact",
            "format": "int64",
            "example": 5871791
          },
          "activeFlag": {
            "type": "boolean",
            "description": "Active indicator flag.",
            "example": true
          },
          "expiryDate": {
            "type": "string",
            "description": "Date made inactive",
            "format": "date",
            "example": "2019-01-31"
          },
          "approvedVisitorFlag": {
            "type": "boolean",
            "description": "Approved Visitor",
            "example": true
          },
          "canBeContactedFlag": {
            "type": "boolean",
            "description": "Can be contacted",
            "example": false
          },
          "awareOfChargesFlag": {
            "type": "boolean",
            "description": "Aware of charges against prisoner",
            "example": true
          },
          "contactRootOffenderId": {
            "type": "integer",
            "description": "Link to root offender ID",
            "format": "int64",
            "example": 5871791
          },
          "bookingId": {
            "type": "integer",
            "description": "Offender Booking Id for this contact",
            "format": "int64",
            "example": 2468081
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time the contact was created",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Contact"
      },
      "ContactDetail": {
        "required": [
          "bookingId",
          "nextOfKin",
          "otherContacts"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "nextOfKin": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "otherContacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          }
        },
        "description": "Contacts Details for offender"
      },
      "PageBedAssignment": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BedAssignment"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CaseNoteCount": {
        "required": [
          "bookingId",
          "count",
          "subType",
          "type"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Offender booking id",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "Case note type."
          },
          "subType": {
            "type": "string",
            "description": "Case note sub-type."
          },
          "count": {
            "type": "integer",
            "description": "Number of case notes of defined type and subType for offender.",
            "format": "int64"
          },
          "fromDate": {
            "type": "string",
            "description": "Count includes case notes occurring on or after this date (in YYYY-MM-DD format).",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "description": "Count includes case notes occurring on or before this date (in YYYY-MM-DD format).",
            "format": "date"
          }
        },
        "description": "Case Note Count Detail"
      },
      "Account": {
        "required": [
          "cash",
          "currency",
          "damageObligations",
          "savings",
          "spends"
        ],
        "type": "object",
        "properties": {
          "spends": {
            "type": "number",
            "description": "Spends sub account balance."
          },
          "cash": {
            "type": "number",
            "description": "Cash sub account balance."
          },
          "savings": {
            "type": "number",
            "description": "Saves sub account balance."
          },
          "damageObligations": {
            "type": "number",
            "description": "Damage obligation balance."
          },
          "currency": {
            "type": "string",
            "description": "Currency of these balances."
          }
        },
        "description": "Prisoner Account Balance"
      },
      "PageAlert": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PagePrisonerBookingSummary": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerBookingSummary"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PrisonerBookingSummary": {
        "required": [
          "age",
          "agencyId",
          "bookingId",
          "dateOfBirth",
          "firstName",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique, numeric booking id.",
            "format": "int64",
            "example": 1234134
          },
          "bookingNo": {
            "type": "string",
            "description": "Book number.",
            "example": "A12121"
          },
          "offenderNo": {
            "type": "string",
            "description": "Prisoner number (e.g. NOMS Number).",
            "example": "A1234AA"
          },
          "firstName": {
            "type": "string",
            "description": "Prisoner first name.",
            "example": "JOHN"
          },
          "middleName": {
            "type": "string",
            "description": "Prisoner's middle name.",
            "example": "ASHLEY"
          },
          "lastName": {
            "type": "string",
            "description": "Prisoner's last name.",
            "example": "SMITH"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Prisoner's date of birth.",
            "format": "date",
            "example": "1980-05-02"
          },
          "age": {
            "type": "integer",
            "description": "Prisoner's current age.",
            "format": "int32",
            "example": 32
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of agency that prisoner is associated with.",
            "example": "MDI"
          },
          "assignedLivingUnitId": {
            "type": "integer",
            "description": "Identifier of living unit (e.g. cell) that prisoner is assigned to.",
            "format": "int64",
            "example": 123123
          },
          "facialImageId": {
            "type": "integer",
            "description": "Identifier of facial image of prisoner.",
            "format": "int64",
            "example": 1241241
          },
          "imprisonmentStatus": {
            "type": "string",
            "description": "The imprisonment status of the prisoner",
            "example": "SENT"
          },
          "legalStatus": {
            "type": "string",
            "description": "Legal Status",
            "example": "REMAND",
            "enum": [
              "RECALL",
              "DEAD",
              "INDETERMINATE_SENTENCE",
              "SENTENCED",
              "CONVICTED_UNSENTENCED",
              "CIVIL_PRISONER",
              "IMMIGRATION_DETAINEE",
              "REMAND",
              "UNKNOWN",
              "OTHER"
            ]
          },
          "convictedStatus": {
            "type": "string",
            "description": "Convicted Status",
            "example": "Convicted",
            "enum": [
              "Convicted",
              "Remand"
            ]
          },
          "assignedLivingUnitDesc": {
            "type": "string",
            "description": "Description of living unit (e.g. cell) that prisoner is assigned to.",
            "example": "MDI-1-1-3"
          }
        },
        "description": "Prisoner Booking Summary"
      },
      "VisitBalances": {
        "required": [
          "remainingPvo",
          "remainingVo"
        ],
        "type": "object",
        "properties": {
          "remainingVo": {
            "type": "integer",
            "description": "Balance of visit orders remaining",
            "format": "int32"
          },
          "remainingPvo": {
            "type": "integer",
            "description": "Balance of privilege visit orders remaining",
            "format": "int32"
          },
          "latestIepAdjustDate": {
            "type": "string",
            "description": "Date of last IEP adjustment for Visit orders",
            "format": "date"
          },
          "latestPrivIepAdjustDate": {
            "type": "string",
            "description": "Date of last IEP adjustment for Privilege Visit orders",
            "format": "date"
          }
        },
        "description": "Balances of visit orders and privilege visit orders"
      },
      "AgencyPrisonerPayProfile": {
        "required": [
          "agencyId",
          "autoPayFlag",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency identifier",
            "example": "MDI"
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this pay profile took effect",
            "format": "date",
            "example": "2022-10-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this pay profile will stop taking effect",
            "format": "date",
            "example": "2027-10-01"
          },
          "autoPayFlag": {
            "type": "boolean",
            "description": "Whether automatic payments are enabled",
            "example": true
          },
          "payFrequency": {
            "type": "integer",
            "description": "The frequency that payroll runs for this agency (usually 1)",
            "format": "int32",
            "example": 1
          },
          "weeklyAbsenceLimit": {
            "type": "integer",
            "description": "The number of absences that are acceptable within one week",
            "format": "int32",
            "example": 5
          },
          "minHalfDayRate": {
            "type": "number",
            "description": "The minimum value for a half-day rate",
            "example": 1.25
          },
          "maxHalfDayRate": {
            "type": "number",
            "description": "The maximum value for a half-day rate",
            "example": 5.0
          },
          "maxPieceWorkRate": {
            "type": "number",
            "description": "The maximum value for piece work earnings",
            "example": 6.0
          },
          "maxBonusRate": {
            "type": "number",
            "description": "The maximum value for a bonus award",
            "example": 3.0
          },
          "backdateDays": {
            "type": "integer",
            "description": "The number of days allowed to backdate attendance before it locks.",
            "format": "int32",
            "example": 7
          },
          "defaultPayBandCode": {
            "type": "string",
            "description": "The default pay band to use when allocating offenders to paid activities.",
            "example": "1"
          }
        },
        "description": "Agency prisoner pay profile"
      },
      "LocationGroup": {
        "required": [
          "children",
          "key",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group"
          },
          "key": {
            "type": "string",
            "description": "A key for the group"
          },
          "children": {
            "type": "array",
            "description": "The child groups of this group",
            "items": {
              "$ref": "#/components/schemas/LocationGroup"
            }
          }
        },
        "description": "Cell Locations are grouped for unlock lists as a 2 level tree. The two levels are referred to as Location and Sub-Location in the digital prison services UI. Each (location/sub-location) group has a name that is understood by prison officers and also serves as a key to retrieve the corresponding Cell Locations and information about their occupants."
      },
      "AgencyEstablishmentType": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code.",
            "example": "IM"
          },
          "description": {
            "type": "string",
            "description": "Description.",
            "example": "Closed Young Offender Institute (Male)"
          }
        },
        "description": "Agency Establishment Type"
      },
      "AgencyEstablishmentTypes": {
        "required": [
          "agencyId"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency id",
            "example": "MDI"
          },
          "establishmentTypes": {
            "type": "array",
            "description": "The establishment types for the agency.",
            "items": {
              "$ref": "#/components/schemas/AgencyEstablishmentType"
            }
          }
        },
        "description": "Agency Establishment Types"
      },
      "Prison": {
        "required": [
          "active",
          "agencyId",
          "agencyType",
          "description"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Agency identifier.",
            "example": "MDI"
          },
          "description": {
            "type": "string",
            "description": "Agency description.",
            "example": "Moorland (HMP & YOI)"
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the agency",
            "example": "Moorland (HMP & YOI)"
          },
          "agencyType": {
            "type": "string",
            "description": "Agency type.  Reference domain is AGY_LOC_TYPE.  Will be INST for a prison.",
            "example": "INST",
            "enum": [
              "CRC",
              "POLSTN",
              "INST",
              "COMM",
              "APPR",
              "CRT",
              "POLICE",
              "IMDC",
              "TRN",
              "OUT",
              "YOT",
              "SCH",
              "STC",
              "HOST",
              "AIRPORT",
              "HSHOSP",
              "HOSPITAL",
              "PECS",
              "PAR",
              "PNP",
              "PSY"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates the Agency is active",
            "example": true
          }
        }
      },
      "PrisonContactDetail": {
        "required": [
          "addressType",
          "addresses",
          "agencyId",
          "agencyType",
          "city",
          "country",
          "description",
          "formattedDescription",
          "locality",
          "phones",
          "postCode",
          "premise"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "Identifier of agency/prison.",
            "example": "MDI"
          },
          "description": {
            "type": "string",
            "description": "Agency description.",
            "example": "MOORLAND (HMP & YOI)"
          },
          "formattedDescription": {
            "type": "string",
            "description": "Formatted agency description.",
            "example": "Moorland (HMP & YOI)"
          },
          "agencyType": {
            "type": "string",
            "description": "Type of agency.",
            "example": "INST"
          },
          "addressType": {
            "type": "string",
            "description": "Type of address."
          },
          "premise": {
            "type": "string",
            "description": "The Prison name."
          },
          "locality": {
            "type": "string",
            "description": "Describes the geographic location."
          },
          "city": {
            "type": "string",
            "description": "Address city."
          },
          "country": {
            "type": "string",
            "description": "Address country."
          },
          "postCode": {
            "type": "string",
            "description": "Address postcode."
          },
          "phones": {
            "type": "array",
            "description": "List of Telephone details",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of Address details",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          }
        },
        "description": "Contacts details for agency"
      },
      "BookingAndSentenceAdjustments": {
        "type": "object",
        "properties": {
          "sentenceAdjustments": {
            "type": "array",
            "description": "Adjustments associated at a sentence level (of type RECALL_SENTENCE_REMAND, TAGGED_BAIL, RECALL_SENTENCE_TAGGED_BAIL, REMAND or UNUSED_REMAND)",
            "items": {
              "$ref": "#/components/schemas/SentenceAdjustmentValues"
            }
          },
          "bookingAdjustments": {
            "type": "array",
            "description": "Adjustments associated at a booking level (of type SPECIAL_REMISSION, ADDITIONAL_DAYS_AWARDED, RESTORED_ADDITIONAL_DAYS_AWARDED, UNLAWFULLY_AT_LARGE, LAWFULLY_AT_LARGE)",
            "items": {
              "$ref": "#/components/schemas/BookingAdjustment"
            }
          }
        },
        "description": "Adjustments associated at a booking level and a sentence level"
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}